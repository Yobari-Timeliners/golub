name: CI

on:
  push:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-conflict-markers:
    name: Check for Conflict Markers
    if: github.ref_name != 'main'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch latest main and PR head
        run: |
          git fetch origin main:main
          git fetch origin ${{ github.head_ref }}:pr-head
          git checkout pr-head

      - name: Get changed files in PR
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRTUXB origin/main..pr-head)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Changed files: $CHANGED_FILES"

      - name: Check for conflict markers
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.changed_files }}"
          if [ -z "$CHANGED_FILES" ]; then
            echo "No changed files in PR."
            exit 0
          fi
          CONFLICT_FOUND=false
          while IFS= read -r file; do
            if [ -f "$file" ] && grep -E '^(<<<<<<<|=======|>>>>>>> )' "$file"; then
              echo "Conflict markers found in $file:"
              grep -E -n '^(<<<<<<<|=======|>>>>>>> )' "$file" || true
              CONFLICT_FOUND=true
            fi
          done <<< "$CHANGED_FILES"
          if [ "$CONFLICT_FOUND" = "true" ]; then
            echo "Error: Conflict markers detected in PR. Please resolve conflicts manually."
            exit 1
          else
            echo "No conflict markers found."
            exit 0
          fi

  tests:
    name: Run tests
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Read Flutter version from file
        id: read_flutter_version
        run: |
          FLUTTER_VERSION=$(cat .ci/flutter_stable.version)
          echo "FLUTTER_VERSION=$FLUTTER_VERSION" >> $GITHUB_ENV
      - name: Make all scripts executable
        run: find .ci/scripts -type f -name "*.sh" -exec chmod +x {} \;
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: master
          flutter-version: ${{ steps.read_flutter_version.outputs.flutter_version }}
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build curl libgtk-3-dev libglib2.0-dev libgdk-pixbuf2.0-dev
      - name: prepare tool
        run: .ci/scripts/prepare_tool.sh
      - name: download Dart dependencies
        run: .ci/scripts/tool_runner.sh fetch-deps
      - name: Analyze
        run: dart ./script/tool/bin/flutter_plugin_tools.dart analyze
      - name: tool format
        run: .ci/scripts/plugin_tools_format.sh
      - name: format
        run: dart ./script/tool/bin/flutter_plugin_tools.dart format --fail-on-change --no-swift
      - name: Dart unit tests
        run: dart ./script/tool/bin/flutter_plugin_tools.dart dart-test 

  platform-tests:
    name: Run Platform Tests on ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            platform: linux
          - os: macos-15
            platform: macos
          - os: windows-latest
            platform: windows
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Make all scripts executable
        run: find .ci/scripts -type f -name "*.sh" -exec chmod +x {} \;

      - name: Read Flutter version from file
        id: read_flutter_version
        run: |
          FLUTTER_VERSION=$(cat .ci/flutter_stable.version)
          echo "FLUTTER_VERSION=$FLUTTER_VERSION" >> $GITHUB_ENV
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: master
          flutter-version: ${{ steps.read_flutter_version.outputs.flutter_version }}
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable
      - name: Install MacOS dependencies
        if: matrix.platform == 'macos'
        run: |
          brew install clang-format
          brew install swift-format
          

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build curl libgtk-3-dev libglib2.0-dev libgdk-pixbuf2.0-dev

      - name: Install Windows dependencies
        if: matrix.platform == 'windows'
        run: |
          choco install llvm --version=15.0.7 --force -y

      - name: Set up Java
        if: matrix.platform == 'linux' || matrix.platform == 'windows'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      

      - name: prepare tool
        run: .ci/scripts/prepare_tool.sh
      - name: download Dart deps
        run: .ci/scripts/tool_runner.sh fetch-deps

      
      - name: build examples (Win32)
        if: matrix.platform == 'windows'
        run: .ci/scripts/build_examples_win32.sh


      - name: Build Linux examples
        if: matrix.platform == 'linux'
        run: .ci/scripts/tool_runner.sh build-examples --linux
      - name: Enable KVM group perms
        if: matrix.platform == 'linux'
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: Run Linux tests
        if: matrix.platform == 'linux'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          arch: x86_64
          profile: pixel_4a
          script: dart run tool/run_tests.dart
          working-directory: packages/golub


      - name: MacOS updates pods repo
        if: matrix.platform == 'macos'
        run: .ci/scripts/update_pods.sh
      - name: MacOS swift format
        if: matrix.platform == 'macos'
        run: .ci/scripts/tool_runner.sh format --fail-on-change --no-dart --no-clang-format --no-kotlin --no-java
      - name: MacOS setup iOS simulator
        if: matrix.platform == 'macos'
        run: |
          .ci/scripts/create_simulator.sh
          .ci/scripts/boot_simulator.sh


      - name: Run tests
        if: matrix.platform != 'linux'
        run: dart run tool/run_tests.dart
        working-directory: packages/golub



      - name: Shutdown iOS simulator
        if: matrix.platform == 'macos'
        run: .ci/scripts/remove_simulator.sh
        continue-on-error: true