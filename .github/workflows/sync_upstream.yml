name: Sync with Upstream

on:
  schedule:
    - cron: '0 12 * * *' # Run daily at 12:00 UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-filter-repo
        run: pip install git-filter-repo

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone upstream repository
        run: |
          git clone https://github.com/flutter/packages.git /tmp/upstream-temp

      - name: Apply git filter-repo to upstream
        run: |
          cd /tmp/upstream-temp
          git filter-repo --path packages/pigeon --path LICENSE --path README.md --path script --path .gitignore --path .github --path .ci --path .gitattributes --path analysis_options.yaml --path customer_testing.bat --path customer_testing.sh --path .clang-format --path .ci.yaml --path CONTRIBUTING.md --path .ci/legacy_project --path script/tool --force

      - name: Check for existing PR
        id: check-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for existing PR with label 'sync upstream' in ${{ github.repository }}"
          echo "Triggering branch: ${{ github.ref_name }}"
          PR_JSON=$(gh pr list --repo "${{ github.repository }}" --label "sync upstream" --state open --json number,headRefName 2>/dev/null || echo "")
          echo "PR_JSON=$PR_JSON"
          PR_DATA=$(echo "$PR_JSON" | jq -r '.[0] | select(.number) | "\(.number):\(.headRefName)"' 2>/dev/null || echo "")
          echo "PR_DATA=$PR_DATA"
          if [ -n "$PR_DATA" ]; then
            echo "Found existing PR: $PR_DATA"
            echo "number=$(echo "$PR_DATA" | cut -d':' -f1)" >> $GITHUB_OUTPUT
            echo "headRefName=$(echo "$PR_DATA" | cut -d':' -f2)" >> $GITHUB_OUTPUT
          else
            echo "No existing PR found with label 'sync upstream'."
            echo "Checking all PRs for debugging:"
            gh pr list --repo "${{ github.repository }}" --state open --json number,title,labels,headRefName || echo "Failed to list PRs"
            echo "number=" >> $GITHUB_OUTPUT
            echo "headRefName=" >> $GITHUB_OUTPUT
          fi

      - name: Create or checkout sync branch
        run: |
          if [ -n "${{ steps.check-pr.outputs.headRefName }}" ]; then
            echo "Checking out existing PR branch: ${{ steps.check-pr.outputs.headRefName }}"
            git checkout "${{ steps.check-pr.outputs.headRefName }}"
            git reset --hard origin/${{github.ref_name}} # Reset to main before applying new changes
          else
            echo "Creating new branch: sync-upstream-$(date +%Y%m%d-%H%M%S)"
            git checkout -b "sync-upstream-$(date +%Y%m%d-%H%M%S)"
          fi

      - name: Add filtered upstream as remote
        run: |
          git remote add filtered-upstream /tmp/upstream-temp
          git fetch filtered-upstream main

      - name: Merge filtered upstream changes
        id: merge
        run: |
          git merge filtered-upstream/main --no-commit --no-ff || true
          if git status --porcelain | grep '^UU'; then
            echo "conflicts_detected=true" >> $GITHUB_OUTPUT
            echo "conflicted_files<<EOF" >> $GITHUB_OUTPUT
            git status --porcelain | grep '^UU' | awk '{print $2}' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "conflicts_detected=false" >> $GITHUB_OUTPUT
            echo "conflicted_files=" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Commit changes or conflicts
        id: commit
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            if [ "${{ steps.merge.outputs.conflicts_detected }}" = "true" ]; then
              git commit -m "Sync with upstream flutter/packages (conflicts detected)" || true
            else
              git commit -m "Sync with upstream flutter/packages" || true
            fi
            git push --force origin HEAD
            echo "committed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit."
            echo "committed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create or update PR
        if: steps.commit.outputs.committed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_TITLE="Sync with upstream flutter/packages"
          if [ "${{ steps.merge.outputs.conflicts_detected }}" = "true" ]; then
            PR_TITLE="$PR_TITLE (Conflicts)"
            CONFLICTED_FILES=$(echo "${{ steps.merge.outputs.conflicted_files }}" | sed 's/^/- /')
            PR_BODY=$(echo -e "Sync with upstream flutter/packages\n\n**Conflicts detected**: Please resolve conflicts manually:\n$CONFLICTED_FILES\n")
          else
            PR_BODY=$(echo -e "Sync with upstream flutter/packages\n\nNo conflicts detected.")
          fi
          if [ -n "${{ steps.check-pr.outputs.number }}" ]; then
            echo "Updating PR #${{ steps.check-pr.outputs.number }}"
            echo -e "$PR_BODY" | gh pr edit "${{ steps.check-pr.outputs.number }}" \
              --repo "${{ github.repository }}" --title "$PR_TITLE" --body-file - \
              --add-label "sync upstream"
          else
            echo "Creating new PR"
            echo -e "$PR_BODY" | gh pr create \
              --repo "${{ github.repository }}" --title "$PR_TITLE" \
              --base main --head "$(git rev-parse --abbrev-ref HEAD)" \
              --assignee feduke-nukem --label "sync upstream" --body-file -
          fi

      - name: Clean up temporary upstream
        if: always()
        run: |
          rm -rf /tmp/upstream-temp