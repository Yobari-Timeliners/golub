name: Sync with Upstream

on:
  schedule:
    - cron: '0 12 * * *' # Run daily at 12:00 UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper merging

      - name: Install git-filter-repo
        run: pip install git-filter-repo

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone upstream repository
        run: |
          git clone https://github.com/flutter/packages.git /tmp/upstream-temp

      - name: Apply git filter-repo to upstream
        run: |
          cd /tmp/upstream-temp
          git filter-repo --path packages/pigeon --path LICENSE --path README.md --path script --path .gitignore --path .github --path .ci --path .gitattributes --path analysis_options.yaml --path customer_testing.bat --path customer_testing.sh --path .clang-format --path .ci.yaml --path CONTRIBUTING.md --path .ci/legacy_project --path script/tool --force

      - name: Check for existing PR
        id: check-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_DATA=$(gh pr list --label "sync upstream" --state open --json number,headRefName --jq '.[0] | select(.number) | .number + ":" + .headRefName' || true)
          if [ -n "$PR_DATA" ]; then
            echo "existing_pr_number=$(echo "$PR_DATA" | cut -d':' -f1)" >> $GITHUB_OUTPUT
            echo "existing_pr_branch=$(echo "$PR_DATA" | cut -d':' -f2)" >> $GITHUB_OUTPUT
          else
            echo "existing_pr_number=" >> $GITHUB_OUTPUT
            echo "existing_pr_branch=" >> $GITHUB_OUTPUT
          fi

      - name: Create or checkout sync branch
        run: |
          if [ -n "${{ steps.check-pr.outputs.existing_pr_branch }}" ]; then
            echo "Using existing branch: ${{ steps.check-pr.outputs.existing_pr_branch }}"
            git checkout ${{ steps.check-pr.outputs.existing_pr_branch }}
          else
            echo "Creating new branch"
            git checkout -b sync-upstream-$(date +%Y%m%d-%H%M%S)
          fi

      - name: Add filtered upstream as remote
        run: |
          git remote add filtered-upstream /tmp/upstream-temp
          git fetch filtered-upstream main

      - name: Merge filtered upstream changes
        id: merge
        run: |
          git merge filtered-upstream/main --no-commit --no-ff || true
          if git status --porcelain | grep '^UU'; then
            echo "conflicts_detected=true" >> $GITHUB_OUTPUT
            echo "conflicted_files<<EOF" >> $GITHUB_OUTPUT
            git status --porcelain | grep '^UU' | awk '{print $2}' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "conflicts_detected=false" >> $GITHUB_OUTPUT
            echo "conflicted_files=" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Extract conflicting code
        id: extract-conflicts
        if: steps.merge.outputs.conflicts_detected == 'true'
        run: |
          echo "conflicted_code<<EOF" >> $GITHUB_OUTPUT
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              EXT="${file##*.}"
              [ -z "$EXT" ] && EXT="text" # Default to text if no extension
              echo "<details><summary>$file</summary>\n\n\`\`\`$EXT\n$(cat "$file")\n\`\`\`\n</details>" >> conflicted_code.txt
            fi
          done <<< "${{ steps.merge.outputs.conflicted_files }}"
          cat conflicted_code.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          rm -f conflicted_code.txt

      - name: Commit changes or conflicts
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            if [ "${{ steps.merge.outputs.conflicts_detected }}" = "true" ]; then
              git commit -m "Sync with filtered upstream flutter/packages (conflicts detected)" || true
            else
              git commit -m "Sync with filtered upstream flutter/packages" || true
            fi
            git push origin HEAD
          else
            echo "No changes to commit. Exiting."
            exit 0
          fi

      - name: Create or update pull request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_TITLE="Sync with upstream flutter/packages"
          PR_LABEL="sync upstream"
          if [ "${{ steps.merge.outputs.conflicts_detected }}" = "true" ]; then
            PR_TITLE="$PR_TITLE (Conflicts)"
            CONFLICTED_FILES=$(echo "${{ steps.merge.outputs.conflicted_files }}" | sed 's/^/- /')
            PR_BODY=$(echo -e "Sync with upstream flutter/packages\n\n**Conflicts detected**: Please resolve the following conflicts manually:\n$CONFLICTED_FILES\n\n### Conflicted Files\n${{ steps.extract-conflicts.outputs.conflicted_code }}\n")
          else
            PR_BODY=$(echo -e "Sync with upstream flutter/packages\n\nNo conflicts detected.\n")
          fi
          if [ -n "${{ steps.check-pr.outputs.existing_pr_number }}" ]; then
            echo "Updating existing PR #${{ steps.check-pr.outputs.existing_pr_number }}"
            echo -e "$PR_BODY" | gh pr edit ${{ steps.check-pr.outputs.existing_pr_number }} --title "$PR_TITLE" --body-file -
          else
            echo "Creating new PR"
            echo -e "$PR_BODY" | gh pr create --title "$PR_TITLE" --base main --head $(git rev-parse --abbrev-ref HEAD) --assignee feduke-nukem --label "$PR_LABEL" --body-file -
          fi

      - name: Clean up temporary upstream
        run: |
          rm -rf /tmp/upstream-temp