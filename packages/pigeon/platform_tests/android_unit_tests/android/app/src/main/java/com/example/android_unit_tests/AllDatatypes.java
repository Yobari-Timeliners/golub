// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.android_unit_tests;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class AllDatatypes {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Everything {
    private Boolean aBool;

    public Boolean getABool() {
      return aBool;
    }

    public void setABool(Boolean setterArg) {
      this.aBool = setterArg;
    }

    private Long anInt;

    public Long getAnInt() {
      return anInt;
    }

    public void setAnInt(Long setterArg) {
      this.anInt = setterArg;
    }

    private Double aDouble;

    public Double getADouble() {
      return aDouble;
    }

    public void setADouble(Double setterArg) {
      this.aDouble = setterArg;
    }

    private String aString;

    public String getAString() {
      return aString;
    }

    public void setAString(String setterArg) {
      this.aString = setterArg;
    }

    private byte[] aByteArray;

    public byte[] getAByteArray() {
      return aByteArray;
    }

    public void setAByteArray(byte[] setterArg) {
      this.aByteArray = setterArg;
    }

    private int[] a4ByteArray;

    public int[] getA4ByteArray() {
      return a4ByteArray;
    }

    public void setA4ByteArray(int[] setterArg) {
      this.a4ByteArray = setterArg;
    }

    private long[] a8ByteArray;

    public long[] getA8ByteArray() {
      return a8ByteArray;
    }

    public void setA8ByteArray(long[] setterArg) {
      this.a8ByteArray = setterArg;
    }

    private double[] aFloatArray;

    public double[] getAFloatArray() {
      return aFloatArray;
    }

    public void setAFloatArray(double[] setterArg) {
      this.aFloatArray = setterArg;
    }

    private List<Object> aList;

    public List<Object> getAList() {
      return aList;
    }

    public void setAList(List<Object> setterArg) {
      this.aList = setterArg;
    }

    private Map<Object, Object> aMap;

    public Map<Object, Object> getAMap() {
      return aMap;
    }

    public void setAMap(Map<Object, Object> setterArg) {
      this.aMap = setterArg;
    }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("aBool", aBool);
      toMapResult.put("anInt", anInt);
      toMapResult.put("aDouble", aDouble);
      toMapResult.put("aString", aString);
      toMapResult.put("aByteArray", aByteArray);
      toMapResult.put("a4ByteArray", a4ByteArray);
      toMapResult.put("a8ByteArray", a8ByteArray);
      toMapResult.put("aFloatArray", aFloatArray);
      toMapResult.put("aList", aList);
      toMapResult.put("aMap", aMap);
      return toMapResult;
    }

    static Everything fromMap(Map<String, Object> map) {
      Everything fromMapResult = new Everything();
      Object aBool = map.get("aBool");
      fromMapResult.aBool = (Boolean) aBool;
      Object anInt = map.get("anInt");
      fromMapResult.anInt =
          (anInt == null) ? null : ((anInt instanceof Integer) ? (Integer) anInt : (Long) anInt);
      Object aDouble = map.get("aDouble");
      fromMapResult.aDouble = (Double) aDouble;
      Object aString = map.get("aString");
      fromMapResult.aString = (String) aString;
      Object aByteArray = map.get("aByteArray");
      fromMapResult.aByteArray = (byte[]) aByteArray;
      Object a4ByteArray = map.get("a4ByteArray");
      fromMapResult.a4ByteArray = (int[]) a4ByteArray;
      Object a8ByteArray = map.get("a8ByteArray");
      fromMapResult.a8ByteArray = (long[]) a8ByteArray;
      Object aFloatArray = map.get("aFloatArray");
      fromMapResult.aFloatArray = (double[]) aFloatArray;
      Object aList = map.get("aList");
      fromMapResult.aList = (List<Object>) aList;
      Object aMap = map.get("aMap");
      fromMapResult.aMap = (Map<Object, Object>) aMap;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class FlutterEverything {
    private final BinaryMessenger binaryMessenger;

    public FlutterEverything(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    public interface Reply<T> {
      void reply(T reply);
    }

    public void giveMeEverything(Reply<Everything> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger,
              "dev.flutter.pigeon.FlutterEverything.giveMeEverything",
              new StandardMessageCodec());
      channel.send(
          null,
          channelReply -> {
            Map outputMap = (Map) channelReply;
            @SuppressWarnings("ConstantConditions")
            Everything output = Everything.fromMap(outputMap);
            callback.reply(output);
          });
    }

    public void echo(Everything argInput, Reply<Everything> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger,
              "dev.flutter.pigeon.FlutterEverything.echo",
              new StandardMessageCodec());
      Map<String, Object> inputMap = argInput.toMap();
      channel.send(
          inputMap,
          channelReply -> {
            Map outputMap = (Map) channelReply;
            @SuppressWarnings("ConstantConditions")
            Everything output = Everything.fromMap(outputMap);
            callback.reply(output);
          });
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface HostEverything {
    Everything giveMeEverything();

    Everything echo(Everything arg);

    /** Sets up an instance of `HostEverything` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HostEverything api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.HostEverything.giveMeEverything",
                new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  Everything output = api.giveMeEverything();
                  wrapped.put("result", output.toMap());
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.HostEverything.echo",
                new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                Map<String, Object> wrapped = new HashMap<>();
                try {
                  @SuppressWarnings("ConstantConditions")
                  Everything input = Everything.fromMap((Map<String, Object>) message);
                  Everything output = api.echo(input);
                  wrapped.put("result", output.toMap());
                } catch (Error | RuntimeException exception) {
                  wrapped.put("error", wrapError(exception));
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
