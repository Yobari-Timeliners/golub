// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "all_datatypes.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
      @"code" : (error.code ? error.code : [NSNull null]),
      @"message" : (error.message ? error.message : [NSNull null]),
      @"details" : (error.details ? error.details : [NSNull null]),
    };
  }
  return @{
    @"result" : (result ? result : [NSNull null]),
    @"error" : errorDict,
  };
}

@interface Everything ()
+ (Everything *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation Everything
+ (Everything *)fromMap:(NSDictionary *)dict {
  Everything *result = [[Everything alloc] init];
  result.aBool = dict[@"aBool"];
  if ((NSNull *)result.aBool == [NSNull null]) {
    result.aBool = nil;
  }
  result.anInt = dict[@"anInt"];
  if ((NSNull *)result.anInt == [NSNull null]) {
    result.anInt = nil;
  }
  result.aDouble = dict[@"aDouble"];
  if ((NSNull *)result.aDouble == [NSNull null]) {
    result.aDouble = nil;
  }
  result.aString = dict[@"aString"];
  if ((NSNull *)result.aString == [NSNull null]) {
    result.aString = nil;
  }
  result.aByteArray = dict[@"aByteArray"];
  if ((NSNull *)result.aByteArray == [NSNull null]) {
    result.aByteArray = nil;
  }
  result.a4ByteArray = dict[@"a4ByteArray"];
  if ((NSNull *)result.a4ByteArray == [NSNull null]) {
    result.a4ByteArray = nil;
  }
  result.a8ByteArray = dict[@"a8ByteArray"];
  if ((NSNull *)result.a8ByteArray == [NSNull null]) {
    result.a8ByteArray = nil;
  }
  result.aFloatArray = dict[@"aFloatArray"];
  if ((NSNull *)result.aFloatArray == [NSNull null]) {
    result.aFloatArray = nil;
  }
  result.aList = dict[@"aList"];
  if ((NSNull *)result.aList == [NSNull null]) {
    result.aList = nil;
  }
  result.aMap = dict[@"aMap"];
  if ((NSNull *)result.aMap == [NSNull null]) {
    result.aMap = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary
      dictionaryWithObjectsAndKeys:(self.aBool ? self.aBool : [NSNull null]), @"aBool",
                                   (self.anInt ? self.anInt : [NSNull null]), @"anInt",
                                   (self.aDouble ? self.aDouble : [NSNull null]), @"aDouble",
                                   (self.aString ? self.aString : [NSNull null]), @"aString",
                                   (self.aByteArray ? self.aByteArray : [NSNull null]),
                                   @"aByteArray",
                                   (self.a4ByteArray ? self.a4ByteArray : [NSNull null]),
                                   @"a4ByteArray",
                                   (self.a8ByteArray ? self.a8ByteArray : [NSNull null]),
                                   @"a8ByteArray",
                                   (self.aFloatArray ? self.aFloatArray : [NSNull null]),
                                   @"aFloatArray", (self.aList ? self.aList : [NSNull null]),
                                   @"aList", (self.aMap ? self.aMap : [NSNull null]), @"aMap", nil];
}
@end

@interface FlutterEverything ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FlutterEverything
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)giveMeEverything:(void (^)(Everything *, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterEverything.giveMeEverything"
             binaryMessenger:self.binaryMessenger];
  [channel sendMessage:nil
                 reply:^(id reply) {
                   NSDictionary *outputMap = reply;
                   Everything *output = [Everything fromMap:outputMap];
                   completion(output, nil);
                 }];
}
- (void)echo:(Everything *)input completion:(void (^)(Everything *, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterEverything.echo"
             binaryMessenger:self.binaryMessenger];
  NSDictionary *inputMap = [input toMap];
  [channel sendMessage:inputMap
                 reply:^(id reply) {
                   NSDictionary *outputMap = reply;
                   Everything *output = [Everything fromMap:outputMap];
                   completion(output, nil);
                 }];
}
@end
void HostEverythingSetup(id<FlutterBinaryMessenger> binaryMessenger, id<HostEverything> api) {
  {
    FlutterBasicMessageChannel *channel = [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.HostEverything.giveMeEverything"
               binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        Everything *output = [api giveMeEverything:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
