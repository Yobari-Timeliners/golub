// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "enum.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
      @"code" : (error.code ? error.code : [NSNull null]),
      @"message" : (error.message ? error.message : [NSNull null]),
      @"details" : (error.details ? error.details : [NSNull null]),
    };
  }
  return @{
    @"result" : (result ? result : [NSNull null]),
    @"error" : errorDict,
  };
}

@interface ACData ()
+ (ACData *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation ACData
+ (ACData *)fromMap:(NSDictionary *)dict {
  ACData *result = [[ACData alloc] init];
  result.state = [dict[@"state"] integerValue];
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:@(self.state), @"state", nil];
}
@end

void ACEnumApi2HostSetup(id<FlutterBinaryMessenger> binaryMessenger, id<ACEnumApi2Host> api) {
  {
    FlutterBasicMessageChannel *channel =
        [FlutterBasicMessageChannel messageChannelWithName:@"dev.flutter.pigeon.EnumApi2Host.echo"
                                           binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        ACData *input = [ACData fromMap:message];
        FlutterError *error;
        ACData *output = [api echo:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ACEnumApi2Flutter ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation ACEnumApi2Flutter
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)echo:(ACData *)input completion:(void (^)(ACData *, NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel messageChannelWithName:@"dev.flutter.pigeon.EnumApi2Flutter.echo"
                                         binaryMessenger:self.binaryMessenger];
  NSDictionary *inputMap = [input toMap];
  [channel sendMessage:inputMap
                 reply:^(id reply) {
                   NSDictionary *outputMap = reply;
                   ACData *output = [ACData fromMap:outputMap];
                   completion(output, nil);
                 }];
}
@end
