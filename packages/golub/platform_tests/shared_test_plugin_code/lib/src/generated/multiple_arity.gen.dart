// Copyright 2013 The Flutter Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Golub, do not edit directly.
// See also: https://pub.dev/packages/golub
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({
  Object? result,
  PlatformException? error,
  bool empty = false,
}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class _GolubCodec extends StandardMessageCodec {
  const _GolubCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MultipleArityHostApi {
  /// Constructor for [MultipleArityHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MultipleArityHostApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : golubVar_binaryMessenger = binaryMessenger,
       golubVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? golubVar_binaryMessenger;

  static const MessageCodec<Object?> golubChannelCodec = _GolubCodec();

  final String golubVar_messageChannelSuffix;

  Future<int> subtract(int x, int y) async {
    final String golubVar_channelName =
        'dev.bayori.golub.golub_integration_tests.MultipleArityHostApi.subtract$golubVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubVar_channel =
        BasicMessageChannel<Object?>(
          golubVar_channelName,
          golubChannelCodec,
          binaryMessenger: golubVar_binaryMessenger,
        );
    final Future<Object?> golubVar_sendFuture = golubVar_channel.send(<Object?>[
      x,
      y,
    ]);
    final List<Object?>? golubVar_replyList =
        await golubVar_sendFuture as List<Object?>?;
    if (golubVar_replyList == null) {
      throw _createConnectionError(golubVar_channelName);
    } else if (golubVar_replyList.length > 1) {
      throw PlatformException(
        code: golubVar_replyList[0]! as String,
        message: golubVar_replyList[1] as String?,
        details: golubVar_replyList[2],
      );
    } else if (golubVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubVar_replyList[0] as int?)!;
    }
  }
}

abstract class MultipleArityFlutterApi {
  static const MessageCodec<Object?> golubChannelCodec = _GolubCodec();

  int subtract(int x, int y);

  static void setUp(
    MultipleArityFlutterApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?>
      golubVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golub.golub_integration_tests.MultipleArityFlutterApi.subtract$messageChannelSuffix',
        golubChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubVar_channel.setMessageHandler(null);
      } else {
        golubVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golub.golub_integration_tests.MultipleArityFlutterApi.subtract was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_x = (args[0] as int?);
          assert(
            arg_x != null,
            'Argument for dev.bayori.golub.golub_integration_tests.MultipleArityFlutterApi.subtract was null, expected non-null int.',
          );
          final int? arg_y = (args[1] as int?);
          assert(
            arg_y != null,
            'Argument for dev.bayori.golub.golub_integration_tests.MultipleArityFlutterApi.subtract was null, expected non-null int.',
          );
          try {
            final int output = api.subtract(arg_x!, arg_y!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}
