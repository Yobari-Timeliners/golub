// Copyright 2013 The Flutter Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Golub, do not edit directly.
// See also: https://pub.dev/packages/golub
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({
  Object? result,
  PlatformException? error,
  bool empty = false,
}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed.every(
          ((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]),
        );
  }
  if (a is Map && b is Map) {
    return a.length == b.length &&
        a.entries.every(
          (MapEntry<Object?, Object?> entry) =>
              (b as Map<Object?, Object?>).containsKey(entry.key) &&
              _deepEquals(entry.value, b[entry.key]),
        );
  }
  return a == b;
}

/// This comment is to test enum documentation comments.
enum EnumState {
  /// This comment is to test enum member (Pending) documentation comments.
  Pending,

  /// This comment is to test enum member (Success) documentation comments.
  Success,

  /// This comment is to test enum member (Error) documentation comments.
  Error,

  /// This comment is to test enum member (SnakeCase) documentation comments.
  SnakeCase,
}

/// This comment is to test class documentation comments.
class DataWithEnum {
  DataWithEnum({
    this.state,
  });

  /// This comment is to test field documentation comments.
  EnumState? state;

  List<Object?> _toList() {
    return <Object?>[
      state,
    ];
  }

  Object encode() {
    return _toList();
  }

  static DataWithEnum decode(Object result) {
    result as List<Object?>;
    return DataWithEnum(
      state: result[0] as EnumState?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! DataWithEnum || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _GolubCodec extends StandardMessageCodec {
  const _GolubCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is EnumState) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is DataWithEnum) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : EnumState.values[value];
      case 130:
        return DataWithEnum.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// This comment is to test api documentation comments.
class EnumApi2Host {
  /// Constructor for [EnumApi2Host].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  EnumApi2Host({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) : golubVar_binaryMessenger = binaryMessenger,
       golubVar_messageChannelSuffix =
           messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? golubVar_binaryMessenger;

  static const MessageCodec<Object?> golubChannelCodec = _GolubCodec();

  final String golubVar_messageChannelSuffix;

  /// This comment is to test method documentation comments.
  Future<DataWithEnum> echo(DataWithEnum data) async {
    final String golubVar_channelName =
        'dev.bayori.golub.golub_integration_tests.EnumApi2Host.echo$golubVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> golubVar_channel =
        BasicMessageChannel<Object?>(
          golubVar_channelName,
          golubChannelCodec,
          binaryMessenger: golubVar_binaryMessenger,
        );
    final Future<Object?> golubVar_sendFuture = golubVar_channel.send(<Object?>[
      data,
    ]);
    final List<Object?>? golubVar_replyList =
        await golubVar_sendFuture as List<Object?>?;
    if (golubVar_replyList == null) {
      throw _createConnectionError(golubVar_channelName);
    } else if (golubVar_replyList.length > 1) {
      throw PlatformException(
        code: golubVar_replyList[0]! as String,
        message: golubVar_replyList[1] as String?,
        details: golubVar_replyList[2],
      );
    } else if (golubVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (golubVar_replyList[0] as DataWithEnum?)!;
    }
  }
}

/// This comment is to test api documentation comments.
abstract class EnumApi2Flutter {
  static const MessageCodec<Object?> golubChannelCodec = _GolubCodec();

  /// This comment is to test method documentation comments.
  DataWithEnum echo(DataWithEnum data);

  static void setUp(
    EnumApi2Flutter? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?>
      golubVar_channel = BasicMessageChannel<Object?>(
        'dev.bayori.golub.golub_integration_tests.EnumApi2Flutter.echo$messageChannelSuffix',
        golubChannelCodec,
        binaryMessenger: binaryMessenger,
      );
      if (api == null) {
        golubVar_channel.setMessageHandler(null);
      } else {
        golubVar_channel.setMessageHandler((Object? message) async {
          assert(
            message != null,
            'Argument for dev.bayori.golub.golub_integration_tests.EnumApi2Flutter.echo was null.',
          );
          final List<Object?> args = (message as List<Object?>?)!;
          final DataWithEnum? arg_data = (args[0] as DataWithEnum?);
          assert(
            arg_data != null,
            'Argument for dev.bayori.golub.golub_integration_tests.EnumApi2Flutter.echo was null, expected non-null DataWithEnum.',
          );
          try {
            final DataWithEnum output = api.echo(arg_data!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
              error: PlatformException(code: 'error', message: e.toString()),
            );
          }
        });
      }
    }
  }
}
