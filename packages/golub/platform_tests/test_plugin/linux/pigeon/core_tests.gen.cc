// Copyright 2013 The Flutter Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Golub, do not edit directly.
// See also: https://pub.dev/packages/golub

#include "core_tests.gen.h"

struct _CoreTestsGolubTestUnusedClass {
  GObject parent_instance;

  FlValue* a_field;
};

G_DEFINE_TYPE(CoreTestsGolubTestUnusedClass, core_tests_golub_test_unused_class,
              G_TYPE_OBJECT)

static void core_tests_golub_test_unused_class_dispose(GObject* object) {
  CoreTestsGolubTestUnusedClass* self =
      CORE_TESTS_GOLUB_TEST_UNUSED_CLASS(object);
  g_clear_pointer(&self->a_field, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golub_test_unused_class_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_unused_class_init(
    CoreTestsGolubTestUnusedClass* self) {}

static void core_tests_golub_test_unused_class_class_init(
    CoreTestsGolubTestUnusedClassClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = core_tests_golub_test_unused_class_dispose;
}

CoreTestsGolubTestUnusedClass* core_tests_golub_test_unused_class_new(
    FlValue* a_field) {
  CoreTestsGolubTestUnusedClass* self = CORE_TESTS_GOLUB_TEST_UNUSED_CLASS(
      g_object_new(core_tests_golub_test_unused_class_get_type(), nullptr));
  if (a_field != nullptr) {
    self->a_field = fl_value_ref(a_field);
  } else {
    self->a_field = nullptr;
  }
  return self;
}

FlValue* core_tests_golub_test_unused_class_get_a_field(
    CoreTestsGolubTestUnusedClass* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_UNUSED_CLASS(self), nullptr);
  return self->a_field;
}

static FlValue* core_tests_golub_test_unused_class_to_list(
    CoreTestsGolubTestUnusedClass* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->a_field != nullptr
                                   ? fl_value_ref(self->a_field)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsGolubTestUnusedClass*
core_tests_golub_test_unused_class_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  FlValue* a_field = nullptr;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_field = value0;
  }
  return core_tests_golub_test_unused_class_new(a_field);
}

struct _CoreTestsGolubTestAllTypes {
  GObject parent_instance;

  gboolean a_bool;
  int64_t an_int;
  int64_t an_int64;
  double a_double;
  uint8_t* a_byte_array;
  size_t a_byte_array_length;
  int32_t* a4_byte_array;
  size_t a4_byte_array_length;
  int64_t* a8_byte_array;
  size_t a8_byte_array_length;
  double* a_float_array;
  size_t a_float_array_length;
  CoreTestsGolubTestAnEnum an_enum;
  CoreTestsGolubTestAnotherEnum another_enum;
  gchar* a_string;
  FlValue* an_object;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* enum_list;
  FlValue* object_list;
  FlValue* list_list;
  FlValue* map_list;
  FlValue* map;
  FlValue* string_map;
  FlValue* int_map;
  FlValue* enum_map;
  FlValue* object_map;
  FlValue* list_map;
  FlValue* map_map;
};

G_DEFINE_TYPE(CoreTestsGolubTestAllTypes, core_tests_golub_test_all_types,
              G_TYPE_OBJECT)

static void core_tests_golub_test_all_types_dispose(GObject* object) {
  CoreTestsGolubTestAllTypes* self = CORE_TESTS_GOLUB_TEST_ALL_TYPES(object);
  g_clear_pointer(&self->a_string, g_free);
  g_clear_pointer(&self->an_object, fl_value_unref);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->enum_list, fl_value_unref);
  g_clear_pointer(&self->object_list, fl_value_unref);
  g_clear_pointer(&self->list_list, fl_value_unref);
  g_clear_pointer(&self->map_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  g_clear_pointer(&self->string_map, fl_value_unref);
  g_clear_pointer(&self->int_map, fl_value_unref);
  g_clear_pointer(&self->enum_map, fl_value_unref);
  g_clear_pointer(&self->object_map, fl_value_unref);
  g_clear_pointer(&self->list_map, fl_value_unref);
  g_clear_pointer(&self->map_map, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golub_test_all_types_parent_class)->dispose(object);
}

static void core_tests_golub_test_all_types_init(
    CoreTestsGolubTestAllTypes* self) {}

static void core_tests_golub_test_all_types_class_init(
    CoreTestsGolubTestAllTypesClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = core_tests_golub_test_all_types_dispose;
}

CoreTestsGolubTestAllTypes* core_tests_golub_test_all_types_new(
    gboolean a_bool, int64_t an_int, int64_t an_int64, double a_double,
    const uint8_t* a_byte_array, size_t a_byte_array_length,
    const int32_t* a4_byte_array, size_t a4_byte_array_length,
    const int64_t* a8_byte_array, size_t a8_byte_array_length,
    const double* a_float_array, size_t a_float_array_length,
    CoreTestsGolubTestAnEnum an_enum,
    CoreTestsGolubTestAnotherEnum another_enum, const gchar* a_string,
    FlValue* an_object, FlValue* list, FlValue* string_list, FlValue* int_list,
    FlValue* double_list, FlValue* bool_list, FlValue* enum_list,
    FlValue* object_list, FlValue* list_list, FlValue* map_list, FlValue* map,
    FlValue* string_map, FlValue* int_map, FlValue* enum_map,
    FlValue* object_map, FlValue* list_map, FlValue* map_map) {
  CoreTestsGolubTestAllTypes* self = CORE_TESTS_GOLUB_TEST_ALL_TYPES(
      g_object_new(core_tests_golub_test_all_types_get_type(), nullptr));
  self->a_bool = a_bool;
  self->an_int = an_int;
  self->an_int64 = an_int64;
  self->a_double = a_double;
  self->a_byte_array = static_cast<uint8_t*>(
      memcpy(malloc(a_byte_array_length), a_byte_array, a_byte_array_length));
  self->a_byte_array_length = a_byte_array_length;
  self->a4_byte_array = static_cast<int32_t*>(
      memcpy(malloc(sizeof(int32_t) * a4_byte_array_length), a4_byte_array,
             sizeof(int32_t) * a4_byte_array_length));
  self->a4_byte_array_length = a4_byte_array_length;
  self->a8_byte_array = static_cast<int64_t*>(
      memcpy(malloc(sizeof(int64_t) * a8_byte_array_length), a8_byte_array,
             sizeof(int64_t) * a8_byte_array_length));
  self->a8_byte_array_length = a8_byte_array_length;
  self->a_float_array = static_cast<double*>(
      memcpy(malloc(sizeof(double) * a_float_array_length), a_float_array,
             sizeof(double) * a_float_array_length));
  self->a_float_array_length = a_float_array_length;
  self->an_enum = an_enum;
  self->another_enum = another_enum;
  self->a_string = g_strdup(a_string);
  self->an_object = fl_value_ref(an_object);
  self->list = fl_value_ref(list);
  self->string_list = fl_value_ref(string_list);
  self->int_list = fl_value_ref(int_list);
  self->double_list = fl_value_ref(double_list);
  self->bool_list = fl_value_ref(bool_list);
  self->enum_list = fl_value_ref(enum_list);
  self->object_list = fl_value_ref(object_list);
  self->list_list = fl_value_ref(list_list);
  self->map_list = fl_value_ref(map_list);
  self->map = fl_value_ref(map);
  self->string_map = fl_value_ref(string_map);
  self->int_map = fl_value_ref(int_map);
  self->enum_map = fl_value_ref(enum_map);
  self->object_map = fl_value_ref(object_map);
  self->list_map = fl_value_ref(list_map);
  self->map_map = fl_value_ref(map_map);
  return self;
}

gboolean core_tests_golub_test_all_types_get_a_bool(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), FALSE);
  return self->a_bool;
}

int64_t core_tests_golub_test_all_types_get_an_int(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), 0);
  return self->an_int;
}

int64_t core_tests_golub_test_all_types_get_an_int64(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), 0);
  return self->an_int64;
}

double core_tests_golub_test_all_types_get_a_double(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), 0.0);
  return self->a_double;
}

const uint8_t* core_tests_golub_test_all_types_get_a_byte_array(
    CoreTestsGolubTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a_byte_array_length;
  return self->a_byte_array;
}

const int32_t* core_tests_golub_test_all_types_get_a4_byte_array(
    CoreTestsGolubTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a4_byte_array_length;
  return self->a4_byte_array;
}

const int64_t* core_tests_golub_test_all_types_get_a8_byte_array(
    CoreTestsGolubTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a8_byte_array_length;
  return self->a8_byte_array;
}

const double* core_tests_golub_test_all_types_get_a_float_array(
    CoreTestsGolubTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a_float_array_length;
  return self->a_float_array;
}

CoreTestsGolubTestAnEnum core_tests_golub_test_all_types_get_an_enum(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self),
                       static_cast<CoreTestsGolubTestAnEnum>(0));
  return self->an_enum;
}

CoreTestsGolubTestAnotherEnum core_tests_golub_test_all_types_get_another_enum(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self),
                       static_cast<CoreTestsGolubTestAnotherEnum>(0));
  return self->another_enum;
}

const gchar* core_tests_golub_test_all_types_get_a_string(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->a_string;
}

FlValue* core_tests_golub_test_all_types_get_an_object(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->an_object;
}

FlValue* core_tests_golub_test_all_types_get_list(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->list;
}

FlValue* core_tests_golub_test_all_types_get_string_list(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->string_list;
}

FlValue* core_tests_golub_test_all_types_get_int_list(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->int_list;
}

FlValue* core_tests_golub_test_all_types_get_double_list(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->double_list;
}

FlValue* core_tests_golub_test_all_types_get_bool_list(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->bool_list;
}

FlValue* core_tests_golub_test_all_types_get_enum_list(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->enum_list;
}

FlValue* core_tests_golub_test_all_types_get_object_list(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->object_list;
}

FlValue* core_tests_golub_test_all_types_get_list_list(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->list_list;
}

FlValue* core_tests_golub_test_all_types_get_map_list(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->map_list;
}

FlValue* core_tests_golub_test_all_types_get_map(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->map;
}

FlValue* core_tests_golub_test_all_types_get_string_map(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->string_map;
}

FlValue* core_tests_golub_test_all_types_get_int_map(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->int_map;
}

FlValue* core_tests_golub_test_all_types_get_enum_map(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->enum_map;
}

FlValue* core_tests_golub_test_all_types_get_object_map(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->object_map;
}

FlValue* core_tests_golub_test_all_types_get_list_map(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->list_map;
}

FlValue* core_tests_golub_test_all_types_get_map_map(
    CoreTestsGolubTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES(self), nullptr);
  return self->map_map;
}

static FlValue* core_tests_golub_test_all_types_to_list(
    CoreTestsGolubTestAllTypes* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->a_bool));
  fl_value_append_take(values, fl_value_new_int(self->an_int));
  fl_value_append_take(values, fl_value_new_int(self->an_int64));
  fl_value_append_take(values, fl_value_new_float(self->a_double));
  fl_value_append_take(
      values,
      fl_value_new_uint8_list(self->a_byte_array, self->a_byte_array_length));
  fl_value_append_take(
      values,
      fl_value_new_int32_list(self->a4_byte_array, self->a4_byte_array_length));
  fl_value_append_take(
      values,
      fl_value_new_int64_list(self->a8_byte_array, self->a8_byte_array_length));
  fl_value_append_take(
      values,
      fl_value_new_float_list(self->a_float_array, self->a_float_array_length));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                  fl_value_new_int(self->an_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                                  fl_value_new_int(self->another_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(values, fl_value_new_string(self->a_string));
  fl_value_append_take(values, fl_value_ref(self->an_object));
  fl_value_append_take(values, fl_value_ref(self->list));
  fl_value_append_take(values, fl_value_ref(self->string_list));
  fl_value_append_take(values, fl_value_ref(self->int_list));
  fl_value_append_take(values, fl_value_ref(self->double_list));
  fl_value_append_take(values, fl_value_ref(self->bool_list));
  fl_value_append_take(values, fl_value_ref(self->enum_list));
  fl_value_append_take(values, fl_value_ref(self->object_list));
  fl_value_append_take(values, fl_value_ref(self->list_list));
  fl_value_append_take(values, fl_value_ref(self->map_list));
  fl_value_append_take(values, fl_value_ref(self->map));
  fl_value_append_take(values, fl_value_ref(self->string_map));
  fl_value_append_take(values, fl_value_ref(self->int_map));
  fl_value_append_take(values, fl_value_ref(self->enum_map));
  fl_value_append_take(values, fl_value_ref(self->object_map));
  fl_value_append_take(values, fl_value_ref(self->list_map));
  fl_value_append_take(values, fl_value_ref(self->map_map));
  return values;
}

static CoreTestsGolubTestAllTypes*
core_tests_golub_test_all_types_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t an_int = fl_value_get_int(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t an_int64 = fl_value_get_int(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double a_double = fl_value_get_float(value3);
  FlValue* value4 = fl_value_get_list_value(values, 4);
  const uint8_t* a_byte_array = fl_value_get_uint8_list(value4);
  size_t a_byte_array_length = fl_value_get_length(value4);
  FlValue* value5 = fl_value_get_list_value(values, 5);
  const int32_t* a4_byte_array = fl_value_get_int32_list(value5);
  size_t a4_byte_array_length = fl_value_get_length(value5);
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const int64_t* a8_byte_array = fl_value_get_int64_list(value6);
  size_t a8_byte_array_length = fl_value_get_length(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  const double* a_float_array = fl_value_get_float_list(value7);
  size_t a_float_array_length = fl_value_get_length(value7);
  FlValue* value8 = fl_value_get_list_value(values, 8);
  CoreTestsGolubTestAnEnum an_enum = static_cast<CoreTestsGolubTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(value8)))));
  FlValue* value9 = fl_value_get_list_value(values, 9);
  CoreTestsGolubTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value9)))));
  FlValue* value10 = fl_value_get_list_value(values, 10);
  const gchar* a_string = fl_value_get_string(value10);
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* an_object = value11;
  FlValue* value12 = fl_value_get_list_value(values, 12);
  FlValue* list = value12;
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* string_list = value13;
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* int_list = value14;
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* double_list = value15;
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* bool_list = value16;
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* enum_list = value17;
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* object_list = value18;
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* list_list = value19;
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* map_list = value20;
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* map = value21;
  FlValue* value22 = fl_value_get_list_value(values, 22);
  FlValue* string_map = value22;
  FlValue* value23 = fl_value_get_list_value(values, 23);
  FlValue* int_map = value23;
  FlValue* value24 = fl_value_get_list_value(values, 24);
  FlValue* enum_map = value24;
  FlValue* value25 = fl_value_get_list_value(values, 25);
  FlValue* object_map = value25;
  FlValue* value26 = fl_value_get_list_value(values, 26);
  FlValue* list_map = value26;
  FlValue* value27 = fl_value_get_list_value(values, 27);
  FlValue* map_map = value27;
  return core_tests_golub_test_all_types_new(
      a_bool, an_int, an_int64, a_double, a_byte_array, a_byte_array_length,
      a4_byte_array, a4_byte_array_length, a8_byte_array, a8_byte_array_length,
      a_float_array, a_float_array_length, an_enum, another_enum, a_string,
      an_object, list, string_list, int_list, double_list, bool_list, enum_list,
      object_list, list_list, map_list, map, string_map, int_map, enum_map,
      object_map, list_map, map_map);
}

struct _CoreTestsGolubTestAllNullableTypes {
  GObject parent_instance;

  gboolean* a_nullable_bool;
  int64_t* a_nullable_int;
  int64_t* a_nullable_int64;
  double* a_nullable_double;
  uint8_t* a_nullable_byte_array;
  size_t a_nullable_byte_array_length;
  int32_t* a_nullable4_byte_array;
  size_t a_nullable4_byte_array_length;
  int64_t* a_nullable8_byte_array;
  size_t a_nullable8_byte_array_length;
  double* a_nullable_float_array;
  size_t a_nullable_float_array_length;
  CoreTestsGolubTestAnEnum* a_nullable_enum;
  CoreTestsGolubTestAnotherEnum* another_nullable_enum;
  gchar* a_nullable_string;
  FlValue* a_nullable_object;
  CoreTestsGolubTestAllNullableTypes* all_nullable_types;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* enum_list;
  FlValue* object_list;
  FlValue* list_list;
  FlValue* map_list;
  FlValue* recursive_class_list;
  FlValue* map;
  FlValue* string_map;
  FlValue* int_map;
  FlValue* enum_map;
  FlValue* object_map;
  FlValue* list_map;
  FlValue* map_map;
  FlValue* recursive_class_map;
};

G_DEFINE_TYPE(CoreTestsGolubTestAllNullableTypes,
              core_tests_golub_test_all_nullable_types, G_TYPE_OBJECT)

static void core_tests_golub_test_all_nullable_types_dispose(GObject* object) {
  CoreTestsGolubTestAllNullableTypes* self =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(object);
  g_clear_pointer(&self->a_nullable_bool, g_free);
  g_clear_pointer(&self->a_nullable_int, g_free);
  g_clear_pointer(&self->a_nullable_int64, g_free);
  g_clear_pointer(&self->a_nullable_double, g_free);
  g_clear_pointer(&self->a_nullable_enum, g_free);
  g_clear_pointer(&self->another_nullable_enum, g_free);
  g_clear_pointer(&self->a_nullable_string, g_free);
  g_clear_pointer(&self->a_nullable_object, fl_value_unref);
  g_clear_object(&self->all_nullable_types);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->enum_list, fl_value_unref);
  g_clear_pointer(&self->object_list, fl_value_unref);
  g_clear_pointer(&self->list_list, fl_value_unref);
  g_clear_pointer(&self->map_list, fl_value_unref);
  g_clear_pointer(&self->recursive_class_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  g_clear_pointer(&self->string_map, fl_value_unref);
  g_clear_pointer(&self->int_map, fl_value_unref);
  g_clear_pointer(&self->enum_map, fl_value_unref);
  g_clear_pointer(&self->object_map, fl_value_unref);
  g_clear_pointer(&self->list_map, fl_value_unref);
  g_clear_pointer(&self->map_map, fl_value_unref);
  g_clear_pointer(&self->recursive_class_map, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golub_test_all_nullable_types_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_all_nullable_types_init(
    CoreTestsGolubTestAllNullableTypes* self) {}

static void core_tests_golub_test_all_nullable_types_class_init(
    CoreTestsGolubTestAllNullableTypesClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_all_nullable_types_dispose;
}

CoreTestsGolubTestAllNullableTypes*
core_tests_golub_test_all_nullable_types_new(
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    int64_t* a_nullable_int64, double* a_nullable_double,
    const uint8_t* a_nullable_byte_array, size_t a_nullable_byte_array_length,
    const int32_t* a_nullable4_byte_array, size_t a_nullable4_byte_array_length,
    const int64_t* a_nullable8_byte_array, size_t a_nullable8_byte_array_length,
    const double* a_nullable_float_array, size_t a_nullable_float_array_length,
    CoreTestsGolubTestAnEnum* a_nullable_enum,
    CoreTestsGolubTestAnotherEnum* another_nullable_enum,
    const gchar* a_nullable_string, FlValue* a_nullable_object,
    CoreTestsGolubTestAllNullableTypes* all_nullable_types, FlValue* list,
    FlValue* string_list, FlValue* int_list, FlValue* double_list,
    FlValue* bool_list, FlValue* enum_list, FlValue* object_list,
    FlValue* list_list, FlValue* map_list, FlValue* recursive_class_list,
    FlValue* map, FlValue* string_map, FlValue* int_map, FlValue* enum_map,
    FlValue* object_map, FlValue* list_map, FlValue* map_map,
    FlValue* recursive_class_map) {
  CoreTestsGolubTestAllNullableTypes* self =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(g_object_new(
          core_tests_golub_test_all_nullable_types_get_type(), nullptr));
  if (a_nullable_bool != nullptr) {
    self->a_nullable_bool = static_cast<gboolean*>(malloc(sizeof(gboolean)));
    *self->a_nullable_bool = *a_nullable_bool;
  } else {
    self->a_nullable_bool = nullptr;
  }
  if (a_nullable_int != nullptr) {
    self->a_nullable_int = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int = *a_nullable_int;
  } else {
    self->a_nullable_int = nullptr;
  }
  if (a_nullable_int64 != nullptr) {
    self->a_nullable_int64 = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int64 = *a_nullable_int64;
  } else {
    self->a_nullable_int64 = nullptr;
  }
  if (a_nullable_double != nullptr) {
    self->a_nullable_double = static_cast<double*>(malloc(sizeof(double)));
    *self->a_nullable_double = *a_nullable_double;
  } else {
    self->a_nullable_double = nullptr;
  }
  if (a_nullable_byte_array != nullptr) {
    self->a_nullable_byte_array = static_cast<uint8_t*>(
        memcpy(malloc(a_nullable_byte_array_length), a_nullable_byte_array,
               a_nullable_byte_array_length));
    self->a_nullable_byte_array_length = a_nullable_byte_array_length;
  } else {
    self->a_nullable_byte_array = nullptr;
    self->a_nullable_byte_array_length = 0;
  }
  if (a_nullable4_byte_array != nullptr) {
    self->a_nullable4_byte_array = static_cast<int32_t*>(
        memcpy(malloc(sizeof(int32_t) * a_nullable4_byte_array_length),
               a_nullable4_byte_array,
               sizeof(int32_t) * a_nullable4_byte_array_length));
    self->a_nullable4_byte_array_length = a_nullable4_byte_array_length;
  } else {
    self->a_nullable4_byte_array = nullptr;
    self->a_nullable4_byte_array_length = 0;
  }
  if (a_nullable8_byte_array != nullptr) {
    self->a_nullable8_byte_array = static_cast<int64_t*>(
        memcpy(malloc(sizeof(int64_t) * a_nullable8_byte_array_length),
               a_nullable8_byte_array,
               sizeof(int64_t) * a_nullable8_byte_array_length));
    self->a_nullable8_byte_array_length = a_nullable8_byte_array_length;
  } else {
    self->a_nullable8_byte_array = nullptr;
    self->a_nullable8_byte_array_length = 0;
  }
  if (a_nullable_float_array != nullptr) {
    self->a_nullable_float_array = static_cast<double*>(
        memcpy(malloc(sizeof(double) * a_nullable_float_array_length),
               a_nullable_float_array,
               sizeof(double) * a_nullable_float_array_length));
    self->a_nullable_float_array_length = a_nullable_float_array_length;
  } else {
    self->a_nullable_float_array = nullptr;
    self->a_nullable_float_array_length = 0;
  }
  if (a_nullable_enum != nullptr) {
    self->a_nullable_enum = static_cast<CoreTestsGolubTestAnEnum*>(
        malloc(sizeof(CoreTestsGolubTestAnEnum)));
    *self->a_nullable_enum = *a_nullable_enum;
  } else {
    self->a_nullable_enum = nullptr;
  }
  if (another_nullable_enum != nullptr) {
    self->another_nullable_enum = static_cast<CoreTestsGolubTestAnotherEnum*>(
        malloc(sizeof(CoreTestsGolubTestAnotherEnum)));
    *self->another_nullable_enum = *another_nullable_enum;
  } else {
    self->another_nullable_enum = nullptr;
  }
  if (a_nullable_string != nullptr) {
    self->a_nullable_string = g_strdup(a_nullable_string);
  } else {
    self->a_nullable_string = nullptr;
  }
  if (a_nullable_object != nullptr) {
    self->a_nullable_object = fl_value_ref(a_nullable_object);
  } else {
    self->a_nullable_object = nullptr;
  }
  if (all_nullable_types != nullptr) {
    self->all_nullable_types = CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
        g_object_ref(all_nullable_types));
  } else {
    self->all_nullable_types = nullptr;
  }
  if (list != nullptr) {
    self->list = fl_value_ref(list);
  } else {
    self->list = nullptr;
  }
  if (string_list != nullptr) {
    self->string_list = fl_value_ref(string_list);
  } else {
    self->string_list = nullptr;
  }
  if (int_list != nullptr) {
    self->int_list = fl_value_ref(int_list);
  } else {
    self->int_list = nullptr;
  }
  if (double_list != nullptr) {
    self->double_list = fl_value_ref(double_list);
  } else {
    self->double_list = nullptr;
  }
  if (bool_list != nullptr) {
    self->bool_list = fl_value_ref(bool_list);
  } else {
    self->bool_list = nullptr;
  }
  if (enum_list != nullptr) {
    self->enum_list = fl_value_ref(enum_list);
  } else {
    self->enum_list = nullptr;
  }
  if (object_list != nullptr) {
    self->object_list = fl_value_ref(object_list);
  } else {
    self->object_list = nullptr;
  }
  if (list_list != nullptr) {
    self->list_list = fl_value_ref(list_list);
  } else {
    self->list_list = nullptr;
  }
  if (map_list != nullptr) {
    self->map_list = fl_value_ref(map_list);
  } else {
    self->map_list = nullptr;
  }
  if (recursive_class_list != nullptr) {
    self->recursive_class_list = fl_value_ref(recursive_class_list);
  } else {
    self->recursive_class_list = nullptr;
  }
  if (map != nullptr) {
    self->map = fl_value_ref(map);
  } else {
    self->map = nullptr;
  }
  if (string_map != nullptr) {
    self->string_map = fl_value_ref(string_map);
  } else {
    self->string_map = nullptr;
  }
  if (int_map != nullptr) {
    self->int_map = fl_value_ref(int_map);
  } else {
    self->int_map = nullptr;
  }
  if (enum_map != nullptr) {
    self->enum_map = fl_value_ref(enum_map);
  } else {
    self->enum_map = nullptr;
  }
  if (object_map != nullptr) {
    self->object_map = fl_value_ref(object_map);
  } else {
    self->object_map = nullptr;
  }
  if (list_map != nullptr) {
    self->list_map = fl_value_ref(list_map);
  } else {
    self->list_map = nullptr;
  }
  if (map_map != nullptr) {
    self->map_map = fl_value_ref(map_map);
  } else {
    self->map_map = nullptr;
  }
  if (recursive_class_map != nullptr) {
    self->recursive_class_map = fl_value_ref(recursive_class_map);
  } else {
    self->recursive_class_map = nullptr;
  }
  return self;
}

gboolean* core_tests_golub_test_all_nullable_types_get_a_nullable_bool(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_bool;
}

int64_t* core_tests_golub_test_all_nullable_types_get_a_nullable_int(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_int;
}

int64_t* core_tests_golub_test_all_nullable_types_get_a_nullable_int64(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_int64;
}

double* core_tests_golub_test_all_nullable_types_get_a_nullable_double(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_double;
}

const uint8_t*
core_tests_golub_test_all_nullable_types_get_a_nullable_byte_array(
    CoreTestsGolubTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable_byte_array_length;
  return self->a_nullable_byte_array;
}

const int32_t*
core_tests_golub_test_all_nullable_types_get_a_nullable4_byte_array(
    CoreTestsGolubTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable4_byte_array_length;
  return self->a_nullable4_byte_array;
}

const int64_t*
core_tests_golub_test_all_nullable_types_get_a_nullable8_byte_array(
    CoreTestsGolubTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable8_byte_array_length;
  return self->a_nullable8_byte_array;
}

const double*
core_tests_golub_test_all_nullable_types_get_a_nullable_float_array(
    CoreTestsGolubTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable_float_array_length;
  return self->a_nullable_float_array;
}

CoreTestsGolubTestAnEnum*
core_tests_golub_test_all_nullable_types_get_a_nullable_enum(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_enum;
}

CoreTestsGolubTestAnotherEnum*
core_tests_golub_test_all_nullable_types_get_another_nullable_enum(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->another_nullable_enum;
}

const gchar* core_tests_golub_test_all_nullable_types_get_a_nullable_string(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_string;
}

FlValue* core_tests_golub_test_all_nullable_types_get_a_nullable_object(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_object;
}

CoreTestsGolubTestAllNullableTypes*
core_tests_golub_test_all_nullable_types_get_all_nullable_types(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->all_nullable_types;
}

FlValue* core_tests_golub_test_all_nullable_types_get_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->list;
}

FlValue* core_tests_golub_test_all_nullable_types_get_string_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->string_list;
}

FlValue* core_tests_golub_test_all_nullable_types_get_int_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->int_list;
}

FlValue* core_tests_golub_test_all_nullable_types_get_double_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->double_list;
}

FlValue* core_tests_golub_test_all_nullable_types_get_bool_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->bool_list;
}

FlValue* core_tests_golub_test_all_nullable_types_get_enum_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->enum_list;
}

FlValue* core_tests_golub_test_all_nullable_types_get_object_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->object_list;
}

FlValue* core_tests_golub_test_all_nullable_types_get_list_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->list_list;
}

FlValue* core_tests_golub_test_all_nullable_types_get_map_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->map_list;
}

FlValue* core_tests_golub_test_all_nullable_types_get_recursive_class_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->recursive_class_list;
}

FlValue* core_tests_golub_test_all_nullable_types_get_map(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->map;
}

FlValue* core_tests_golub_test_all_nullable_types_get_string_map(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->string_map;
}

FlValue* core_tests_golub_test_all_nullable_types_get_int_map(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->int_map;
}

FlValue* core_tests_golub_test_all_nullable_types_get_enum_map(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->enum_map;
}

FlValue* core_tests_golub_test_all_nullable_types_get_object_map(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->object_map;
}

FlValue* core_tests_golub_test_all_nullable_types_get_list_map(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->list_map;
}

FlValue* core_tests_golub_test_all_nullable_types_get_map_map(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->map_map;
}

FlValue* core_tests_golub_test_all_nullable_types_get_recursive_class_map(
    CoreTestsGolubTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->recursive_class_map;
}

static FlValue* core_tests_golub_test_all_nullable_types_to_list(
    CoreTestsGolubTestAllNullableTypes* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->a_nullable_bool != nullptr
                                   ? fl_value_new_bool(*self->a_nullable_bool)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int64 != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int64)
                                   : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_double != nullptr
                           ? fl_value_new_float(*self->a_nullable_double)
                           : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_byte_array != nullptr
                  ? fl_value_new_uint8_list(self->a_nullable_byte_array,
                                            self->a_nullable_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable4_byte_array != nullptr
                  ? fl_value_new_int32_list(self->a_nullable4_byte_array,
                                            self->a_nullable4_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable8_byte_array != nullptr
                  ? fl_value_new_int64_list(self->a_nullable8_byte_array,
                                            self->a_nullable8_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_float_array != nullptr
                  ? fl_value_new_float_list(self->a_nullable_float_array,
                                            self->a_nullable_float_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values,
      self->a_nullable_enum != nullptr
          ? fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                fl_value_new_int(*self->a_nullable_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  fl_value_append_take(
      values,
      self->another_nullable_enum != nullptr
          ? fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                                fl_value_new_int(*self->another_nullable_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_string != nullptr
                           ? fl_value_new_string(self->a_nullable_string)
                           : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_object != nullptr
                                   ? fl_value_ref(self->a_nullable_object)
                                   : fl_value_new_null());
  fl_value_append_take(
      values, self->all_nullable_types != nullptr
                  ? fl_value_new_custom_object(
                        core_tests_golub_test_all_nullable_types_type_id,
                        G_OBJECT(self->all_nullable_types))
                  : fl_value_new_null());
  fl_value_append_take(values, self->list != nullptr ? fl_value_ref(self->list)
                                                     : fl_value_new_null());
  fl_value_append_take(values, self->string_list != nullptr
                                   ? fl_value_ref(self->string_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->int_list != nullptr
                                   ? fl_value_ref(self->int_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->double_list != nullptr
                                   ? fl_value_ref(self->double_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->bool_list != nullptr
                                   ? fl_value_ref(self->bool_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->enum_list != nullptr
                                   ? fl_value_ref(self->enum_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->object_list != nullptr
                                   ? fl_value_ref(self->object_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list_list != nullptr
                                   ? fl_value_ref(self->list_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map_list != nullptr
                                   ? fl_value_ref(self->map_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->recursive_class_list != nullptr
                                   ? fl_value_ref(self->recursive_class_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map != nullptr ? fl_value_ref(self->map)
                                                    : fl_value_new_null());
  fl_value_append_take(values, self->string_map != nullptr
                                   ? fl_value_ref(self->string_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->int_map != nullptr
                                   ? fl_value_ref(self->int_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->enum_map != nullptr
                                   ? fl_value_ref(self->enum_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->object_map != nullptr
                                   ? fl_value_ref(self->object_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list_map != nullptr
                                   ? fl_value_ref(self->list_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map_map != nullptr
                                   ? fl_value_ref(self->map_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->recursive_class_map != nullptr
                                   ? fl_value_ref(self->recursive_class_map)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsGolubTestAllNullableTypes*
core_tests_golub_test_all_nullable_types_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t* a_nullable_int64 = nullptr;
  int64_t a_nullable_int64_value;
  if (fl_value_get_type(value2) != FL_VALUE_TYPE_NULL) {
    a_nullable_int64_value = fl_value_get_int(value2);
    a_nullable_int64 = &a_nullable_int64_value;
  }
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double* a_nullable_double = nullptr;
  double a_nullable_double_value;
  if (fl_value_get_type(value3) != FL_VALUE_TYPE_NULL) {
    a_nullable_double_value = fl_value_get_float(value3);
    a_nullable_double = &a_nullable_double_value;
  }
  FlValue* value4 = fl_value_get_list_value(values, 4);
  const uint8_t* a_nullable_byte_array = nullptr;
  size_t a_nullable_byte_array_length = 0;
  if (fl_value_get_type(value4) != FL_VALUE_TYPE_NULL) {
    a_nullable_byte_array = fl_value_get_uint8_list(value4);
    a_nullable_byte_array_length = fl_value_get_length(value4);
  }
  FlValue* value5 = fl_value_get_list_value(values, 5);
  const int32_t* a_nullable4_byte_array = nullptr;
  size_t a_nullable4_byte_array_length = 0;
  if (fl_value_get_type(value5) != FL_VALUE_TYPE_NULL) {
    a_nullable4_byte_array = fl_value_get_int32_list(value5);
    a_nullable4_byte_array_length = fl_value_get_length(value5);
  }
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const int64_t* a_nullable8_byte_array = nullptr;
  size_t a_nullable8_byte_array_length = 0;
  if (fl_value_get_type(value6) != FL_VALUE_TYPE_NULL) {
    a_nullable8_byte_array = fl_value_get_int64_list(value6);
    a_nullable8_byte_array_length = fl_value_get_length(value6);
  }
  FlValue* value7 = fl_value_get_list_value(values, 7);
  const double* a_nullable_float_array = nullptr;
  size_t a_nullable_float_array_length = 0;
  if (fl_value_get_type(value7) != FL_VALUE_TYPE_NULL) {
    a_nullable_float_array = fl_value_get_float_list(value7);
    a_nullable_float_array_length = fl_value_get_length(value7);
  }
  FlValue* value8 = fl_value_get_list_value(values, 8);
  CoreTestsGolubTestAnEnum* a_nullable_enum = nullptr;
  CoreTestsGolubTestAnEnum a_nullable_enum_value;
  if (fl_value_get_type(value8) != FL_VALUE_TYPE_NULL) {
    a_nullable_enum_value = static_cast<CoreTestsGolubTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value8)))));
    a_nullable_enum = &a_nullable_enum_value;
  }
  FlValue* value9 = fl_value_get_list_value(values, 9);
  CoreTestsGolubTestAnotherEnum* another_nullable_enum = nullptr;
  CoreTestsGolubTestAnotherEnum another_nullable_enum_value;
  if (fl_value_get_type(value9) != FL_VALUE_TYPE_NULL) {
    another_nullable_enum_value = static_cast<CoreTestsGolubTestAnotherEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value9)))));
    another_nullable_enum = &another_nullable_enum_value;
  }
  FlValue* value10 = fl_value_get_list_value(values, 10);
  const gchar* a_nullable_string = nullptr;
  if (fl_value_get_type(value10) != FL_VALUE_TYPE_NULL) {
    a_nullable_string = fl_value_get_string(value10);
  }
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* a_nullable_object = nullptr;
  if (fl_value_get_type(value11) != FL_VALUE_TYPE_NULL) {
    a_nullable_object = value11;
  }
  FlValue* value12 = fl_value_get_list_value(values, 12);
  CoreTestsGolubTestAllNullableTypes* all_nullable_types = nullptr;
  if (fl_value_get_type(value12) != FL_VALUE_TYPE_NULL) {
    all_nullable_types = CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
        fl_value_get_custom_value_object(value12));
  }
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* list = nullptr;
  if (fl_value_get_type(value13) != FL_VALUE_TYPE_NULL) {
    list = value13;
  }
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* string_list = nullptr;
  if (fl_value_get_type(value14) != FL_VALUE_TYPE_NULL) {
    string_list = value14;
  }
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* int_list = nullptr;
  if (fl_value_get_type(value15) != FL_VALUE_TYPE_NULL) {
    int_list = value15;
  }
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* double_list = nullptr;
  if (fl_value_get_type(value16) != FL_VALUE_TYPE_NULL) {
    double_list = value16;
  }
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* bool_list = nullptr;
  if (fl_value_get_type(value17) != FL_VALUE_TYPE_NULL) {
    bool_list = value17;
  }
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* enum_list = nullptr;
  if (fl_value_get_type(value18) != FL_VALUE_TYPE_NULL) {
    enum_list = value18;
  }
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* object_list = nullptr;
  if (fl_value_get_type(value19) != FL_VALUE_TYPE_NULL) {
    object_list = value19;
  }
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* list_list = nullptr;
  if (fl_value_get_type(value20) != FL_VALUE_TYPE_NULL) {
    list_list = value20;
  }
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* map_list = nullptr;
  if (fl_value_get_type(value21) != FL_VALUE_TYPE_NULL) {
    map_list = value21;
  }
  FlValue* value22 = fl_value_get_list_value(values, 22);
  FlValue* recursive_class_list = nullptr;
  if (fl_value_get_type(value22) != FL_VALUE_TYPE_NULL) {
    recursive_class_list = value22;
  }
  FlValue* value23 = fl_value_get_list_value(values, 23);
  FlValue* map = nullptr;
  if (fl_value_get_type(value23) != FL_VALUE_TYPE_NULL) {
    map = value23;
  }
  FlValue* value24 = fl_value_get_list_value(values, 24);
  FlValue* string_map = nullptr;
  if (fl_value_get_type(value24) != FL_VALUE_TYPE_NULL) {
    string_map = value24;
  }
  FlValue* value25 = fl_value_get_list_value(values, 25);
  FlValue* int_map = nullptr;
  if (fl_value_get_type(value25) != FL_VALUE_TYPE_NULL) {
    int_map = value25;
  }
  FlValue* value26 = fl_value_get_list_value(values, 26);
  FlValue* enum_map = nullptr;
  if (fl_value_get_type(value26) != FL_VALUE_TYPE_NULL) {
    enum_map = value26;
  }
  FlValue* value27 = fl_value_get_list_value(values, 27);
  FlValue* object_map = nullptr;
  if (fl_value_get_type(value27) != FL_VALUE_TYPE_NULL) {
    object_map = value27;
  }
  FlValue* value28 = fl_value_get_list_value(values, 28);
  FlValue* list_map = nullptr;
  if (fl_value_get_type(value28) != FL_VALUE_TYPE_NULL) {
    list_map = value28;
  }
  FlValue* value29 = fl_value_get_list_value(values, 29);
  FlValue* map_map = nullptr;
  if (fl_value_get_type(value29) != FL_VALUE_TYPE_NULL) {
    map_map = value29;
  }
  FlValue* value30 = fl_value_get_list_value(values, 30);
  FlValue* recursive_class_map = nullptr;
  if (fl_value_get_type(value30) != FL_VALUE_TYPE_NULL) {
    recursive_class_map = value30;
  }
  return core_tests_golub_test_all_nullable_types_new(
      a_nullable_bool, a_nullable_int, a_nullable_int64, a_nullable_double,
      a_nullable_byte_array, a_nullable_byte_array_length,
      a_nullable4_byte_array, a_nullable4_byte_array_length,
      a_nullable8_byte_array, a_nullable8_byte_array_length,
      a_nullable_float_array, a_nullable_float_array_length, a_nullable_enum,
      another_nullable_enum, a_nullable_string, a_nullable_object,
      all_nullable_types, list, string_list, int_list, double_list, bool_list,
      enum_list, object_list, list_list, map_list, recursive_class_list, map,
      string_map, int_map, enum_map, object_map, list_map, map_map,
      recursive_class_map);
}

struct _CoreTestsGolubTestAllNullableTypesWithoutRecursion {
  GObject parent_instance;

  gboolean* a_nullable_bool;
  int64_t* a_nullable_int;
  int64_t* a_nullable_int64;
  double* a_nullable_double;
  uint8_t* a_nullable_byte_array;
  size_t a_nullable_byte_array_length;
  int32_t* a_nullable4_byte_array;
  size_t a_nullable4_byte_array_length;
  int64_t* a_nullable8_byte_array;
  size_t a_nullable8_byte_array_length;
  double* a_nullable_float_array;
  size_t a_nullable_float_array_length;
  CoreTestsGolubTestAnEnum* a_nullable_enum;
  CoreTestsGolubTestAnotherEnum* another_nullable_enum;
  gchar* a_nullable_string;
  FlValue* a_nullable_object;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* enum_list;
  FlValue* object_list;
  FlValue* list_list;
  FlValue* map_list;
  FlValue* map;
  FlValue* string_map;
  FlValue* int_map;
  FlValue* enum_map;
  FlValue* object_map;
  FlValue* list_map;
  FlValue* map_map;
};

G_DEFINE_TYPE(CoreTestsGolubTestAllNullableTypesWithoutRecursion,
              core_tests_golub_test_all_nullable_types_without_recursion,
              G_TYPE_OBJECT)

static void core_tests_golub_test_all_nullable_types_without_recursion_dispose(
    GObject* object) {
  CoreTestsGolubTestAllNullableTypesWithoutRecursion* self =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(object);
  g_clear_pointer(&self->a_nullable_bool, g_free);
  g_clear_pointer(&self->a_nullable_int, g_free);
  g_clear_pointer(&self->a_nullable_int64, g_free);
  g_clear_pointer(&self->a_nullable_double, g_free);
  g_clear_pointer(&self->a_nullable_enum, g_free);
  g_clear_pointer(&self->another_nullable_enum, g_free);
  g_clear_pointer(&self->a_nullable_string, g_free);
  g_clear_pointer(&self->a_nullable_object, fl_value_unref);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->enum_list, fl_value_unref);
  g_clear_pointer(&self->object_list, fl_value_unref);
  g_clear_pointer(&self->list_list, fl_value_unref);
  g_clear_pointer(&self->map_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  g_clear_pointer(&self->string_map, fl_value_unref);
  g_clear_pointer(&self->int_map, fl_value_unref);
  g_clear_pointer(&self->enum_map, fl_value_unref);
  g_clear_pointer(&self->object_map, fl_value_unref);
  g_clear_pointer(&self->list_map, fl_value_unref);
  g_clear_pointer(&self->map_map, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_all_nullable_types_without_recursion_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_all_nullable_types_without_recursion_init(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {}

static void
core_tests_golub_test_all_nullable_types_without_recursion_class_init(
    CoreTestsGolubTestAllNullableTypesWithoutRecursionClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_all_nullable_types_without_recursion_dispose;
}

CoreTestsGolubTestAllNullableTypesWithoutRecursion*
core_tests_golub_test_all_nullable_types_without_recursion_new(
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    int64_t* a_nullable_int64, double* a_nullable_double,
    const uint8_t* a_nullable_byte_array, size_t a_nullable_byte_array_length,
    const int32_t* a_nullable4_byte_array, size_t a_nullable4_byte_array_length,
    const int64_t* a_nullable8_byte_array, size_t a_nullable8_byte_array_length,
    const double* a_nullable_float_array, size_t a_nullable_float_array_length,
    CoreTestsGolubTestAnEnum* a_nullable_enum,
    CoreTestsGolubTestAnotherEnum* another_nullable_enum,
    const gchar* a_nullable_string, FlValue* a_nullable_object, FlValue* list,
    FlValue* string_list, FlValue* int_list, FlValue* double_list,
    FlValue* bool_list, FlValue* enum_list, FlValue* object_list,
    FlValue* list_list, FlValue* map_list, FlValue* map, FlValue* string_map,
    FlValue* int_map, FlValue* enum_map, FlValue* object_map, FlValue* list_map,
    FlValue* map_map) {
  CoreTestsGolubTestAllNullableTypesWithoutRecursion* self =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(g_object_new(
          core_tests_golub_test_all_nullable_types_without_recursion_get_type(),
          nullptr));
  if (a_nullable_bool != nullptr) {
    self->a_nullable_bool = static_cast<gboolean*>(malloc(sizeof(gboolean)));
    *self->a_nullable_bool = *a_nullable_bool;
  } else {
    self->a_nullable_bool = nullptr;
  }
  if (a_nullable_int != nullptr) {
    self->a_nullable_int = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int = *a_nullable_int;
  } else {
    self->a_nullable_int = nullptr;
  }
  if (a_nullable_int64 != nullptr) {
    self->a_nullable_int64 = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int64 = *a_nullable_int64;
  } else {
    self->a_nullable_int64 = nullptr;
  }
  if (a_nullable_double != nullptr) {
    self->a_nullable_double = static_cast<double*>(malloc(sizeof(double)));
    *self->a_nullable_double = *a_nullable_double;
  } else {
    self->a_nullable_double = nullptr;
  }
  if (a_nullable_byte_array != nullptr) {
    self->a_nullable_byte_array = static_cast<uint8_t*>(
        memcpy(malloc(a_nullable_byte_array_length), a_nullable_byte_array,
               a_nullable_byte_array_length));
    self->a_nullable_byte_array_length = a_nullable_byte_array_length;
  } else {
    self->a_nullable_byte_array = nullptr;
    self->a_nullable_byte_array_length = 0;
  }
  if (a_nullable4_byte_array != nullptr) {
    self->a_nullable4_byte_array = static_cast<int32_t*>(
        memcpy(malloc(sizeof(int32_t) * a_nullable4_byte_array_length),
               a_nullable4_byte_array,
               sizeof(int32_t) * a_nullable4_byte_array_length));
    self->a_nullable4_byte_array_length = a_nullable4_byte_array_length;
  } else {
    self->a_nullable4_byte_array = nullptr;
    self->a_nullable4_byte_array_length = 0;
  }
  if (a_nullable8_byte_array != nullptr) {
    self->a_nullable8_byte_array = static_cast<int64_t*>(
        memcpy(malloc(sizeof(int64_t) * a_nullable8_byte_array_length),
               a_nullable8_byte_array,
               sizeof(int64_t) * a_nullable8_byte_array_length));
    self->a_nullable8_byte_array_length = a_nullable8_byte_array_length;
  } else {
    self->a_nullable8_byte_array = nullptr;
    self->a_nullable8_byte_array_length = 0;
  }
  if (a_nullable_float_array != nullptr) {
    self->a_nullable_float_array = static_cast<double*>(
        memcpy(malloc(sizeof(double) * a_nullable_float_array_length),
               a_nullable_float_array,
               sizeof(double) * a_nullable_float_array_length));
    self->a_nullable_float_array_length = a_nullable_float_array_length;
  } else {
    self->a_nullable_float_array = nullptr;
    self->a_nullable_float_array_length = 0;
  }
  if (a_nullable_enum != nullptr) {
    self->a_nullable_enum = static_cast<CoreTestsGolubTestAnEnum*>(
        malloc(sizeof(CoreTestsGolubTestAnEnum)));
    *self->a_nullable_enum = *a_nullable_enum;
  } else {
    self->a_nullable_enum = nullptr;
  }
  if (another_nullable_enum != nullptr) {
    self->another_nullable_enum = static_cast<CoreTestsGolubTestAnotherEnum*>(
        malloc(sizeof(CoreTestsGolubTestAnotherEnum)));
    *self->another_nullable_enum = *another_nullable_enum;
  } else {
    self->another_nullable_enum = nullptr;
  }
  if (a_nullable_string != nullptr) {
    self->a_nullable_string = g_strdup(a_nullable_string);
  } else {
    self->a_nullable_string = nullptr;
  }
  if (a_nullable_object != nullptr) {
    self->a_nullable_object = fl_value_ref(a_nullable_object);
  } else {
    self->a_nullable_object = nullptr;
  }
  if (list != nullptr) {
    self->list = fl_value_ref(list);
  } else {
    self->list = nullptr;
  }
  if (string_list != nullptr) {
    self->string_list = fl_value_ref(string_list);
  } else {
    self->string_list = nullptr;
  }
  if (int_list != nullptr) {
    self->int_list = fl_value_ref(int_list);
  } else {
    self->int_list = nullptr;
  }
  if (double_list != nullptr) {
    self->double_list = fl_value_ref(double_list);
  } else {
    self->double_list = nullptr;
  }
  if (bool_list != nullptr) {
    self->bool_list = fl_value_ref(bool_list);
  } else {
    self->bool_list = nullptr;
  }
  if (enum_list != nullptr) {
    self->enum_list = fl_value_ref(enum_list);
  } else {
    self->enum_list = nullptr;
  }
  if (object_list != nullptr) {
    self->object_list = fl_value_ref(object_list);
  } else {
    self->object_list = nullptr;
  }
  if (list_list != nullptr) {
    self->list_list = fl_value_ref(list_list);
  } else {
    self->list_list = nullptr;
  }
  if (map_list != nullptr) {
    self->map_list = fl_value_ref(map_list);
  } else {
    self->map_list = nullptr;
  }
  if (map != nullptr) {
    self->map = fl_value_ref(map);
  } else {
    self->map = nullptr;
  }
  if (string_map != nullptr) {
    self->string_map = fl_value_ref(string_map);
  } else {
    self->string_map = nullptr;
  }
  if (int_map != nullptr) {
    self->int_map = fl_value_ref(int_map);
  } else {
    self->int_map = nullptr;
  }
  if (enum_map != nullptr) {
    self->enum_map = fl_value_ref(enum_map);
  } else {
    self->enum_map = nullptr;
  }
  if (object_map != nullptr) {
    self->object_map = fl_value_ref(object_map);
  } else {
    self->object_map = nullptr;
  }
  if (list_map != nullptr) {
    self->list_map = fl_value_ref(list_map);
  } else {
    self->list_map = nullptr;
  }
  if (map_map != nullptr) {
    self->map_map = fl_value_ref(map_map);
  } else {
    self->map_map = nullptr;
  }
  return self;
}

gboolean*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable_bool(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_bool;
}

int64_t*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable_int(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_int;
}

int64_t*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable_int64(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_int64;
}

double*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable_double(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_double;
}

const uint8_t*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable_byte_array(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self, size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable_byte_array_length;
  return self->a_nullable_byte_array;
}

const int32_t*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable4_byte_array(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self, size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable4_byte_array_length;
  return self->a_nullable4_byte_array;
}

const int64_t*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable8_byte_array(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self, size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable8_byte_array_length;
  return self->a_nullable8_byte_array;
}

const double*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable_float_array(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self, size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable_float_array_length;
  return self->a_nullable_float_array;
}

CoreTestsGolubTestAnEnum*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable_enum(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_enum;
}

CoreTestsGolubTestAnotherEnum*
core_tests_golub_test_all_nullable_types_without_recursion_get_another_nullable_enum(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->another_nullable_enum;
}

const gchar*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable_string(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_string;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_a_nullable_object(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_object;
}

FlValue* core_tests_golub_test_all_nullable_types_without_recursion_get_list(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->list;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_string_list(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->string_list;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_int_list(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->int_list;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_double_list(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->double_list;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_bool_list(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->bool_list;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_enum_list(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->enum_list;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_object_list(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->object_list;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_list_list(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->list_list;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_map_list(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->map_list;
}

FlValue* core_tests_golub_test_all_nullable_types_without_recursion_get_map(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->map;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_string_map(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->string_map;
}

FlValue* core_tests_golub_test_all_nullable_types_without_recursion_get_int_map(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->int_map;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_enum_map(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->enum_map;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_object_map(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->object_map;
}

FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_get_list_map(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->list_map;
}

FlValue* core_tests_golub_test_all_nullable_types_without_recursion_get_map_map(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->map_map;
}

static FlValue*
core_tests_golub_test_all_nullable_types_without_recursion_to_list(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->a_nullable_bool != nullptr
                                   ? fl_value_new_bool(*self->a_nullable_bool)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int64 != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int64)
                                   : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_double != nullptr
                           ? fl_value_new_float(*self->a_nullable_double)
                           : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_byte_array != nullptr
                  ? fl_value_new_uint8_list(self->a_nullable_byte_array,
                                            self->a_nullable_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable4_byte_array != nullptr
                  ? fl_value_new_int32_list(self->a_nullable4_byte_array,
                                            self->a_nullable4_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable8_byte_array != nullptr
                  ? fl_value_new_int64_list(self->a_nullable8_byte_array,
                                            self->a_nullable8_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_float_array != nullptr
                  ? fl_value_new_float_list(self->a_nullable_float_array,
                                            self->a_nullable_float_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values,
      self->a_nullable_enum != nullptr
          ? fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                fl_value_new_int(*self->a_nullable_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  fl_value_append_take(
      values,
      self->another_nullable_enum != nullptr
          ? fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                                fl_value_new_int(*self->another_nullable_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_string != nullptr
                           ? fl_value_new_string(self->a_nullable_string)
                           : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_object != nullptr
                                   ? fl_value_ref(self->a_nullable_object)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list != nullptr ? fl_value_ref(self->list)
                                                     : fl_value_new_null());
  fl_value_append_take(values, self->string_list != nullptr
                                   ? fl_value_ref(self->string_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->int_list != nullptr
                                   ? fl_value_ref(self->int_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->double_list != nullptr
                                   ? fl_value_ref(self->double_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->bool_list != nullptr
                                   ? fl_value_ref(self->bool_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->enum_list != nullptr
                                   ? fl_value_ref(self->enum_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->object_list != nullptr
                                   ? fl_value_ref(self->object_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list_list != nullptr
                                   ? fl_value_ref(self->list_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map_list != nullptr
                                   ? fl_value_ref(self->map_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map != nullptr ? fl_value_ref(self->map)
                                                    : fl_value_new_null());
  fl_value_append_take(values, self->string_map != nullptr
                                   ? fl_value_ref(self->string_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->int_map != nullptr
                                   ? fl_value_ref(self->int_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->enum_map != nullptr
                                   ? fl_value_ref(self->enum_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->object_map != nullptr
                                   ? fl_value_ref(self->object_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list_map != nullptr
                                   ? fl_value_ref(self->list_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map_map != nullptr
                                   ? fl_value_ref(self->map_map)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsGolubTestAllNullableTypesWithoutRecursion*
core_tests_golub_test_all_nullable_types_without_recursion_new_from_list(
    FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t* a_nullable_int64 = nullptr;
  int64_t a_nullable_int64_value;
  if (fl_value_get_type(value2) != FL_VALUE_TYPE_NULL) {
    a_nullable_int64_value = fl_value_get_int(value2);
    a_nullable_int64 = &a_nullable_int64_value;
  }
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double* a_nullable_double = nullptr;
  double a_nullable_double_value;
  if (fl_value_get_type(value3) != FL_VALUE_TYPE_NULL) {
    a_nullable_double_value = fl_value_get_float(value3);
    a_nullable_double = &a_nullable_double_value;
  }
  FlValue* value4 = fl_value_get_list_value(values, 4);
  const uint8_t* a_nullable_byte_array = nullptr;
  size_t a_nullable_byte_array_length = 0;
  if (fl_value_get_type(value4) != FL_VALUE_TYPE_NULL) {
    a_nullable_byte_array = fl_value_get_uint8_list(value4);
    a_nullable_byte_array_length = fl_value_get_length(value4);
  }
  FlValue* value5 = fl_value_get_list_value(values, 5);
  const int32_t* a_nullable4_byte_array = nullptr;
  size_t a_nullable4_byte_array_length = 0;
  if (fl_value_get_type(value5) != FL_VALUE_TYPE_NULL) {
    a_nullable4_byte_array = fl_value_get_int32_list(value5);
    a_nullable4_byte_array_length = fl_value_get_length(value5);
  }
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const int64_t* a_nullable8_byte_array = nullptr;
  size_t a_nullable8_byte_array_length = 0;
  if (fl_value_get_type(value6) != FL_VALUE_TYPE_NULL) {
    a_nullable8_byte_array = fl_value_get_int64_list(value6);
    a_nullable8_byte_array_length = fl_value_get_length(value6);
  }
  FlValue* value7 = fl_value_get_list_value(values, 7);
  const double* a_nullable_float_array = nullptr;
  size_t a_nullable_float_array_length = 0;
  if (fl_value_get_type(value7) != FL_VALUE_TYPE_NULL) {
    a_nullable_float_array = fl_value_get_float_list(value7);
    a_nullable_float_array_length = fl_value_get_length(value7);
  }
  FlValue* value8 = fl_value_get_list_value(values, 8);
  CoreTestsGolubTestAnEnum* a_nullable_enum = nullptr;
  CoreTestsGolubTestAnEnum a_nullable_enum_value;
  if (fl_value_get_type(value8) != FL_VALUE_TYPE_NULL) {
    a_nullable_enum_value = static_cast<CoreTestsGolubTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value8)))));
    a_nullable_enum = &a_nullable_enum_value;
  }
  FlValue* value9 = fl_value_get_list_value(values, 9);
  CoreTestsGolubTestAnotherEnum* another_nullable_enum = nullptr;
  CoreTestsGolubTestAnotherEnum another_nullable_enum_value;
  if (fl_value_get_type(value9) != FL_VALUE_TYPE_NULL) {
    another_nullable_enum_value = static_cast<CoreTestsGolubTestAnotherEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value9)))));
    another_nullable_enum = &another_nullable_enum_value;
  }
  FlValue* value10 = fl_value_get_list_value(values, 10);
  const gchar* a_nullable_string = nullptr;
  if (fl_value_get_type(value10) != FL_VALUE_TYPE_NULL) {
    a_nullable_string = fl_value_get_string(value10);
  }
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* a_nullable_object = nullptr;
  if (fl_value_get_type(value11) != FL_VALUE_TYPE_NULL) {
    a_nullable_object = value11;
  }
  FlValue* value12 = fl_value_get_list_value(values, 12);
  FlValue* list = nullptr;
  if (fl_value_get_type(value12) != FL_VALUE_TYPE_NULL) {
    list = value12;
  }
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* string_list = nullptr;
  if (fl_value_get_type(value13) != FL_VALUE_TYPE_NULL) {
    string_list = value13;
  }
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* int_list = nullptr;
  if (fl_value_get_type(value14) != FL_VALUE_TYPE_NULL) {
    int_list = value14;
  }
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* double_list = nullptr;
  if (fl_value_get_type(value15) != FL_VALUE_TYPE_NULL) {
    double_list = value15;
  }
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* bool_list = nullptr;
  if (fl_value_get_type(value16) != FL_VALUE_TYPE_NULL) {
    bool_list = value16;
  }
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* enum_list = nullptr;
  if (fl_value_get_type(value17) != FL_VALUE_TYPE_NULL) {
    enum_list = value17;
  }
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* object_list = nullptr;
  if (fl_value_get_type(value18) != FL_VALUE_TYPE_NULL) {
    object_list = value18;
  }
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* list_list = nullptr;
  if (fl_value_get_type(value19) != FL_VALUE_TYPE_NULL) {
    list_list = value19;
  }
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* map_list = nullptr;
  if (fl_value_get_type(value20) != FL_VALUE_TYPE_NULL) {
    map_list = value20;
  }
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* map = nullptr;
  if (fl_value_get_type(value21) != FL_VALUE_TYPE_NULL) {
    map = value21;
  }
  FlValue* value22 = fl_value_get_list_value(values, 22);
  FlValue* string_map = nullptr;
  if (fl_value_get_type(value22) != FL_VALUE_TYPE_NULL) {
    string_map = value22;
  }
  FlValue* value23 = fl_value_get_list_value(values, 23);
  FlValue* int_map = nullptr;
  if (fl_value_get_type(value23) != FL_VALUE_TYPE_NULL) {
    int_map = value23;
  }
  FlValue* value24 = fl_value_get_list_value(values, 24);
  FlValue* enum_map = nullptr;
  if (fl_value_get_type(value24) != FL_VALUE_TYPE_NULL) {
    enum_map = value24;
  }
  FlValue* value25 = fl_value_get_list_value(values, 25);
  FlValue* object_map = nullptr;
  if (fl_value_get_type(value25) != FL_VALUE_TYPE_NULL) {
    object_map = value25;
  }
  FlValue* value26 = fl_value_get_list_value(values, 26);
  FlValue* list_map = nullptr;
  if (fl_value_get_type(value26) != FL_VALUE_TYPE_NULL) {
    list_map = value26;
  }
  FlValue* value27 = fl_value_get_list_value(values, 27);
  FlValue* map_map = nullptr;
  if (fl_value_get_type(value27) != FL_VALUE_TYPE_NULL) {
    map_map = value27;
  }
  return core_tests_golub_test_all_nullable_types_without_recursion_new(
      a_nullable_bool, a_nullable_int, a_nullable_int64, a_nullable_double,
      a_nullable_byte_array, a_nullable_byte_array_length,
      a_nullable4_byte_array, a_nullable4_byte_array_length,
      a_nullable8_byte_array, a_nullable8_byte_array_length,
      a_nullable_float_array, a_nullable_float_array_length, a_nullable_enum,
      another_nullable_enum, a_nullable_string, a_nullable_object, list,
      string_list, int_list, double_list, bool_list, enum_list, object_list,
      list_list, map_list, map, string_map, int_map, enum_map, object_map,
      list_map, map_map);
}

struct _CoreTestsGolubTestAllClassesWrapper {
  GObject parent_instance;

  CoreTestsGolubTestAllNullableTypes* all_nullable_types;
  CoreTestsGolubTestAllNullableTypesWithoutRecursion*
      all_nullable_types_without_recursion;
  CoreTestsGolubTestAllTypes* all_types;
  FlValue* class_list;
  FlValue* nullable_class_list;
  FlValue* class_map;
  FlValue* nullable_class_map;
};

G_DEFINE_TYPE(CoreTestsGolubTestAllClassesWrapper,
              core_tests_golub_test_all_classes_wrapper, G_TYPE_OBJECT)

static void core_tests_golub_test_all_classes_wrapper_dispose(GObject* object) {
  CoreTestsGolubTestAllClassesWrapper* self =
      CORE_TESTS_GOLUB_TEST_ALL_CLASSES_WRAPPER(object);
  g_clear_object(&self->all_nullable_types);
  g_clear_object(&self->all_nullable_types_without_recursion);
  g_clear_object(&self->all_types);
  g_clear_pointer(&self->class_list, fl_value_unref);
  g_clear_pointer(&self->nullable_class_list, fl_value_unref);
  g_clear_pointer(&self->class_map, fl_value_unref);
  g_clear_pointer(&self->nullable_class_map, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golub_test_all_classes_wrapper_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_all_classes_wrapper_init(
    CoreTestsGolubTestAllClassesWrapper* self) {}

static void core_tests_golub_test_all_classes_wrapper_class_init(
    CoreTestsGolubTestAllClassesWrapperClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_all_classes_wrapper_dispose;
}

CoreTestsGolubTestAllClassesWrapper*
core_tests_golub_test_all_classes_wrapper_new(
    CoreTestsGolubTestAllNullableTypes* all_nullable_types,
    CoreTestsGolubTestAllNullableTypesWithoutRecursion*
        all_nullable_types_without_recursion,
    CoreTestsGolubTestAllTypes* all_types, FlValue* class_list,
    FlValue* nullable_class_list, FlValue* class_map,
    FlValue* nullable_class_map) {
  CoreTestsGolubTestAllClassesWrapper* self =
      CORE_TESTS_GOLUB_TEST_ALL_CLASSES_WRAPPER(g_object_new(
          core_tests_golub_test_all_classes_wrapper_get_type(), nullptr));
  self->all_nullable_types = CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
      g_object_ref(all_nullable_types));
  if (all_nullable_types_without_recursion != nullptr) {
    self->all_nullable_types_without_recursion =
        CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
            g_object_ref(all_nullable_types_without_recursion));
  } else {
    self->all_nullable_types_without_recursion = nullptr;
  }
  if (all_types != nullptr) {
    self->all_types = CORE_TESTS_GOLUB_TEST_ALL_TYPES(g_object_ref(all_types));
  } else {
    self->all_types = nullptr;
  }
  self->class_list = fl_value_ref(class_list);
  if (nullable_class_list != nullptr) {
    self->nullable_class_list = fl_value_ref(nullable_class_list);
  } else {
    self->nullable_class_list = nullptr;
  }
  self->class_map = fl_value_ref(class_map);
  if (nullable_class_map != nullptr) {
    self->nullable_class_map = fl_value_ref(nullable_class_map);
  } else {
    self->nullable_class_map = nullptr;
  }
  return self;
}

CoreTestsGolubTestAllNullableTypes*
core_tests_golub_test_all_classes_wrapper_get_all_nullable_types(
    CoreTestsGolubTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->all_nullable_types;
}

CoreTestsGolubTestAllNullableTypesWithoutRecursion*
core_tests_golub_test_all_classes_wrapper_get_all_nullable_types_without_recursion(
    CoreTestsGolubTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->all_nullable_types_without_recursion;
}

CoreTestsGolubTestAllTypes*
core_tests_golub_test_all_classes_wrapper_get_all_types(
    CoreTestsGolubTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->all_types;
}

FlValue* core_tests_golub_test_all_classes_wrapper_get_class_list(
    CoreTestsGolubTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->class_list;
}

FlValue* core_tests_golub_test_all_classes_wrapper_get_nullable_class_list(
    CoreTestsGolubTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->nullable_class_list;
}

FlValue* core_tests_golub_test_all_classes_wrapper_get_class_map(
    CoreTestsGolubTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->class_map;
}

FlValue* core_tests_golub_test_all_classes_wrapper_get_nullable_class_map(
    CoreTestsGolubTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->nullable_class_map;
}

static FlValue* core_tests_golub_test_all_classes_wrapper_to_list(
    CoreTestsGolubTestAllClassesWrapper* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values,
                       fl_value_new_custom_object(
                           core_tests_golub_test_all_nullable_types_type_id,
                           G_OBJECT(self->all_nullable_types)));
  fl_value_append_take(
      values,
      self->all_nullable_types_without_recursion != nullptr
          ? fl_value_new_custom_object(
                core_tests_golub_test_all_nullable_types_without_recursion_type_id,
                G_OBJECT(self->all_nullable_types_without_recursion))
          : fl_value_new_null());
  fl_value_append_take(
      values,
      self->all_types != nullptr
          ? fl_value_new_custom_object(core_tests_golub_test_all_types_type_id,
                                       G_OBJECT(self->all_types))
          : fl_value_new_null());
  fl_value_append_take(values, fl_value_ref(self->class_list));
  fl_value_append_take(values, self->nullable_class_list != nullptr
                                   ? fl_value_ref(self->nullable_class_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, fl_value_ref(self->class_map));
  fl_value_append_take(values, self->nullable_class_map != nullptr
                                   ? fl_value_ref(self->nullable_class_map)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsGolubTestAllClassesWrapper*
core_tests_golub_test_all_classes_wrapper_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  CoreTestsGolubTestAllNullableTypes* all_nullable_types =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  FlValue* value1 = fl_value_get_list_value(values, 1);
  CoreTestsGolubTestAllNullableTypesWithoutRecursion*
      all_nullable_types_without_recursion = nullptr;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    all_nullable_types_without_recursion =
        CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
            fl_value_get_custom_value_object(value1));
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  CoreTestsGolubTestAllTypes* all_types = nullptr;
  if (fl_value_get_type(value2) != FL_VALUE_TYPE_NULL) {
    all_types = CORE_TESTS_GOLUB_TEST_ALL_TYPES(
        fl_value_get_custom_value_object(value2));
  }
  FlValue* value3 = fl_value_get_list_value(values, 3);
  FlValue* class_list = value3;
  FlValue* value4 = fl_value_get_list_value(values, 4);
  FlValue* nullable_class_list = nullptr;
  if (fl_value_get_type(value4) != FL_VALUE_TYPE_NULL) {
    nullable_class_list = value4;
  }
  FlValue* value5 = fl_value_get_list_value(values, 5);
  FlValue* class_map = value5;
  FlValue* value6 = fl_value_get_list_value(values, 6);
  FlValue* nullable_class_map = nullptr;
  if (fl_value_get_type(value6) != FL_VALUE_TYPE_NULL) {
    nullable_class_map = value6;
  }
  return core_tests_golub_test_all_classes_wrapper_new(
      all_nullable_types, all_nullable_types_without_recursion, all_types,
      class_list, nullable_class_list, class_map, nullable_class_map);
}

struct _CoreTestsGolubTestImmutableAllTypes {
  GObject parent_instance;

  gboolean a_bool;
  int64_t an_int;
  int64_t an_int64;
  double a_double;
  CoreTestsGolubTestAnEnum an_enum;
  CoreTestsGolubTestAnotherEnum another_enum;
  gchar* a_string;
  FlValue* an_object;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* enum_list;
  FlValue* object_list;
  FlValue* list_list;
  FlValue* map_list;
  FlValue* map;
  FlValue* string_map;
  FlValue* int_map;
  FlValue* enum_map;
  FlValue* object_map;
  FlValue* list_map;
  FlValue* map_map;
};

G_DEFINE_TYPE(CoreTestsGolubTestImmutableAllTypes,
              core_tests_golub_test_immutable_all_types, G_TYPE_OBJECT)

static void core_tests_golub_test_immutable_all_types_dispose(GObject* object) {
  CoreTestsGolubTestImmutableAllTypes* self =
      CORE_TESTS_GOLUB_TEST_IMMUTABLE_ALL_TYPES(object);
  g_clear_pointer(&self->a_string, g_free);
  g_clear_pointer(&self->an_object, fl_value_unref);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->enum_list, fl_value_unref);
  g_clear_pointer(&self->object_list, fl_value_unref);
  g_clear_pointer(&self->list_list, fl_value_unref);
  g_clear_pointer(&self->map_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  g_clear_pointer(&self->string_map, fl_value_unref);
  g_clear_pointer(&self->int_map, fl_value_unref);
  g_clear_pointer(&self->enum_map, fl_value_unref);
  g_clear_pointer(&self->object_map, fl_value_unref);
  g_clear_pointer(&self->list_map, fl_value_unref);
  g_clear_pointer(&self->map_map, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golub_test_immutable_all_types_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_immutable_all_types_init(
    CoreTestsGolubTestImmutableAllTypes* self) {}

static void core_tests_golub_test_immutable_all_types_class_init(
    CoreTestsGolubTestImmutableAllTypesClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_immutable_all_types_dispose;
}

CoreTestsGolubTestImmutableAllTypes*
core_tests_golub_test_immutable_all_types_new(
    gboolean a_bool, int64_t an_int, int64_t an_int64, double a_double,
    CoreTestsGolubTestAnEnum an_enum,
    CoreTestsGolubTestAnotherEnum another_enum, const gchar* a_string,
    FlValue* an_object, FlValue* list, FlValue* string_list, FlValue* int_list,
    FlValue* double_list, FlValue* bool_list, FlValue* enum_list,
    FlValue* object_list, FlValue* list_list, FlValue* map_list, FlValue* map,
    FlValue* string_map, FlValue* int_map, FlValue* enum_map,
    FlValue* object_map, FlValue* list_map, FlValue* map_map) {
  CoreTestsGolubTestImmutableAllTypes* self =
      CORE_TESTS_GOLUB_TEST_IMMUTABLE_ALL_TYPES(g_object_new(
          core_tests_golub_test_immutable_all_types_get_type(), nullptr));
  self->a_bool = a_bool;
  self->an_int = an_int;
  self->an_int64 = an_int64;
  self->a_double = a_double;
  self->an_enum = an_enum;
  self->another_enum = another_enum;
  self->a_string = g_strdup(a_string);
  self->an_object = fl_value_ref(an_object);
  self->list = fl_value_ref(list);
  self->string_list = fl_value_ref(string_list);
  self->int_list = fl_value_ref(int_list);
  self->double_list = fl_value_ref(double_list);
  self->bool_list = fl_value_ref(bool_list);
  self->enum_list = fl_value_ref(enum_list);
  self->object_list = fl_value_ref(object_list);
  self->list_list = fl_value_ref(list_list);
  self->map_list = fl_value_ref(map_list);
  self->map = fl_value_ref(map);
  self->string_map = fl_value_ref(string_map);
  self->int_map = fl_value_ref(int_map);
  self->enum_map = fl_value_ref(enum_map);
  self->object_map = fl_value_ref(object_map);
  self->list_map = fl_value_ref(list_map);
  self->map_map = fl_value_ref(map_map);
  return self;
}

gboolean core_tests_golub_test_immutable_all_types_get_a_bool(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       FALSE);
  return self->a_bool;
}

int64_t core_tests_golub_test_immutable_all_types_get_an_int(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self), 0);
  return self->an_int;
}

int64_t core_tests_golub_test_immutable_all_types_get_an_int64(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self), 0);
  return self->an_int64;
}

double core_tests_golub_test_immutable_all_types_get_a_double(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self), 0.0);
  return self->a_double;
}

CoreTestsGolubTestAnEnum core_tests_golub_test_immutable_all_types_get_an_enum(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       static_cast<CoreTestsGolubTestAnEnum>(0));
  return self->an_enum;
}

CoreTestsGolubTestAnotherEnum
core_tests_golub_test_immutable_all_types_get_another_enum(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       static_cast<CoreTestsGolubTestAnotherEnum>(0));
  return self->another_enum;
}

const gchar* core_tests_golub_test_immutable_all_types_get_a_string(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->a_string;
}

FlValue* core_tests_golub_test_immutable_all_types_get_an_object(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->an_object;
}

FlValue* core_tests_golub_test_immutable_all_types_get_list(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->list;
}

FlValue* core_tests_golub_test_immutable_all_types_get_string_list(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->string_list;
}

FlValue* core_tests_golub_test_immutable_all_types_get_int_list(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->int_list;
}

FlValue* core_tests_golub_test_immutable_all_types_get_double_list(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->double_list;
}

FlValue* core_tests_golub_test_immutable_all_types_get_bool_list(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->bool_list;
}

FlValue* core_tests_golub_test_immutable_all_types_get_enum_list(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->enum_list;
}

FlValue* core_tests_golub_test_immutable_all_types_get_object_list(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->object_list;
}

FlValue* core_tests_golub_test_immutable_all_types_get_list_list(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->list_list;
}

FlValue* core_tests_golub_test_immutable_all_types_get_map_list(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->map_list;
}

FlValue* core_tests_golub_test_immutable_all_types_get_map(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->map;
}

FlValue* core_tests_golub_test_immutable_all_types_get_string_map(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->string_map;
}

FlValue* core_tests_golub_test_immutable_all_types_get_int_map(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->int_map;
}

FlValue* core_tests_golub_test_immutable_all_types_get_enum_map(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->enum_map;
}

FlValue* core_tests_golub_test_immutable_all_types_get_object_map(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->object_map;
}

FlValue* core_tests_golub_test_immutable_all_types_get_list_map(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->list_map;
}

FlValue* core_tests_golub_test_immutable_all_types_get_map_map(
    CoreTestsGolubTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->map_map;
}

static FlValue* core_tests_golub_test_immutable_all_types_to_list(
    CoreTestsGolubTestImmutableAllTypes* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->a_bool));
  fl_value_append_take(values, fl_value_new_int(self->an_int));
  fl_value_append_take(values, fl_value_new_int(self->an_int64));
  fl_value_append_take(values, fl_value_new_float(self->a_double));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                  fl_value_new_int(self->an_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                                  fl_value_new_int(self->another_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(values, fl_value_new_string(self->a_string));
  fl_value_append_take(values, fl_value_ref(self->an_object));
  fl_value_append_take(values, fl_value_ref(self->list));
  fl_value_append_take(values, fl_value_ref(self->string_list));
  fl_value_append_take(values, fl_value_ref(self->int_list));
  fl_value_append_take(values, fl_value_ref(self->double_list));
  fl_value_append_take(values, fl_value_ref(self->bool_list));
  fl_value_append_take(values, fl_value_ref(self->enum_list));
  fl_value_append_take(values, fl_value_ref(self->object_list));
  fl_value_append_take(values, fl_value_ref(self->list_list));
  fl_value_append_take(values, fl_value_ref(self->map_list));
  fl_value_append_take(values, fl_value_ref(self->map));
  fl_value_append_take(values, fl_value_ref(self->string_map));
  fl_value_append_take(values, fl_value_ref(self->int_map));
  fl_value_append_take(values, fl_value_ref(self->enum_map));
  fl_value_append_take(values, fl_value_ref(self->object_map));
  fl_value_append_take(values, fl_value_ref(self->list_map));
  fl_value_append_take(values, fl_value_ref(self->map_map));
  return values;
}

static CoreTestsGolubTestImmutableAllTypes*
core_tests_golub_test_immutable_all_types_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t an_int = fl_value_get_int(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t an_int64 = fl_value_get_int(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double a_double = fl_value_get_float(value3);
  FlValue* value4 = fl_value_get_list_value(values, 4);
  CoreTestsGolubTestAnEnum an_enum = static_cast<CoreTestsGolubTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(value4)))));
  FlValue* value5 = fl_value_get_list_value(values, 5);
  CoreTestsGolubTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value5)))));
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const gchar* a_string = fl_value_get_string(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  FlValue* an_object = value7;
  FlValue* value8 = fl_value_get_list_value(values, 8);
  FlValue* list = value8;
  FlValue* value9 = fl_value_get_list_value(values, 9);
  FlValue* string_list = value9;
  FlValue* value10 = fl_value_get_list_value(values, 10);
  FlValue* int_list = value10;
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* double_list = value11;
  FlValue* value12 = fl_value_get_list_value(values, 12);
  FlValue* bool_list = value12;
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* enum_list = value13;
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* object_list = value14;
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* list_list = value15;
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* map_list = value16;
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* map = value17;
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* string_map = value18;
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* int_map = value19;
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* enum_map = value20;
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* object_map = value21;
  FlValue* value22 = fl_value_get_list_value(values, 22);
  FlValue* list_map = value22;
  FlValue* value23 = fl_value_get_list_value(values, 23);
  FlValue* map_map = value23;
  return core_tests_golub_test_immutable_all_types_new(
      a_bool, an_int, an_int64, a_double, an_enum, another_enum, a_string,
      an_object, list, string_list, int_list, double_list, bool_list, enum_list,
      object_list, list_list, map_list, map, string_map, int_map, enum_map,
      object_map, list_map, map_map);
}

struct _CoreTestsGolubTestAllTypesWithDefaults {
  GObject parent_instance;

  gboolean a_bool;
  int64_t an_int;
  int64_t an_int64;
  double a_double;
  CoreTestsGolubTestAnEnum an_enum;
  CoreTestsGolubTestAnotherEnum another_enum;
  gchar* a_string;
  FlValue* an_object;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* enum_list;
  FlValue* object_list;
  FlValue* list_list;
  FlValue* map_list;
  FlValue* map;
  FlValue* string_map;
  FlValue* int_map;
  FlValue* enum_map;
  FlValue* object_map;
  FlValue* list_map;
  FlValue* map_map;
  CoreTestsGolubTestImmutableAllTypes* all_types;
};

G_DEFINE_TYPE(CoreTestsGolubTestAllTypesWithDefaults,
              core_tests_golub_test_all_types_with_defaults, G_TYPE_OBJECT)

static void core_tests_golub_test_all_types_with_defaults_dispose(
    GObject* object) {
  CoreTestsGolubTestAllTypesWithDefaults* self =
      CORE_TESTS_GOLUB_TEST_ALL_TYPES_WITH_DEFAULTS(object);
  g_clear_pointer(&self->a_string, g_free);
  g_clear_pointer(&self->an_object, fl_value_unref);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->enum_list, fl_value_unref);
  g_clear_pointer(&self->object_list, fl_value_unref);
  g_clear_pointer(&self->list_list, fl_value_unref);
  g_clear_pointer(&self->map_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  g_clear_pointer(&self->string_map, fl_value_unref);
  g_clear_pointer(&self->int_map, fl_value_unref);
  g_clear_pointer(&self->enum_map, fl_value_unref);
  g_clear_pointer(&self->object_map, fl_value_unref);
  g_clear_pointer(&self->list_map, fl_value_unref);
  g_clear_pointer(&self->map_map, fl_value_unref);
  g_clear_object(&self->all_types);
  G_OBJECT_CLASS(core_tests_golub_test_all_types_with_defaults_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_all_types_with_defaults_init(
    CoreTestsGolubTestAllTypesWithDefaults* self) {}

static void core_tests_golub_test_all_types_with_defaults_class_init(
    CoreTestsGolubTestAllTypesWithDefaultsClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_all_types_with_defaults_dispose;
}

CoreTestsGolubTestAllTypesWithDefaults*
core_tests_golub_test_all_types_with_defaults_new(
    gboolean a_bool, int64_t an_int, int64_t an_int64, double a_double,
    CoreTestsGolubTestAnEnum an_enum,
    CoreTestsGolubTestAnotherEnum another_enum, const gchar* a_string,
    FlValue* an_object, FlValue* list, FlValue* string_list, FlValue* int_list,
    FlValue* double_list, FlValue* bool_list, FlValue* enum_list,
    FlValue* object_list, FlValue* list_list, FlValue* map_list, FlValue* map,
    FlValue* string_map, FlValue* int_map, FlValue* enum_map,
    FlValue* object_map, FlValue* list_map, FlValue* map_map,
    CoreTestsGolubTestImmutableAllTypes* all_types) {
  CoreTestsGolubTestAllTypesWithDefaults* self =
      CORE_TESTS_GOLUB_TEST_ALL_TYPES_WITH_DEFAULTS(g_object_new(
          core_tests_golub_test_all_types_with_defaults_get_type(), nullptr));
  self->a_bool = a_bool;
  self->an_int = an_int;
  self->an_int64 = an_int64;
  self->a_double = a_double;
  self->an_enum = an_enum;
  self->another_enum = another_enum;
  self->a_string = g_strdup(a_string);
  self->an_object = fl_value_ref(an_object);
  self->list = fl_value_ref(list);
  self->string_list = fl_value_ref(string_list);
  self->int_list = fl_value_ref(int_list);
  self->double_list = fl_value_ref(double_list);
  self->bool_list = fl_value_ref(bool_list);
  self->enum_list = fl_value_ref(enum_list);
  self->object_list = fl_value_ref(object_list);
  self->list_list = fl_value_ref(list_list);
  self->map_list = fl_value_ref(map_list);
  self->map = fl_value_ref(map);
  self->string_map = fl_value_ref(string_map);
  self->int_map = fl_value_ref(int_map);
  self->enum_map = fl_value_ref(enum_map);
  self->object_map = fl_value_ref(object_map);
  self->list_map = fl_value_ref(list_map);
  self->map_map = fl_value_ref(map_map);
  self->all_types =
      CORE_TESTS_GOLUB_TEST_IMMUTABLE_ALL_TYPES(g_object_ref(all_types));
  return self;
}

gboolean core_tests_golub_test_all_types_with_defaults_get_a_bool(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       FALSE);
  return self->a_bool;
}

int64_t core_tests_golub_test_all_types_with_defaults_get_an_int(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       0);
  return self->an_int;
}

int64_t core_tests_golub_test_all_types_with_defaults_get_an_int64(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       0);
  return self->an_int64;
}

double core_tests_golub_test_all_types_with_defaults_get_a_double(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       0.0);
  return self->a_double;
}

CoreTestsGolubTestAnEnum
core_tests_golub_test_all_types_with_defaults_get_an_enum(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       static_cast<CoreTestsGolubTestAnEnum>(0));
  return self->an_enum;
}

CoreTestsGolubTestAnotherEnum
core_tests_golub_test_all_types_with_defaults_get_another_enum(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       static_cast<CoreTestsGolubTestAnotherEnum>(0));
  return self->another_enum;
}

const gchar* core_tests_golub_test_all_types_with_defaults_get_a_string(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->a_string;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_an_object(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->an_object;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_list(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->list;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_string_list(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->string_list;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_int_list(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->int_list;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_double_list(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->double_list;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_bool_list(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->bool_list;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_enum_list(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->enum_list;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_object_list(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->object_list;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_list_list(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->list_list;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_map_list(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->map_list;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_map(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->map;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_string_map(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->string_map;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_int_map(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->int_map;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_enum_map(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->enum_map;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_object_map(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->object_map;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_list_map(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->list_map;
}

FlValue* core_tests_golub_test_all_types_with_defaults_get_map_map(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->map_map;
}

CoreTestsGolubTestImmutableAllTypes*
core_tests_golub_test_all_types_with_defaults_get_all_types(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
                       nullptr);
  return self->all_types;
}

static FlValue* core_tests_golub_test_all_types_with_defaults_to_list(
    CoreTestsGolubTestAllTypesWithDefaults* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->a_bool));
  fl_value_append_take(values, fl_value_new_int(self->an_int));
  fl_value_append_take(values, fl_value_new_int(self->an_int64));
  fl_value_append_take(values, fl_value_new_float(self->a_double));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                  fl_value_new_int(self->an_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                                  fl_value_new_int(self->another_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(values, fl_value_new_string(self->a_string));
  fl_value_append_take(values, fl_value_ref(self->an_object));
  fl_value_append_take(values, fl_value_ref(self->list));
  fl_value_append_take(values, fl_value_ref(self->string_list));
  fl_value_append_take(values, fl_value_ref(self->int_list));
  fl_value_append_take(values, fl_value_ref(self->double_list));
  fl_value_append_take(values, fl_value_ref(self->bool_list));
  fl_value_append_take(values, fl_value_ref(self->enum_list));
  fl_value_append_take(values, fl_value_ref(self->object_list));
  fl_value_append_take(values, fl_value_ref(self->list_list));
  fl_value_append_take(values, fl_value_ref(self->map_list));
  fl_value_append_take(values, fl_value_ref(self->map));
  fl_value_append_take(values, fl_value_ref(self->string_map));
  fl_value_append_take(values, fl_value_ref(self->int_map));
  fl_value_append_take(values, fl_value_ref(self->enum_map));
  fl_value_append_take(values, fl_value_ref(self->object_map));
  fl_value_append_take(values, fl_value_ref(self->list_map));
  fl_value_append_take(values, fl_value_ref(self->map_map));
  fl_value_append_take(values,
                       fl_value_new_custom_object(
                           core_tests_golub_test_immutable_all_types_type_id,
                           G_OBJECT(self->all_types)));
  return values;
}

static CoreTestsGolubTestAllTypesWithDefaults*
core_tests_golub_test_all_types_with_defaults_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t an_int = fl_value_get_int(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t an_int64 = fl_value_get_int(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double a_double = fl_value_get_float(value3);
  FlValue* value4 = fl_value_get_list_value(values, 4);
  CoreTestsGolubTestAnEnum an_enum = static_cast<CoreTestsGolubTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(value4)))));
  FlValue* value5 = fl_value_get_list_value(values, 5);
  CoreTestsGolubTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value5)))));
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const gchar* a_string = fl_value_get_string(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  FlValue* an_object = value7;
  FlValue* value8 = fl_value_get_list_value(values, 8);
  FlValue* list = value8;
  FlValue* value9 = fl_value_get_list_value(values, 9);
  FlValue* string_list = value9;
  FlValue* value10 = fl_value_get_list_value(values, 10);
  FlValue* int_list = value10;
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* double_list = value11;
  FlValue* value12 = fl_value_get_list_value(values, 12);
  FlValue* bool_list = value12;
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* enum_list = value13;
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* object_list = value14;
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* list_list = value15;
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* map_list = value16;
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* map = value17;
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* string_map = value18;
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* int_map = value19;
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* enum_map = value20;
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* object_map = value21;
  FlValue* value22 = fl_value_get_list_value(values, 22);
  FlValue* list_map = value22;
  FlValue* value23 = fl_value_get_list_value(values, 23);
  FlValue* map_map = value23;
  FlValue* value24 = fl_value_get_list_value(values, 24);
  CoreTestsGolubTestImmutableAllTypes* all_types =
      CORE_TESTS_GOLUB_TEST_IMMUTABLE_ALL_TYPES(
          fl_value_get_custom_value_object(value24));
  return core_tests_golub_test_all_types_with_defaults_new(
      a_bool, an_int, an_int64, a_double, an_enum, another_enum, a_string,
      an_object, list, string_list, int_list, double_list, bool_list, enum_list,
      object_list, list_list, map_list, map, string_map, int_map, enum_map,
      object_map, list_map, map_map, all_types);
}

struct _CoreTestsGolubTestTestMessage {
  GObject parent_instance;

  FlValue* test_list;
};

G_DEFINE_TYPE(CoreTestsGolubTestTestMessage, core_tests_golub_test_test_message,
              G_TYPE_OBJECT)

static void core_tests_golub_test_test_message_dispose(GObject* object) {
  CoreTestsGolubTestTestMessage* self =
      CORE_TESTS_GOLUB_TEST_TEST_MESSAGE(object);
  g_clear_pointer(&self->test_list, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golub_test_test_message_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_test_message_init(
    CoreTestsGolubTestTestMessage* self) {}

static void core_tests_golub_test_test_message_class_init(
    CoreTestsGolubTestTestMessageClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = core_tests_golub_test_test_message_dispose;
}

CoreTestsGolubTestTestMessage* core_tests_golub_test_test_message_new(
    FlValue* test_list) {
  CoreTestsGolubTestTestMessage* self = CORE_TESTS_GOLUB_TEST_TEST_MESSAGE(
      g_object_new(core_tests_golub_test_test_message_get_type(), nullptr));
  if (test_list != nullptr) {
    self->test_list = fl_value_ref(test_list);
  } else {
    self->test_list = nullptr;
  }
  return self;
}

FlValue* core_tests_golub_test_test_message_get_test_list(
    CoreTestsGolubTestTestMessage* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUB_TEST_IS_TEST_MESSAGE(self), nullptr);
  return self->test_list;
}

static FlValue* core_tests_golub_test_test_message_to_list(
    CoreTestsGolubTestTestMessage* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->test_list != nullptr
                                   ? fl_value_ref(self->test_list)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsGolubTestTestMessage*
core_tests_golub_test_test_message_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  FlValue* test_list = nullptr;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    test_list = value0;
  }
  return core_tests_golub_test_test_message_new(test_list);
}

struct _CoreTestsGolubTestGolubMessageCodec {
  FlStandardMessageCodec parent_instance;
};

G_DEFINE_TYPE(CoreTestsGolubTestGolubMessageCodec,
              core_tests_golub_test_golub_message_codec,
              fl_standard_message_codec_get_type())

const int core_tests_golub_test_an_enum_type_id = 129;
const int core_tests_golub_test_another_enum_type_id = 130;
const int core_tests_golub_test_unused_class_type_id = 131;
const int core_tests_golub_test_all_types_type_id = 132;
const int core_tests_golub_test_all_nullable_types_type_id = 133;
const int core_tests_golub_test_all_nullable_types_without_recursion_type_id =
    134;
const int core_tests_golub_test_all_classes_wrapper_type_id = 135;
const int core_tests_golub_test_immutable_all_types_type_id = 136;
const int core_tests_golub_test_all_types_with_defaults_type_id = 137;
const int core_tests_golub_test_test_message_type_id = 138;

static gboolean
core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_an_enum(
    FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value,
    GError** error) {
  uint8_t type = core_tests_golub_test_an_enum_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  return fl_standard_message_codec_write_value(codec, buffer, value, error);
}

static gboolean
core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_another_enum(
    FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value,
    GError** error) {
  uint8_t type = core_tests_golub_test_another_enum_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  return fl_standard_message_codec_write_value(codec, buffer, value, error);
}

static gboolean
core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_unused_class(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubTestUnusedClass* value, GError** error) {
  uint8_t type = core_tests_golub_test_unused_class_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = core_tests_golub_test_unused_class_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_all_types(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubTestAllTypes* value, GError** error) {
  uint8_t type = core_tests_golub_test_all_types_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = core_tests_golub_test_all_types_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_all_nullable_types(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubTestAllNullableTypes* value, GError** error) {
  uint8_t type = core_tests_golub_test_all_nullable_types_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golub_test_all_nullable_types_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_all_nullable_types_without_recursion(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* value, GError** error) {
  uint8_t type =
      core_tests_golub_test_all_nullable_types_without_recursion_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golub_test_all_nullable_types_without_recursion_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_all_classes_wrapper(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubTestAllClassesWrapper* value, GError** error) {
  uint8_t type = core_tests_golub_test_all_classes_wrapper_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golub_test_all_classes_wrapper_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_immutable_all_types(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubTestImmutableAllTypes* value, GError** error) {
  uint8_t type = core_tests_golub_test_immutable_all_types_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golub_test_immutable_all_types_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_all_types_with_defaults(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubTestAllTypesWithDefaults* value, GError** error) {
  uint8_t type = core_tests_golub_test_all_types_with_defaults_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golub_test_all_types_with_defaults_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_test_message(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubTestTestMessage* value, GError** error) {
  uint8_t type = core_tests_golub_test_test_message_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = core_tests_golub_test_test_message_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean core_tests_golub_test_golub_message_codec_write_value(
    FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value,
    GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
      case core_tests_golub_test_an_enum_type_id:
        return core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_an_enum(
            codec, buffer,
            reinterpret_cast<FlValue*>(
                const_cast<gpointer>(fl_value_get_custom_value(value))),
            error);
      case core_tests_golub_test_another_enum_type_id:
        return core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_another_enum(
            codec, buffer,
            reinterpret_cast<FlValue*>(
                const_cast<gpointer>(fl_value_get_custom_value(value))),
            error);
      case core_tests_golub_test_unused_class_type_id:
        return core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_unused_class(
            codec, buffer,
            CORE_TESTS_GOLUB_TEST_UNUSED_CLASS(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golub_test_all_types_type_id:
        return core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_all_types(
            codec, buffer,
            CORE_TESTS_GOLUB_TEST_ALL_TYPES(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golub_test_all_nullable_types_type_id:
        return core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_all_nullable_types(
            codec, buffer,
            CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golub_test_all_nullable_types_without_recursion_type_id:
        return core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_all_nullable_types_without_recursion(
            codec, buffer,
            CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golub_test_all_classes_wrapper_type_id:
        return core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_all_classes_wrapper(
            codec, buffer,
            CORE_TESTS_GOLUB_TEST_ALL_CLASSES_WRAPPER(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golub_test_immutable_all_types_type_id:
        return core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_immutable_all_types(
            codec, buffer,
            CORE_TESTS_GOLUB_TEST_IMMUTABLE_ALL_TYPES(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golub_test_all_types_with_defaults_type_id:
        return core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_all_types_with_defaults(
            codec, buffer,
            CORE_TESTS_GOLUB_TEST_ALL_TYPES_WITH_DEFAULTS(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golub_test_test_message_type_id:
        return core_tests_golub_test_golub_message_codec_write_core_tests_golub_test_test_message(
            codec, buffer,
            CORE_TESTS_GOLUB_TEST_TEST_MESSAGE(
                fl_value_get_custom_value_object(value)),
            error);
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(
             core_tests_golub_test_golub_message_codec_parent_class)
      ->write_value(codec, buffer, value, error);
}

static FlValue*
core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_an_enum(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  return fl_value_new_custom(
      core_tests_golub_test_an_enum_type_id,
      fl_standard_message_codec_read_value(codec, buffer, offset, error),
      (GDestroyNotify)fl_value_unref);
}

static FlValue*
core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_another_enum(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  return fl_value_new_custom(
      core_tests_golub_test_another_enum_type_id,
      fl_standard_message_codec_read_value(codec, buffer, offset, error),
      (GDestroyNotify)fl_value_unref);
}

static FlValue*
core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_unused_class(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubTestUnusedClass) value =
      core_tests_golub_test_unused_class_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(core_tests_golub_test_unused_class_type_id,
                                    G_OBJECT(value));
}

static FlValue*
core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_all_types(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubTestAllTypes) value =
      core_tests_golub_test_all_types_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(core_tests_golub_test_all_types_type_id,
                                    G_OBJECT(value));
}

static FlValue*
core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_all_nullable_types(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubTestAllNullableTypes) value =
      core_tests_golub_test_all_nullable_types_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golub_test_all_nullable_types_type_id, G_OBJECT(value));
}

static FlValue*
core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_all_nullable_types_without_recursion(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubTestAllNullableTypesWithoutRecursion) value =
      core_tests_golub_test_all_nullable_types_without_recursion_new_from_list(
          values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golub_test_all_nullable_types_without_recursion_type_id,
      G_OBJECT(value));
}

static FlValue*
core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_all_classes_wrapper(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubTestAllClassesWrapper) value =
      core_tests_golub_test_all_classes_wrapper_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golub_test_all_classes_wrapper_type_id, G_OBJECT(value));
}

static FlValue*
core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_immutable_all_types(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubTestImmutableAllTypes) value =
      core_tests_golub_test_immutable_all_types_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golub_test_immutable_all_types_type_id, G_OBJECT(value));
}

static FlValue*
core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_all_types_with_defaults(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubTestAllTypesWithDefaults) value =
      core_tests_golub_test_all_types_with_defaults_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golub_test_all_types_with_defaults_type_id, G_OBJECT(value));
}

static FlValue*
core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_test_message(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubTestTestMessage) value =
      core_tests_golub_test_test_message_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(core_tests_golub_test_test_message_type_id,
                                    G_OBJECT(value));
}

static FlValue* core_tests_golub_test_golub_message_codec_read_value_of_type(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type,
    GError** error) {
  switch (type) {
    case core_tests_golub_test_an_enum_type_id:
      return core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_an_enum(
          codec, buffer, offset, error);
    case core_tests_golub_test_another_enum_type_id:
      return core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_another_enum(
          codec, buffer, offset, error);
    case core_tests_golub_test_unused_class_type_id:
      return core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_unused_class(
          codec, buffer, offset, error);
    case core_tests_golub_test_all_types_type_id:
      return core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_all_types(
          codec, buffer, offset, error);
    case core_tests_golub_test_all_nullable_types_type_id:
      return core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_all_nullable_types(
          codec, buffer, offset, error);
    case core_tests_golub_test_all_nullable_types_without_recursion_type_id:
      return core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_all_nullable_types_without_recursion(
          codec, buffer, offset, error);
    case core_tests_golub_test_all_classes_wrapper_type_id:
      return core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_all_classes_wrapper(
          codec, buffer, offset, error);
    case core_tests_golub_test_immutable_all_types_type_id:
      return core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_immutable_all_types(
          codec, buffer, offset, error);
    case core_tests_golub_test_all_types_with_defaults_type_id:
      return core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_all_types_with_defaults(
          codec, buffer, offset, error);
    case core_tests_golub_test_test_message_type_id:
      return core_tests_golub_test_golub_message_codec_read_core_tests_golub_test_test_message(
          codec, buffer, offset, error);
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(
                 core_tests_golub_test_golub_message_codec_parent_class)
          ->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void core_tests_golub_test_golub_message_codec_init(
    CoreTestsGolubTestGolubMessageCodec* self) {}

static void core_tests_golub_test_golub_message_codec_class_init(
    CoreTestsGolubTestGolubMessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value =
      core_tests_golub_test_golub_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type =
      core_tests_golub_test_golub_message_codec_read_value_of_type;
}

static CoreTestsGolubTestGolubMessageCodec*
core_tests_golub_test_golub_message_codec_new() {
  CoreTestsGolubTestGolubMessageCodec* self =
      CORE_TESTS_GOLUB_TEST_GOLUB_MESSAGE_CODEC(g_object_new(
          core_tests_golub_test_golub_message_codec_get_type(), nullptr));
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiResponseHandle {
  GObject parent_instance;

  FlBasicMessageChannel* channel;
  FlBasicMessageChannelResponseHandle* response_handle;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle,
              core_tests_golub_test_host_integration_core_api_response_handle,
              G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_response_handle_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_RESPONSE_HANDLE(object);
  g_clear_object(&self->channel);
  g_clear_object(&self->response_handle);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_response_handle_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_response_handle_init(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* self) {}

static void
core_tests_golub_test_host_integration_core_api_response_handle_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandleClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_response_handle_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiResponseHandle*
core_tests_golub_test_host_integration_core_api_response_handle_new(
    FlBasicMessageChannel* channel,
    FlBasicMessageChannelResponseHandle* response_handle) {
  CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_RESPONSE_HANDLE(g_object_new(
          core_tests_golub_test_host_integration_core_api_response_handle_get_type(),
          nullptr));
  self->channel = FL_BASIC_MESSAGE_CHANNEL(g_object_ref(channel));
  self->response_handle =
      FL_BASIC_MESSAGE_CHANNEL_RESPONSE_HANDLE(g_object_ref(response_handle));
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostIntegrationCoreApiNoopResponse,
              core_tests_golub_test_host_integration_core_api_noop_response,
              G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_noop_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_noop_response_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_host_integration_core_api_noop_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiNoopResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_noop_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_noop_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiNoopResponse*
core_tests_golub_test_host_integration_core_api_noop_response_new() {
  CoreTestsGolubTestHostIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiNoopResponse*
core_tests_golub_test_host_integration_core_api_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesResponse,
    core_tests_golub_test_host_integration_core_api_echo_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_all_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_all_types_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_all_types_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_all_types_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_all_types_response_new(
    CoreTestsGolubTestAllTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(
                                        core_tests_golub_test_all_types_type_id,
                                        G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiThrowErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiThrowErrorResponse,
    core_tests_golub_test_host_integration_core_api_throw_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_throw_error_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_throw_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_throw_error_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowErrorResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_throw_error_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowErrorResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_throw_error_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiThrowErrorResponse*
core_tests_golub_test_host_integration_core_api_throw_error_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_throw_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiThrowErrorResponse*
core_tests_golub_test_host_integration_core_api_throw_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_throw_error_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiThrowErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiThrowErrorFromVoidResponse,
    core_tests_golub_test_host_integration_core_api_throw_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_throw_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_throw_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_throw_error_from_void_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_throw_error_from_void_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_throw_error_from_void_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiThrowErrorFromVoidResponse*
core_tests_golub_test_host_integration_core_api_throw_error_from_void_response_new() {
  CoreTestsGolubTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiThrowErrorFromVoidResponse*
core_tests_golub_test_host_integration_core_api_throw_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiThrowFlutterErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiThrowFlutterErrorResponse,
    core_tests_golub_test_host_integration_core_api_throw_flutter_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_throw_flutter_error_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_throw_flutter_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_throw_flutter_error_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowFlutterErrorResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_throw_flutter_error_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowFlutterErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_throw_flutter_error_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiThrowFlutterErrorResponse*
core_tests_golub_test_host_integration_core_api_throw_flutter_error_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_throw_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiThrowFlutterErrorResponse*
core_tests_golub_test_host_integration_core_api_throw_flutter_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_throw_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostIntegrationCoreApiEchoIntResponse,
              core_tests_golub_test_host_integration_core_api_echo_int_response,
              G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_int_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_int_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoIntResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_int_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_int_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoIntResponse*
core_tests_golub_test_host_integration_core_api_echo_int_response_new(
    int64_t return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoIntResponse*
core_tests_golub_test_host_integration_core_api_echo_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoDoubleResponse,
    core_tests_golub_test_host_integration_core_api_echo_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_double_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_double_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoDoubleResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_double_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_double_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoDoubleResponse*
core_tests_golub_test_host_integration_core_api_echo_double_response_new(
    double return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoDoubleResponse*
core_tests_golub_test_host_integration_core_api_echo_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_double_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoBoolResponse,
    core_tests_golub_test_host_integration_core_api_echo_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_bool_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoBoolResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_bool_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_bool_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoBoolResponse*
core_tests_golub_test_host_integration_core_api_echo_bool_response_new(
    gboolean return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoBoolResponse*
core_tests_golub_test_host_integration_core_api_echo_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_bool_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoStringResponse,
    core_tests_golub_test_host_integration_core_api_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoStringResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_string_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoStringResponse*
core_tests_golub_test_host_integration_core_api_echo_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoStringResponse*
core_tests_golub_test_host_integration_core_api_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_string_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoUint8ListResponse,
    core_tests_golub_test_host_integration_core_api_echo_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_uint8_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoUint8ListResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_uint8_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoUint8ListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_uint8_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoUint8ListResponse*
core_tests_golub_test_host_integration_core_api_echo_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_uint8_list(return_value, return_value_length));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoUint8ListResponse*
core_tests_golub_test_host_integration_core_api_echo_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoObjectResponse,
    core_tests_golub_test_host_integration_core_api_echo_object_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_object_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_object_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoObjectResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_object_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoObjectResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_object_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoObjectResponse*
core_tests_golub_test_host_integration_core_api_echo_object_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_object_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoObjectResponse*
core_tests_golub_test_host_integration_core_api_echo_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_object_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoListResponse,
    core_tests_golub_test_host_integration_core_api_echo_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoListResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoListResponse*
core_tests_golub_test_host_integration_core_api_echo_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoListResponse*
core_tests_golub_test_host_integration_core_api_echo_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_list_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoEnumListResponse,
    core_tests_golub_test_host_integration_core_api_echo_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_enum_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoEnumListResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_enum_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoEnumListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_enum_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoClassListResponse,
    core_tests_golub_test_host_integration_core_api_echo_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_class_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoClassListResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_class_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoClassListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_class_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumListResponse,
    core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumListResponse* self) {
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassListResponse,
    core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostIntegrationCoreApiEchoMapResponse,
              core_tests_golub_test_host_integration_core_api_echo_map_response,
              G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoMapResponse*
core_tests_golub_test_host_integration_core_api_echo_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoMapResponse*
core_tests_golub_test_host_integration_core_api_echo_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoStringMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_string_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoStringMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_string_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoStringMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_string_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoIntMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_int_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoIntMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_int_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoIntMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_int_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_enum_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoEnumMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_enum_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoEnumMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_enum_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoClassMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_class_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoClassMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_class_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoClassMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_class_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullStringMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullIntMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullIntMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassMapResponse* self) {
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoClassWrapperResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoClassWrapperResponse,
    core_tests_golub_test_host_integration_core_api_echo_class_wrapper_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_class_wrapper_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoClassWrapperResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_class_wrapper_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_class_wrapper_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoClassWrapperResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_class_wrapper_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoClassWrapperResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_class_wrapper_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoClassWrapperResponse*
core_tests_golub_test_host_integration_core_api_echo_class_wrapper_response_new(
    CoreTestsGolubTestAllClassesWrapper* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoClassWrapperResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_class_wrapper_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(
                           core_tests_golub_test_all_classes_wrapper_type_id,
                           G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoClassWrapperResponse*
core_tests_golub_test_host_integration_core_api_echo_class_wrapper_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoClassWrapperResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_class_wrapper_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoEnumResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_enum_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_enum_response_new(
    CoreTestsGolubTestAnEnum return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                       fl_value_new_int(return_value),
                                       (GDestroyNotify)fl_value_unref));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_echo_enum_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_another_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_another_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_another_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_another_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherEnumResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_another_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_another_enum_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_another_enum_response_new(
    CoreTestsGolubTestAnotherEnum return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_another_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                          fl_value_new_int(return_value),
                          (GDestroyNotify)fl_value_unref));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_another_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_another_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNamedDefaultStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNamedDefaultStringResponse,
    core_tests_golub_test_host_integration_core_api_echo_named_default_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_named_default_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_named_default_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_named_default_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNamedDefaultStringResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_named_default_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNamedDefaultStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_named_default_string_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNamedDefaultStringResponse*
core_tests_golub_test_host_integration_core_api_echo_named_default_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_named_default_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNamedDefaultStringResponse*
core_tests_golub_test_host_integration_core_api_echo_named_default_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_named_default_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse,
    core_tests_golub_test_host_integration_core_api_echo_optional_default_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_optional_default_double_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_optional_default_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_optional_default_double_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_optional_default_double_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_optional_default_double_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
core_tests_golub_test_host_integration_core_api_echo_optional_default_double_response_new(
    double return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_optional_default_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
core_tests_golub_test_host_integration_core_api_echo_optional_default_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_optional_default_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse,
    core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CREATE_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse*
core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_response_new(
    CoreTestsGolubTestAllTypesWithDefaults* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CREATE_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_custom_object(
                       core_tests_golub_test_all_types_with_defaults_type_id,
                       G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse*
core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CREATE_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse,
    core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse*
core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_response_new(
    CoreTestsGolubTestAllTypesWithDefaults* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_custom_object(
                       core_tests_golub_test_all_types_with_defaults_type_id,
                       G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse*
core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoRequiredIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoRequiredIntResponse,
    core_tests_golub_test_host_integration_core_api_echo_required_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_required_int_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoRequiredIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_required_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_required_int_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoRequiredIntResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_required_int_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoRequiredIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_required_int_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoRequiredIntResponse*
core_tests_golub_test_host_integration_core_api_echo_required_int_response_new(
    int64_t return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoRequiredIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_required_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoRequiredIntResponse*
core_tests_golub_test_host_integration_core_api_echo_required_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoRequiredIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_required_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesResponse,
    core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_response_new(
    CoreTestsGolubTestAllNullableTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, return_value != nullptr
                       ? fl_value_new_custom_object(
                             core_tests_golub_test_all_nullable_types_type_id,
                             G_OBJECT(return_value))
                       : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_new(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom_object(
                core_tests_golub_test_all_nullable_types_without_recursion_type_id,
                G_OBJECT(return_value))
          : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiExtractNestedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiExtractNestedNullableStringResponse,
    core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiExtractNestedNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiExtractNestedNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiExtractNestedNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiExtractNestedNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCreateNestedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCreateNestedNullableStringResponse,
    core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCreateNestedNullableStringResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCreateNestedNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiCreateNestedNullableStringResponse*
core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_response_new(
    CoreTestsGolubTestAllClassesWrapper* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(
                           core_tests_golub_test_all_classes_wrapper_type_id,
                           G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiCreateNestedNullableStringResponse*
core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesResponse,
    core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_response_new(
    CoreTestsGolubTestAllNullableTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(
                           core_tests_golub_test_all_nullable_types_type_id,
                           G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_new(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom_object(
          core_tests_golub_test_all_nullable_types_without_recursion_type_id,
          G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_int_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_int_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_int_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableDoubleResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_double_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableDoubleResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_double_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_double_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableDoubleResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_double_response_new(
    double* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_float(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableDoubleResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableBoolResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_bool_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableBoolResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_bool_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_bool_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableBoolResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_bool_response_new(
    gboolean* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_bool(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableBoolResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_string_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableUint8ListResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableUint8ListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_uint8_list(
                                              return_value, return_value_length)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableUint8ListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableObjectResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_object_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_object_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_object_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableObjectResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_object_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableObjectResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_object_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableObjectResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_object_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableObjectResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableListResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableListResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumListResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassListResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumMapResponse* self) {
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_nullable_enum_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_response_new(
    CoreTestsGolubTestAnEnum* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_response_new(
    CoreTestsGolubTestAnotherEnum* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalNullableIntResponse,
    core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalNullableIntResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalNullableIntResponse*
core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalNullableIntResponse*
core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoNamedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNamedNullableStringResponse,
    core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNamedNullableStringResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoNamedNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNamedNullableStringResponse*
core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiEchoNamedNullableStringResponse*
core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse,
    core_tests_golub_test_host_integration_core_api_noop_async_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse,
    core_tests_golub_test_host_integration_core_api_noop_async_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_noop_async_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_noop_async_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_noop_async_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_noop_async_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_noop_async_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse*
core_tests_golub_test_host_integration_core_api_noop_async_response_new() {
  CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_noop_async_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse*
core_tests_golub_test_host_integration_core_api_noop_async_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(g_object_new(
          core_tests_golub_test_host_integration_core_api_noop_async_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_int_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_int_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_int_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_int_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_int_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse*
core_tests_golub_test_host_integration_core_api_echo_async_int_response_new(
    int64_t return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse*
core_tests_golub_test_host_integration_core_api_echo_async_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_double_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_double_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_double_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_double_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_double_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse*
core_tests_golub_test_host_integration_core_api_echo_async_double_response_new(
    double return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse*
core_tests_golub_test_host_integration_core_api_echo_async_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_bool_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_bool_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_bool_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_bool_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse*
core_tests_golub_test_host_integration_core_api_echo_async_bool_response_new(
    gboolean return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse*
core_tests_golub_test_host_integration_core_api_echo_async_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_string_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_string_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse*
core_tests_golub_test_host_integration_core_api_echo_async_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse*
core_tests_golub_test_host_integration_core_api_echo_async_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_uint8_list(return_value, return_value_length));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_object_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_object_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_object_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_object_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_object_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_object_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse*
core_tests_golub_test_host_integration_core_api_echo_async_object_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse*
core_tests_golub_test_host_integration_core_api_echo_async_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_list_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_LIST_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_class_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_LIST_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_map_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_string_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_MAP_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_int_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_MAP_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_MAP_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_class_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_MAP_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_enum_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_enum_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_async_enum_response_new(
    CoreTestsGolubTestAnEnum return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                       fl_value_new_int(return_value),
                                       (GDestroyNotify)fl_value_unref));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_async_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_ENUM_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_new(
    CoreTestsGolubTestAnotherEnum return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                          fl_value_new_int(return_value),
                          (GDestroyNotify)fl_value_unref));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse,
    core_tests_golub_test_host_integration_core_api_throw_async_error_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse,
    core_tests_golub_test_host_integration_core_api_throw_async_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_throw_async_error_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_throw_async_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_throw_async_error_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_throw_async_error_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_throw_async_error_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse*
core_tests_golub_test_host_integration_core_api_throw_async_error_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_throw_async_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse*
core_tests_golub_test_host_integration_core_api_throw_async_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_throw_async_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse,
    core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse,
    core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_new() {
  CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse,
    core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse,
    core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_all_types_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_new(
    CoreTestsGolubTestAllTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(
                                        core_tests_golub_test_all_types_type_id,
                                        G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse,
    core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse,
    core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_new(
    CoreTestsGolubTestAllTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(
                                        core_tests_golub_test_all_types_type_id,
                                        G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse,
    core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_NOT_THROW_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse,
    core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_NOT_THROW_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_new(
    CoreTestsGolubTestAllTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_NOT_THROW_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(
                                        core_tests_golub_test_all_types_type_id,
                                        G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_NOT_THROW_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse,
    core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_THROW_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse,
    core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_THROW_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_new(
    CoreTestsGolubTestAllTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_THROW_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(
                                        core_tests_golub_test_all_types_type_id,
                                        G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_THROW_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new(
    CoreTestsGolubTestAllNullableTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, return_value != nullptr
                       ? fl_value_new_custom_object(
                             core_tests_golub_test_all_nullable_types_type_id,
                             G_OBJECT(return_value))
                       : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse,
    core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse,
    core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_new(
    CoreTestsGolubTestAllNullableTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, return_value != nullptr
                       ? fl_value_new_custom_object(
                             core_tests_golub_test_all_nullable_types_type_id,
                             G_OBJECT(return_value))
                       : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom_object(
                core_tests_golub_test_all_nullable_types_without_recursion_type_id,
                G_OBJECT(return_value))
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_new(
    double* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_float(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_new(
    gboolean* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_bool(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_uint8_list(
                                              return_value, return_value_length)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_new(
    CoreTestsGolubTestAnEnum* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_NULLABLE_ENUM_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse,
    core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_NULLABLE_ENUM_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_new(
    CoreTestsGolubTestAnotherEnum* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApiDefaultIsMainThreadResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiDefaultIsMainThreadResponse,
    core_tests_golub_test_host_integration_core_api_default_is_main_thread_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_default_is_main_thread_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiDefaultIsMainThreadResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_DEFAULT_IS_MAIN_THREAD_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_default_is_main_thread_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_default_is_main_thread_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiDefaultIsMainThreadResponse* self) {
}

static void
core_tests_golub_test_host_integration_core_api_default_is_main_thread_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiDefaultIsMainThreadResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_default_is_main_thread_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiDefaultIsMainThreadResponse*
core_tests_golub_test_host_integration_core_api_default_is_main_thread_response_new(
    gboolean return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiDefaultIsMainThreadResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_DEFAULT_IS_MAIN_THREAD_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_default_is_main_thread_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiDefaultIsMainThreadResponse*
core_tests_golub_test_host_integration_core_api_default_is_main_thread_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiDefaultIsMainThreadResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_DEFAULT_IS_MAIN_THREAD_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_default_is_main_thread_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse,
    core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_TASK_QUEUE_IS_BACKGROUND_THREAD_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_response_dispose;
}

CoreTestsGolubTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse*
core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_response_new(
    gboolean return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_TASK_QUEUE_IS_BACKGROUND_THREAD_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

CoreTestsGolubTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse*
core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_TASK_QUEUE_IS_BACKGROUND_THREAD_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_noop_response,
    CORE_TESTS_GOLUB_TEST, HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE,
    GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_noop_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_new() {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new() {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_new(
    CoreTestsGolubTestAllTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_custom_object(
                                        core_tests_golub_test_all_types_type_id,
                                        G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new(
    CoreTestsGolubTestAllNullableTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, return_value != nullptr
                       ? fl_value_new_custom_object(
                             core_tests_golub_test_all_nullable_types_type_id,
                             G_OBJECT(return_value))
                       : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new(
    CoreTestsGolubTestAllNullableTypes* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(
                           core_tests_golub_test_all_nullable_types_type_id,
                           G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom_object(
                core_tests_golub_test_all_nullable_types_without_recursion_type_id,
                G_OBJECT(return_value))
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new(
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom_object(
          core_tests_golub_test_all_nullable_types_without_recursion_type_id,
          G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse* self) {
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_new(
    gboolean return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_new(
    int64_t return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_new(
    double return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_uint8_list(return_value, return_value_length));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse* self) {
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_MAP_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_MAP_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_STRING_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_INT_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_INT_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE, GObject)

struct _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse* self) {
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_new(
    CoreTestsGolubTestAnEnum return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                       fl_value_new_int(return_value),
                                       (GDestroyNotify)fl_value_unref));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_ENUM_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_new(
    CoreTestsGolubTestAnotherEnum return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                          fl_value_new_int(return_value),
                          (GDestroyNotify)fl_value_unref));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new(
    gboolean* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_bool(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new(
    double* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_float(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_uint8_list(
                                              return_value, return_value_length)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE, GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new(
    CoreTestsGolubTestAnEnum* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_new(
    CoreTestsGolubTestAnotherEnum* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
      self = CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response,
    CORE_TESTS_GOLUB_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE,
    GObject)

struct
    _CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse,
    core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
      self =
          CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
        self) {}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostIntegrationCoreApi {
  GObject parent_instance;

  const CoreTestsGolubTestHostIntegrationCoreApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostIntegrationCoreApi,
              core_tests_golub_test_host_integration_core_api, G_TYPE_OBJECT)

static void core_tests_golub_test_host_integration_core_api_dispose(
    GObject* object) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(core_tests_golub_test_host_integration_core_api_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_host_integration_core_api_init(
    CoreTestsGolubTestHostIntegrationCoreApi* self) {}

static void core_tests_golub_test_host_integration_core_api_class_init(
    CoreTestsGolubTestHostIntegrationCoreApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_integration_core_api_dispose;
}

static CoreTestsGolubTestHostIntegrationCoreApi*
core_tests_golub_test_host_integration_core_api_new(
    const CoreTestsGolubTestHostIntegrationCoreApiVTable* vtable,
    gpointer user_data, GDestroyNotify user_data_free_func) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(g_object_new(
          core_tests_golub_test_host_integration_core_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void core_tests_golub_test_host_integration_core_api_noop_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiNoopResponse) response =
      self->vtable->noop(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "noop");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "noop", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllTypes* everything =
      CORE_TESTS_GOLUB_TEST_ALL_TYPES(fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesResponse)
      response = self->vtable->echo_all_types(everything, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllTypes", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_throw_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiThrowErrorResponse)
      response = self->vtable->throw_error(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "throwError");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwError", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_throw_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_error_from_void == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiThrowErrorFromVoidResponse)
      response = self->vtable->throw_error_from_void(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "throwErrorFromVoid");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwErrorFromVoid", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_throw_flutter_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_flutter_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiThrowFlutterErrorResponse)
      response = self->vtable->throw_flutter_error(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "throwFlutterError");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwFlutterError", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoIntResponse) response =
      self->vtable->echo_int(an_int, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoInt", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoDoubleResponse)
      response = self->vtable->echo_double(a_double, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoDouble", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoBoolResponse) response =
      self->vtable->echo_bool(a_bool, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoBool");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoBool", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoStringResponse)
      response = self->vtable->echo_string(a_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoString", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_uint8_list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoUint8ListResponse)
      response = self->vtable->echo_uint8_list(
          a_uint8_list, a_uint8_list_length, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoUint8List");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoUint8List", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* an_object = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoObjectResponse)
      response = self->vtable->echo_object(an_object, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoObject");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoObject", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoListResponse) response =
      self->vtable->echo_list(list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoList", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoEnumListResponse)
      response = self->vtable->echo_enum_list(enum_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoEnumList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoEnumList", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoClassListResponse)
      response = self->vtable->echo_class_list(class_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoClassList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoClassList", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumListResponse)
      response =
          self->vtable->echo_non_null_enum_list(enum_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullEnumList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullEnumList", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassListResponse)
      response =
          self->vtable->echo_non_null_class_list(class_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullClassList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullClassList", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoMapResponse) response =
      self->vtable->echo_map(map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoMap", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoStringMapResponse)
      response = self->vtable->echo_string_map(string_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoStringMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoStringMap", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoIntMapResponse)
      response = self->vtable->echo_int_map(int_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoIntMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoIntMap", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoEnumMapResponse)
      response = self->vtable->echo_enum_map(enum_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoEnumMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoEnumMap", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoClassMapResponse)
      response = self->vtable->echo_class_map(class_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoClassMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoClassMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullStringMapResponse)
      response =
          self->vtable->echo_non_null_string_map(string_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullStringMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullStringMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullIntMapResponse)
      response = self->vtable->echo_non_null_int_map(int_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullIntMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullIntMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullEnumMapResponse)
      response =
          self->vtable->echo_non_null_enum_map(enum_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullEnumMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullEnumMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNonNullClassMapResponse)
      response =
          self->vtable->echo_non_null_class_map(class_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullClassMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullClassMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_class_wrapper_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_class_wrapper == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllClassesWrapper* wrapper =
      CORE_TESTS_GOLUB_TEST_ALL_CLASSES_WRAPPER(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoClassWrapperResponse)
      response = self->vtable->echo_class_wrapper(wrapper, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoClassWrapper");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoClassWrapper", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_echo_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnEnum an_enum = static_cast<CoreTestsGolubTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoEnumResponse) response =
      self->vtable->echo_enum(an_enum, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoEnum", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_another_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_another_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherEnumResponse)
      response = self->vtable->echo_another_enum(another_enum, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAnotherEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherEnum", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_named_default_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_named_default_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNamedDefaultStringResponse)
      response =
          self->vtable->echo_named_default_string(a_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNamedDefaultString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNamedDefaultString", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_optional_default_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_optional_default_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse)
      response =
          self->vtable->echo_optional_default_double(a_double, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoOptionalDefaultDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoOptionalDefaultDouble", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->create_all_types_with_defaults == nullptr) {
    return;
  }

  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse)
      response = self->vtable->create_all_types_with_defaults(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "createAllTypesWithDefaults");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "createAllTypesWithDefaults", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_all_types_with_defaults == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllTypesWithDefaults* all_types =
      CORE_TESTS_GOLUB_TEST_ALL_TYPES_WITH_DEFAULTS(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse)
      response = self->vtable->echo_all_types_with_defaults(all_types,
                                                            self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllTypesWithDefaults");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllTypesWithDefaults", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_required_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_required_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoRequiredIntResponse)
      response = self->vtable->echo_required_int(an_int, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoRequiredInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoRequiredInt", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllNullableTypes* everything =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesResponse)
      response =
          self->vtable->echo_all_nullable_types(everything, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllNullableTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllNullableTypes", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_all_nullable_types_without_recursion == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllNullableTypesWithoutRecursion* everything =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse)
      response = self->vtable->echo_all_nullable_types_without_recursion(
          everything, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllNullableTypesWithoutRecursion");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllNullableTypesWithoutRecursion", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->extract_nested_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllClassesWrapper* wrapper =
      CORE_TESTS_GOLUB_TEST_ALL_CLASSES_WRAPPER(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiExtractNestedNullableStringResponse)
      response = self->vtable->extract_nested_nullable_string(wrapper,
                                                              self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "extractNestedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "extractNestedNullableString", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->create_nested_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* nullable_string = fl_value_get_string(value0);
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCreateNestedNullableStringResponse)
      response = self->vtable->create_nested_nullable_string(nullable_string,
                                                             self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "createNestedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "createNestedNullableString", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->send_multiple_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesResponse)
      response = self->vtable->send_multiple_nullable_types(
          a_nullable_bool, a_nullable_int, a_nullable_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypes", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->send_multiple_nullable_types_without_recursion == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse)
      response = self->vtable->send_multiple_nullable_types_without_recursion(
          a_nullable_bool, a_nullable_int, a_nullable_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypesWithoutRecursion");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypesWithoutRecursion", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value0);
    a_nullable_int = &a_nullable_int_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntResponse)
      response =
          self->vtable->echo_nullable_int(a_nullable_int, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableInt", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double* a_nullable_double = nullptr;
  double a_nullable_double_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_double_value = fl_value_get_float(value0);
    a_nullable_double = &a_nullable_double_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNullableDoubleResponse)
      response = self->vtable->echo_nullable_double(a_nullable_double,
                                                    self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableDouble", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNullableBoolResponse)
      response =
          self->vtable->echo_nullable_bool(a_nullable_bool, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableBool");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableBool", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_nullable_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringResponse)
      response = self->vtable->echo_nullable_string(a_nullable_string,
                                                    self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableString", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_nullable_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_nullable_uint8_list_length = fl_value_get_length(value0);
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableUint8ListResponse)
      response = self->vtable->echo_nullable_uint8_list(
          a_nullable_uint8_list, a_nullable_uint8_list_length, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableUint8List");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableUint8List", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_nullable_object = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNullableObjectResponse)
      response = self->vtable->echo_nullable_object(a_nullable_object,
                                                    self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableObject");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableObject", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_nullable_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNullableListResponse)
      response =
          self->vtable->echo_nullable_list(a_nullable_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableList", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumListResponse)
      response =
          self->vtable->echo_nullable_enum_list(enum_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableEnumList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableEnumList", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassListResponse)
      response =
          self->vtable->echo_nullable_class_list(class_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableClassList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableClassList", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse)
      response = self->vtable->echo_nullable_non_null_enum_list(
          enum_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullEnumList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullEnumList", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse)
      response = self->vtable->echo_nullable_non_null_class_list(
          class_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullClassList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullClassList", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNullableMapResponse)
      response = self->vtable->echo_nullable_map(map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableStringMapResponse)
      response =
          self->vtable->echo_nullable_string_map(string_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableStringMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableStringMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNullableIntMapResponse)
      response = self->vtable->echo_nullable_int_map(int_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableIntMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableIntMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumMapResponse)
      response =
          self->vtable->echo_nullable_enum_map(enum_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableEnumMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableEnumMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableClassMapResponse)
      response =
          self->vtable->echo_nullable_class_map(class_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableClassMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableClassMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse)
      response = self->vtable->echo_nullable_non_null_string_map(
          string_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullStringMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullStringMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse)
      response = self->vtable->echo_nullable_non_null_int_map(int_map,
                                                              self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullIntMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullIntMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse)
      response = self->vtable->echo_nullable_non_null_enum_map(enum_map,
                                                               self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullEnumMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullEnumMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse)
      response = self->vtable->echo_nullable_non_null_class_map(
          class_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullClassMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullClassMap", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnEnum* an_enum = nullptr;
  CoreTestsGolubTestAnEnum an_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_enum_value = static_cast<CoreTestsGolubTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    an_enum = &an_enum_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiEchoNullableEnumResponse)
      response = self->vtable->echo_nullable_enum(an_enum, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableEnum", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_another_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnotherEnum* another_enum = nullptr;
  CoreTestsGolubTestAnotherEnum another_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    another_enum_value = static_cast<CoreTestsGolubTestAnotherEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    another_enum = &another_enum_value;
  }
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse)
      response = self->vtable->echo_another_nullable_enum(another_enum,
                                                          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAnotherNullableEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherNullableEnum", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_optional_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value0);
    a_nullable_int = &a_nullable_int_value;
  }
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoOptionalNullableIntResponse)
      response = self->vtable->echo_optional_nullable_int(a_nullable_int,
                                                          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoOptionalNullableInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoOptionalNullableInt", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_named_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_nullable_string = fl_value_get_string(value0);
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoNamedNullableStringResponse)
      response = self->vtable->echo_named_nullable_string(a_nullable_string,
                                                          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNamedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNamedNullableString", error->message);
  }
}

static void core_tests_golub_test_host_integration_core_api_noop_async_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop_async == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->noop_async(handle, self->user_data);
}

static void core_tests_golub_test_host_integration_core_api_echo_async_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_int(an_int, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_double(a_double, handle, self->user_data);
}

static void core_tests_golub_test_host_integration_core_api_echo_async_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_bool(a_bool, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_string(a_string, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_uint8_list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_uint8_list(a_uint8_list, a_uint8_list_length, handle,
                                      self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* an_object = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_object(an_object, handle, self->user_data);
}

static void core_tests_golub_test_host_integration_core_api_echo_async_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_list(list, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_enum_list(enum_list, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_class_list(class_list, handle, self->user_data);
}

static void core_tests_golub_test_host_integration_core_api_echo_async_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_map(map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_string_map(string_map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_int_map(int_map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_enum_map(enum_map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_class_map(class_map, handle, self->user_data);
}

static void core_tests_golub_test_host_integration_core_api_echo_async_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnEnum an_enum = static_cast<CoreTestsGolubTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_enum(an_enum, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_another_async_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_another_async_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_another_async_enum(another_enum, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_throw_async_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_async_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->throw_async_error(handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_async_error_from_void == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->throw_async_error_from_void(handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_async_flutter_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->throw_async_flutter_error(handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllTypes* everything =
      CORE_TESTS_GOLUB_TEST_ALL_TYPES(fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_all_types(everything, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_modern_async_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllTypes* everything =
      CORE_TESTS_GOLUB_TEST_ALL_TYPES(fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_modern_async_all_types(everything, handle,
                                            self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_modern_async_all_types_and_not_throw == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllTypes* everything =
      CORE_TESTS_GOLUB_TEST_ALL_TYPES(fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_modern_async_all_types_and_not_throw(everything, handle,
                                                          self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_modern_async_all_types_and_throw == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllTypes* everything =
      CORE_TESTS_GOLUB_TEST_ALL_TYPES(fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_modern_async_all_types_and_throw(everything, handle,
                                                      self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllNullableTypes* everything =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_all_nullable_types(everything, handle,
                                                       self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_modern_async_nullable_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllNullableTypes* everything =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_modern_async_nullable_all_nullable_types(
      everything, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_all_nullable_types_without_recursion ==
          nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllNullableTypesWithoutRecursion* everything =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_all_nullable_types_without_recursion(
      everything, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* an_int = nullptr;
  int64_t an_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_int_value = fl_value_get_int(value0);
    an_int = &an_int_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_int(an_int, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double* a_double = nullptr;
  double a_double_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_double_value = fl_value_get_float(value0);
    a_double = &a_double_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_double(a_double, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_bool = nullptr;
  gboolean a_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_bool_value = fl_value_get_bool(value0);
    a_bool = &a_bool_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_bool(a_bool, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_string(a_string, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_uint8_list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_uint8_list(
      a_uint8_list, a_uint8_list_length, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* an_object = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_object(an_object, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_list(list, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_enum_list(enum_list, handle,
                                              self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_class_list(class_list, handle,
                                               self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_map(map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_string_map(string_map, handle,
                                               self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_int_map(int_map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_enum_map(enum_map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_class_map(class_map, handle,
                                              self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnEnum* an_enum = nullptr;
  CoreTestsGolubTestAnEnum an_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_enum_value = static_cast<CoreTestsGolubTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    an_enum = &an_enum_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_enum(an_enum, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_another_async_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnotherEnum* another_enum = nullptr;
  CoreTestsGolubTestAnotherEnum another_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    another_enum_value = static_cast<CoreTestsGolubTestAnotherEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    another_enum = &another_enum_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_another_async_nullable_enum(another_enum, handle,
                                                 self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_default_is_main_thread_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->default_is_main_thread == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiDefaultIsMainThreadResponse)
      response = self->vtable->default_is_main_thread(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "defaultIsMainThread");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "defaultIsMainThread", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->task_queue_is_background_thread == nullptr) {
    return;
  }

  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse)
      response = self->vtable->task_queue_is_background_thread(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "taskQueueIsBackgroundThread");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "taskQueueIsBackgroundThread", error->message);
  }
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_noop_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->call_flutter_noop == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_noop(handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_throw_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_throw_error(handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_throw_error_from_void == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_throw_error_from_void(handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllTypes* everything =
      CORE_TESTS_GOLUB_TEST_ALL_TYPES(fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_all_types(everything, handle,
                                            self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllNullableTypes* everything =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_all_nullable_types(everything, handle,
                                                     self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_send_multiple_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_send_multiple_nullable_types(
      a_nullable_bool, a_nullable_int, a_nullable_string, handle,
      self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_nullable_types_without_recursion ==
          nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAllNullableTypesWithoutRecursion* everything =
      CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_all_nullable_types_without_recursion(
      everything, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable
              ->call_flutter_send_multiple_nullable_types_without_recursion ==
          nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_send_multiple_nullable_types_without_recursion(
      a_nullable_bool, a_nullable_int, a_nullable_string, handle,
      self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_bool(a_bool, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_int(an_int, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_double(a_double, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_string(a_string, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* list = fl_value_get_uint8_list(value0);
  size_t list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_uint8_list(list, list_length, handle,
                                             self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_list(list, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_enum_list(enum_list, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_class_list(class_list, handle,
                                             self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_enum_list(enum_list, handle,
                                                     self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_class_list(class_list, handle,
                                                      self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_map(map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_string_map(string_map, handle,
                                             self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_int_map(int_map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_enum_map(enum_map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_class_map(class_map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_string_map(string_map, handle,
                                                      self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_int_map(int_map, handle,
                                                   self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_enum_map(enum_map, handle,
                                                    self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_class_map(class_map, handle,
                                                     self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnEnum an_enum = static_cast<CoreTestsGolubTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(
          const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_enum(an_enum, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_another_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_another_enum(another_enum, handle,
                                               self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_bool = nullptr;
  gboolean a_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_bool_value = fl_value_get_bool(value0);
    a_bool = &a_bool_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_bool(a_bool, handle,
                                                self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* an_int = nullptr;
  int64_t an_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_int_value = fl_value_get_int(value0);
    an_int = &an_int_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_int(an_int, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double* a_double = nullptr;
  double a_double_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_double_value = fl_value_get_float(value0);
    a_double = &a_double_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_double(a_double, handle,
                                                  self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_string(a_string, handle,
                                                  self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* list = fl_value_get_uint8_list(value0);
  size_t list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_uint8_list(list, list_length, handle,
                                                      self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_list(list, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_enum_list(enum_list, handle,
                                                     self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_class_list(class_list, handle,
                                                      self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_enum_list(enum_list, handle,
                                                              self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_class_list(
      class_list, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_map(map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_string_map(string_map, handle,
                                                      self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_int_map(int_map, handle,
                                                   self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_enum_map(enum_map, handle,
                                                    self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_class_map(class_map, handle,
                                                     self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_string_map(
      string_map, handle, self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_int_map(int_map, handle,
                                                            self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_enum_map(enum_map, handle,
                                                             self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_class_map(class_map, handle,
                                                              self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnEnum* an_enum = nullptr;
  CoreTestsGolubTestAnEnum an_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_enum_value = static_cast<CoreTestsGolubTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    an_enum = &an_enum_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_enum(an_enum, handle,
                                                self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_another_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubTestAnotherEnum* another_enum = nullptr;
  CoreTestsGolubTestAnotherEnum another_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    another_enum_value = static_cast<CoreTestsGolubTestAnotherEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    another_enum = &another_enum_value;
  }
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_another_nullable_enum(another_enum, handle,
                                                        self->user_data);
}

static void
core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_small_api_echo_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golub_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_small_api_echo_string(a_string, handle,
                                                   self->user_data);
}

void core_tests_golub_test_host_integration_core_api_set_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix,
    const CoreTestsGolubTestHostIntegrationCoreApiVTable* vtable,
    gpointer user_data, GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApi) api_data =
      core_tests_golub_test_host_integration_core_api_new(vtable, user_data,
                                                          user_data_free_func);

  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  g_autofree gchar* noop_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi.noop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_channel = fl_basic_message_channel_new(
      messenger, noop_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      noop_channel, core_tests_golub_test_host_integration_core_api_noop_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_types_channel =
      fl_basic_message_channel_new(messenger, echo_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_types_channel,
      core_tests_golub_test_host_integration_core_api_echo_all_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_error_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_error_channel =
      fl_basic_message_channel_new(messenger, throw_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_error_channel,
      core_tests_golub_test_host_integration_core_api_throw_error_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_error_from_void_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwErrorFromVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_error_from_void_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_error_from_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_error_from_void_channel,
      core_tests_golub_test_host_integration_core_api_throw_error_from_void_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_flutter_error_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwFlutterError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_flutter_error_channel =
      fl_basic_message_channel_new(messenger, throw_flutter_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_flutter_error_channel,
      core_tests_golub_test_host_integration_core_api_throw_flutter_error_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi.echoInt%"
      "s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_int_channel =
      fl_basic_message_channel_new(messenger, echo_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_int_channel,
      core_tests_golub_test_host_integration_core_api_echo_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_double_channel =
      fl_basic_message_channel_new(messenger, echo_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_double_channel,
      core_tests_golub_test_host_integration_core_api_echo_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_bool_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_bool_channel =
      fl_basic_message_channel_new(messenger, echo_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_bool_channel,
      core_tests_golub_test_host_integration_core_api_echo_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_string_channel =
      fl_basic_message_channel_new(messenger, echo_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_string_channel,
      core_tests_golub_test_host_integration_core_api_echo_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_uint8_list_channel =
      fl_basic_message_channel_new(messenger, echo_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_uint8_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_object_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_object_channel =
      fl_basic_message_channel_new(messenger, echo_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_object_channel,
      core_tests_golub_test_host_integration_core_api_echo_object_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_list_channel =
      fl_basic_message_channel_new(messenger, echo_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_list_channel =
      fl_basic_message_channel_new(messenger, echo_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_enum_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_list_channel =
      fl_basic_message_channel_new(messenger, echo_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_class_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_enum_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_non_null_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_class_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_non_null_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi.echoMap%"
      "s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_map_channel =
      fl_basic_message_channel_new(messenger, echo_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_string_map_channel =
      fl_basic_message_channel_new(messenger, echo_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_string_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_int_map_channel =
      fl_basic_message_channel_new(messenger, echo_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_int_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_map_channel =
      fl_basic_message_channel_new(messenger, echo_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_enum_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_map_channel =
      fl_basic_message_channel_new(messenger, echo_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_class_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_string_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_non_null_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_int_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_non_null_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_enum_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_non_null_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_class_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_non_null_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_class_wrapper_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoClassWrapper%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_wrapper_channel =
      fl_basic_message_channel_new(messenger, echo_class_wrapper_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_class_wrapper_channel,
      core_tests_golub_test_host_integration_core_api_echo_class_wrapper_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_channel =
      fl_basic_message_channel_new(messenger, echo_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_enum_channel,
      core_tests_golub_test_host_integration_core_api_echo_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_another_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAnotherEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_enum_channel =
      fl_basic_message_channel_new(messenger, echo_another_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_enum_channel,
      core_tests_golub_test_host_integration_core_api_echo_another_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_named_default_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNamedDefaultString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_named_default_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_named_default_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_named_default_string_channel,
      core_tests_golub_test_host_integration_core_api_echo_named_default_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_optional_default_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoOptionalDefaultDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_optional_default_double_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_optional_default_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_optional_default_double_channel,
      core_tests_golub_test_host_integration_core_api_echo_optional_default_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* create_all_types_with_defaults_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "createAllTypesWithDefaults%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) create_all_types_with_defaults_channel =
      fl_basic_message_channel_new(messenger,
                                   create_all_types_with_defaults_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      create_all_types_with_defaults_channel,
      core_tests_golub_test_host_integration_core_api_create_all_types_with_defaults_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_all_types_with_defaults_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAllTypesWithDefaults%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_types_with_defaults_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_all_types_with_defaults_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_types_with_defaults_channel,
      core_tests_golub_test_host_integration_core_api_echo_all_types_with_defaults_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_required_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoRequiredInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_required_int_channel =
      fl_basic_message_channel_new(messenger, echo_required_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_required_int_channel,
      core_tests_golub_test_host_integration_core_api_echo_required_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_all_nullable_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAllNullableTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_nullable_types_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_all_nullable_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_nullable_types_channel,
      core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_all_nullable_types_without_recursion_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAllNullableTypesWithoutRecursion%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger, echo_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_nullable_types_without_recursion_channel,
      core_tests_golub_test_host_integration_core_api_echo_all_nullable_types_without_recursion_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* extract_nested_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "extractNestedNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) extract_nested_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   extract_nested_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      extract_nested_nullable_string_channel,
      core_tests_golub_test_host_integration_core_api_extract_nested_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* create_nested_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "createNestedNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) create_nested_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   create_nested_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      create_nested_nullable_string_channel,
      core_tests_golub_test_host_integration_core_api_create_nested_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* send_multiple_nullable_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "sendMultipleNullableTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) send_multiple_nullable_types_channel =
      fl_basic_message_channel_new(messenger,
                                   send_multiple_nullable_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      send_multiple_nullable_types_channel,
      core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      send_multiple_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "sendMultipleNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      send_multiple_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              send_multiple_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      send_multiple_nullable_types_without_recursion_channel,
      core_tests_golub_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_int_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_int_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_double_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_double_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_bool_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_bool_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_bool_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_string_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_string_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_uint8_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_object_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_object_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_object_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_object_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_list_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_enum_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_class_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_enum_list_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_enum_list_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_enum_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_class_list_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_class_list_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_class_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_map_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_string_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_int_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_enum_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_class_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_string_map_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_string_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_string_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_non_null_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_int_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_non_null_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_enum_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_class_map_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_class_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_class_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_non_null_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_enum_channel,
      core_tests_golub_test_host_integration_core_api_echo_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_another_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAnotherNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_another_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_nullable_enum_channel,
      core_tests_golub_test_host_integration_core_api_echo_another_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_optional_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoOptionalNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_optional_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_optional_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_optional_nullable_int_channel,
      core_tests_golub_test_host_integration_core_api_echo_optional_nullable_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_named_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNamedNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_named_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_named_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_named_nullable_string_channel,
      core_tests_golub_test_host_integration_core_api_echo_named_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* noop_async_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "noopAsync%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_async_channel =
      fl_basic_message_channel_new(messenger, noop_async_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      noop_async_channel,
      core_tests_golub_test_host_integration_core_api_noop_async_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_int_channel =
      fl_basic_message_channel_new(messenger, echo_async_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_int_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_double_channel =
      fl_basic_message_channel_new(messenger, echo_async_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_double_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_bool_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_bool_channel =
      fl_basic_message_channel_new(messenger, echo_async_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_bool_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_string_channel =
      fl_basic_message_channel_new(messenger, echo_async_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_string_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_uint8_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_object_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_object_channel =
      fl_basic_message_channel_new(messenger, echo_async_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_object_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_object_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_list_channel =
      fl_basic_message_channel_new(messenger, echo_async_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_list_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_enum_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_class_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_string_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_int_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_int_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_enum_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_class_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_class_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_enum_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_another_async_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAnotherAsyncEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_async_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_another_async_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_async_enum_channel,
      core_tests_golub_test_host_integration_core_api_echo_another_async_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_async_error_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwAsyncError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_error_channel =
      fl_basic_message_channel_new(messenger, throw_async_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_async_error_channel,
      core_tests_golub_test_host_integration_core_api_throw_async_error_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_async_error_from_void_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwAsyncErrorFromVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_error_from_void_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_async_error_from_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_async_error_from_void_channel,
      core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_async_flutter_error_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwAsyncFlutterError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_flutter_error_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_async_flutter_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_async_flutter_error_channel,
      core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_all_types_channel =
      fl_basic_message_channel_new(messenger, echo_async_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_all_types_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_all_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_modern_async_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoModernAsyncAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_modern_async_all_types_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_modern_async_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_channel,
      core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_modern_async_all_types_and_not_throw_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoModernAsyncAllTypesAndNotThrow%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_all_types_and_not_throw_channel =
          fl_basic_message_channel_new(
              messenger, echo_modern_async_all_types_and_not_throw_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_and_not_throw_channel,
      core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_modern_async_all_types_and_throw_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoModernAsyncAllTypesAndThrow%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_all_types_and_throw_channel =
          fl_basic_message_channel_new(
              messenger, echo_modern_async_all_types_and_throw_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_and_throw_channel,
      core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_async_nullable_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, echo_async_nullable_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_all_nullable_types_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_modern_async_nullable_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoModernAsyncNullableAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_nullable_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger,
              echo_modern_async_nullable_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_nullable_all_nullable_types_channel,
      core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      echo_async_nullable_all_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "echoAsyncNullableAllNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_async_nullable_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              echo_async_nullable_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_all_nullable_types_without_recursion_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_int_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_double_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_double_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_bool_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_bool_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_string_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_uint8_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableUint8List%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_uint8_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_object_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_object_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_object_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_enum_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_class_list_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_string_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_int_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_enum_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_class_map_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_enum_channel,
      core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_another_async_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAnotherAsyncNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_async_nullable_enum_channel =
      fl_basic_message_channel_new(
          messenger, echo_another_async_nullable_enum_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_async_nullable_enum_channel,
      core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* default_is_main_thread_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "defaultIsMainThread%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) default_is_main_thread_channel =
      fl_basic_message_channel_new(messenger,
                                   default_is_main_thread_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      default_is_main_thread_channel,
      core_tests_golub_test_host_integration_core_api_default_is_main_thread_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* task_queue_is_background_thread_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "taskQueueIsBackgroundThread%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) task_queue_is_background_thread_channel =
      fl_basic_message_channel_new(messenger,
                                   task_queue_is_background_thread_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      task_queue_is_background_thread_channel,
      core_tests_golub_test_host_integration_core_api_task_queue_is_background_thread_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_noop_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterNoop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_noop_channel =
      fl_basic_message_channel_new(messenger, call_flutter_noop_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_noop_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_noop_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_throw_error_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterThrowError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_throw_error_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_throw_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_throw_error_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_throw_error_from_void_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterThrowErrorFromVoid%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_throw_error_from_void_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_throw_error_from_void_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_throw_error_from_void_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_all_types_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_types_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_nullable_types_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_send_multiple_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterSendMultipleNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_send_multiple_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_send_multiple_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_send_multiple_nullable_types_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      call_flutter_echo_all_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "callFlutterEchoAllNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_nullable_types_without_recursion_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      call_flutter_send_multiple_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "callFlutterSendMultipleNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_send_multiple_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_send_multiple_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_send_multiple_nullable_types_without_recursion_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_bool_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_bool_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_int_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_int_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_double_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_double_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_string_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_string_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_uint8_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_enum_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_class_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_enum_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_enum_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_class_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_class_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_string_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_int_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_enum_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_class_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_string_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_string_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_non_null_int_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_non_null_int_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_int_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_non_null_enum_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_non_null_enum_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_enum_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_class_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_class_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_enum_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_another_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoAnotherEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_another_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_another_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_another_enum_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_bool_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableBool%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_bool_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_int_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableInt%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_int_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_double_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableDouble%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_double_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_double_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_double_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_string_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_string_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_string_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_uint8_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableUint8List%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_uint8_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_uint8_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_uint8_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_enum_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_class_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_class_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_enum_list_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_enum_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      call_flutter_echo_nullable_non_null_class_list_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "callFlutterEchoNullableNonNullClassList%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_class_list_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_class_list_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_string_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_string_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_int_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_int_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_int_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_enum_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_enum_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_class_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_class_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      call_flutter_echo_nullable_non_null_string_map_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "callFlutterEchoNullableNonNullStringMap%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_string_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_string_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_int_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_int_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_int_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_enum_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_enum_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_enum_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_class_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_class_map_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_another_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoAnotherNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_another_nullable_enum_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_another_nullable_enum_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_another_nullable_enum_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_small_api_echo_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterSmallApiEchoString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_small_api_echo_string_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_small_api_echo_string_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_small_api_echo_string_channel,
      core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_cb,
      g_object_ref(api_data), g_object_unref);
}

void core_tests_golub_test_host_integration_core_api_clear_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  g_autofree gchar* noop_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi.noop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_channel = fl_basic_message_channel_new(
      messenger, noop_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(noop_channel, nullptr, nullptr,
                                               nullptr);
  g_autofree gchar* echo_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_types_channel =
      fl_basic_message_channel_new(messenger, echo_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_all_types_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* throw_error_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_error_channel =
      fl_basic_message_channel_new(messenger, throw_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(throw_error_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* throw_error_from_void_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwErrorFromVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_error_from_void_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_error_from_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(throw_error_from_void_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* throw_flutter_error_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwFlutterError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_flutter_error_channel =
      fl_basic_message_channel_new(messenger, throw_flutter_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(throw_flutter_error_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi.echoInt%"
      "s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_int_channel =
      fl_basic_message_channel_new(messenger, echo_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_int_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_double_channel =
      fl_basic_message_channel_new(messenger, echo_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_double_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_bool_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_bool_channel =
      fl_basic_message_channel_new(messenger, echo_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_bool_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_string_channel =
      fl_basic_message_channel_new(messenger, echo_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_string_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_uint8_list_channel =
      fl_basic_message_channel_new(messenger, echo_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_uint8_list_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_object_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_object_channel =
      fl_basic_message_channel_new(messenger, echo_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_object_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_list_channel =
      fl_basic_message_channel_new(messenger, echo_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_list_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_list_channel =
      fl_basic_message_channel_new(messenger, echo_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_enum_list_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_list_channel =
      fl_basic_message_channel_new(messenger, echo_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_class_list_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_non_null_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_enum_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_non_null_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_class_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi.echoMap%"
      "s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_map_channel =
      fl_basic_message_channel_new(messenger, echo_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_string_map_channel =
      fl_basic_message_channel_new(messenger, echo_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_string_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_int_map_channel =
      fl_basic_message_channel_new(messenger, echo_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_int_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_map_channel =
      fl_basic_message_channel_new(messenger, echo_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_enum_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_map_channel =
      fl_basic_message_channel_new(messenger, echo_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_class_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_non_null_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_string_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_non_null_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_int_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_non_null_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_enum_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_non_null_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNonNullClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_class_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_class_wrapper_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoClassWrapper%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_wrapper_channel =
      fl_basic_message_channel_new(messenger, echo_class_wrapper_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_class_wrapper_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_channel =
      fl_basic_message_channel_new(messenger, echo_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_enum_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_another_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAnotherEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_enum_channel =
      fl_basic_message_channel_new(messenger, echo_another_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_another_enum_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_named_default_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNamedDefaultString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_named_default_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_named_default_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_named_default_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_optional_default_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoOptionalDefaultDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_optional_default_double_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_optional_default_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_optional_default_double_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* create_all_types_with_defaults_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "createAllTypesWithDefaults%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) create_all_types_with_defaults_channel =
      fl_basic_message_channel_new(messenger,
                                   create_all_types_with_defaults_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      create_all_types_with_defaults_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_all_types_with_defaults_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAllTypesWithDefaults%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_types_with_defaults_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_all_types_with_defaults_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_types_with_defaults_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_required_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoRequiredInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_required_int_channel =
      fl_basic_message_channel_new(messenger, echo_required_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_required_int_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_all_nullable_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAllNullableTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_nullable_types_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_all_nullable_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_all_nullable_types_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_all_nullable_types_without_recursion_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAllNullableTypesWithoutRecursion%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger, echo_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_nullable_types_without_recursion_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* extract_nested_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "extractNestedNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) extract_nested_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   extract_nested_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      extract_nested_nullable_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* create_nested_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "createNestedNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) create_nested_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   create_nested_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      create_nested_nullable_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* send_multiple_nullable_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "sendMultipleNullableTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) send_multiple_nullable_types_channel =
      fl_basic_message_channel_new(messenger,
                                   send_multiple_nullable_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      send_multiple_nullable_types_channel, nullptr, nullptr, nullptr);
  g_autofree gchar*
      send_multiple_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "sendMultipleNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      send_multiple_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              send_multiple_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      send_multiple_nullable_types_without_recursion_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* echo_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_int_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_int_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_double_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_double_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_bool_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_bool_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_bool_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_string_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_string_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_uint8_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_object_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_object_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_object_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_list_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_enum_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_class_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_enum_list_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_enum_list_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_enum_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_class_list_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_class_list_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_class_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_map_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_string_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_int_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_enum_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_class_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_string_map_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_string_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_string_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_non_null_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_int_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_non_null_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_enum_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoNullableNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_class_map_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_class_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_class_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_enum_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_another_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAnotherNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_another_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_nullable_enum_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_optional_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoOptionalNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_optional_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_optional_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_optional_nullable_int_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_named_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoNamedNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_named_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_named_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_named_nullable_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* noop_async_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "noopAsync%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_async_channel =
      fl_basic_message_channel_new(messenger, noop_async_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(noop_async_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_async_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_int_channel =
      fl_basic_message_channel_new(messenger, echo_async_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_int_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_async_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_double_channel =
      fl_basic_message_channel_new(messenger, echo_async_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_double_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_bool_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_bool_channel =
      fl_basic_message_channel_new(messenger, echo_async_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_bool_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_async_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_string_channel =
      fl_basic_message_channel_new(messenger, echo_async_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_string_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_uint8_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_object_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_object_channel =
      fl_basic_message_channel_new(messenger, echo_async_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_object_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_list_channel =
      fl_basic_message_channel_new(messenger, echo_async_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_list_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_async_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_list_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_enum_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_class_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_async_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_string_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_int_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_int_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_enum_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_class_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_class_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_enum_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_another_async_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAnotherAsyncEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_async_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_another_async_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_another_async_enum_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* throw_async_error_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwAsyncError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_error_channel =
      fl_basic_message_channel_new(messenger, throw_async_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(throw_async_error_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* throw_async_error_from_void_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwAsyncErrorFromVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_error_from_void_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_async_error_from_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_async_error_from_void_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* throw_async_flutter_error_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "throwAsyncFlutterError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_flutter_error_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_async_flutter_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_async_flutter_error_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_all_types_channel =
      fl_basic_message_channel_new(messenger, echo_async_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_all_types_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_modern_async_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoModernAsyncAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_modern_async_all_types_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_modern_async_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_modern_async_all_types_and_not_throw_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoModernAsyncAllTypesAndNotThrow%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_all_types_and_not_throw_channel =
          fl_basic_message_channel_new(
              messenger, echo_modern_async_all_types_and_not_throw_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_and_not_throw_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* echo_modern_async_all_types_and_throw_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoModernAsyncAllTypesAndThrow%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_all_types_and_throw_channel =
          fl_basic_message_channel_new(
              messenger, echo_modern_async_all_types_and_throw_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_and_throw_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_async_nullable_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, echo_async_nullable_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_all_nullable_types_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* echo_modern_async_nullable_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoModernAsyncNullableAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_nullable_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger,
              echo_modern_async_nullable_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_nullable_all_nullable_types_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar*
      echo_async_nullable_all_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "echoAsyncNullableAllNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_async_nullable_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              echo_async_nullable_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_all_nullable_types_without_recursion_channel, nullptr,
      nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_nullable_int_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_double_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_double_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_bool_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_nullable_bool_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_uint8_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableUint8List%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_uint8_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_object_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_object_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_object_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_nullable_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_enum_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_class_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_nullable_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_string_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_int_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_enum_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAsyncNullableClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_class_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_nullable_enum_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_another_async_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "echoAnotherAsyncNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_async_nullable_enum_channel =
      fl_basic_message_channel_new(
          messenger, echo_another_async_nullable_enum_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_async_nullable_enum_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* default_is_main_thread_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "defaultIsMainThread%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) default_is_main_thread_channel =
      fl_basic_message_channel_new(messenger,
                                   default_is_main_thread_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(default_is_main_thread_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* task_queue_is_background_thread_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "taskQueueIsBackgroundThread%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) task_queue_is_background_thread_channel =
      fl_basic_message_channel_new(messenger,
                                   task_queue_is_background_thread_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      task_queue_is_background_thread_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_noop_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterNoop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_noop_channel =
      fl_basic_message_channel_new(messenger, call_flutter_noop_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_noop_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_throw_error_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterThrowError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_throw_error_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_throw_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_throw_error_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_throw_error_from_void_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterThrowErrorFromVoid%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_throw_error_from_void_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_throw_error_from_void_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_throw_error_from_void_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_all_types_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_types_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_nullable_types_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_send_multiple_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterSendMultipleNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_send_multiple_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_send_multiple_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_send_multiple_nullable_types_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar*
      call_flutter_echo_all_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "callFlutterEchoAllNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_nullable_types_without_recursion_channel, nullptr,
      nullptr, nullptr);
  g_autofree gchar*
      call_flutter_send_multiple_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "callFlutterSendMultipleNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_send_multiple_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_send_multiple_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_send_multiple_nullable_types_without_recursion_channel,
      nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_bool_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_bool_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_int_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_int_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_int_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_double_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_double_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_double_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_string_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_string_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_string_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_uint8_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_enum_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_class_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_enum_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_enum_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_class_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_class_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_string_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_int_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_enum_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_class_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_string_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_string_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_non_null_int_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_non_null_int_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_int_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_non_null_enum_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_non_null_enum_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_enum_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_class_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_class_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_enum_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_enum_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_another_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoAnotherEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_another_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_another_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_another_enum_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_bool_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableBool%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_bool_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_int_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableInt%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_int_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_double_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableDouble%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_double_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_double_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_double_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_string_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_string_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_uint8_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableUint8List%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_uint8_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_uint8_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_uint8_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_enum_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_class_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_class_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_enum_list_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_enum_list_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar*
      call_flutter_echo_nullable_non_null_class_list_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "callFlutterEchoNullableNonNullClassList%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_class_list_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_class_list_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_echo_nullable_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_string_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_string_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_int_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_int_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_int_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_enum_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_enum_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_class_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_class_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar*
      call_flutter_echo_nullable_non_null_string_map_channel_name =
          g_strdup_printf(
              "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
              "callFlutterEchoNullableNonNullStringMap%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_string_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_string_map_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_echo_nullable_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_int_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_int_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_int_map_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_echo_nullable_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_enum_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_enum_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_enum_map_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_echo_nullable_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_class_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_class_map_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_echo_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_another_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterEchoAnotherNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_another_nullable_enum_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_another_nullable_enum_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_another_nullable_enum_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_small_api_echo_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golub.golub_integration_tests.HostIntegrationCoreApi."
          "callFlutterSmallApiEchoString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_small_api_echo_string_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_small_api_echo_string_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_small_api_echo_string_channel, nullptr, nullptr, nullptr);
}

void core_tests_golub_test_host_integration_core_api_respond_noop_async(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse) response =
      core_tests_golub_test_host_integration_core_api_noop_async_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "noopAsync", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_noop_async(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiNoopAsyncResponse) response =
      core_tests_golub_test_host_integration_core_api_noop_async_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "noopAsync", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_int(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    int64_t return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_int_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncInt", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_int(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_int_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncInt", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_double(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    double return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_double_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncDouble", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_double(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncDoubleResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_double_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncDouble", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_bool(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    gboolean return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_bool_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncBool", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_bool(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncBoolResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_bool_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncBool", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_string(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_string_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncString", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_string(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_string_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncString", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_uint8_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_new(
          return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncUint8List", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_uint8_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncUint8ListResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_uint8_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncUint8List", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_object(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_object_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncObject", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_object(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncObjectResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_object_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncObject", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncListResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumListResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_enum_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassListResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_class_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncMapResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncStringMapResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_string_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncIntMapResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_int_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumMapResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_enum_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncClassMapResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_class_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAnEnum return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_enum_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncEnumResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_enum_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_another_async_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAnotherEnum return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherAsyncEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_another_async_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_another_async_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherAsyncEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_throw_async_error(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse) response =
      core_tests_golub_test_host_integration_core_api_throw_async_error_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncError", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_throw_async_error(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorResponse) response =
      core_tests_golub_test_host_integration_core_api_throw_async_error_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncError", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_throw_async_error_from_void(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse) response =
      core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncErrorFromVoid", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_throw_async_error_from_void(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse)
      response =
          core_tests_golub_test_host_integration_core_api_throw_async_error_from_void_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncErrorFromVoid", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_throw_async_flutter_error(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse)
      response =
          core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncFlutterError", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_throw_async_flutter_error(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse)
      response =
          core_tests_golub_test_host_integration_core_api_throw_async_flutter_error_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncFlutterError", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_all_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncAllTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_all_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncAllTypesResponse) response =
      core_tests_golub_test_host_integration_core_api_echo_async_all_types_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncAllTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_modern_async_all_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_modern_async_all_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_modern_async_all_types_and_not_throw(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypesAndNotThrow", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_modern_async_all_types_and_not_throw(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypesAndNotThrow", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_modern_async_all_types_and_throw(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypesAndThrow", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_modern_async_all_types_and_throw(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypesAndThrow", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_all_nullable_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_all_nullable_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_modern_async_nullable_all_nullable_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncNullableAllNullableTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_modern_async_nullable_all_nullable_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncNullableAllNullableTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_all_nullable_types_without_recursion(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_all_nullable_types_without_recursion(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_int(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    int64_t* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableInt", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_int(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableInt", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_double(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    double* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableDouble", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_double(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_double_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableDouble", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_bool(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    gboolean* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableBool", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_bool(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_bool_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableBool", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_string(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableString", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_string(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableString", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_uint8_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableUint8List", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_uint8_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableUint8List", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_object(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableObject", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_object(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_object_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableObject", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_int_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_async_nullable_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAnEnum* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_async_nullable_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_async_nullable_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_echo_another_async_nullable_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAnotherEnum* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherAsyncNullableEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_echo_another_async_nullable_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_echo_another_async_nullable_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherAsyncNullableEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_noop(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse) response =
      core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterNoop", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_noop(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterNoopResponse) response =
      core_tests_golub_test_host_integration_core_api_call_flutter_noop_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterNoop", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_throw_error(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowError", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_throw_error(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowError", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_throw_error_from_void(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowErrorFromVoid", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_throw_error_from_void(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowErrorFromVoid", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_all_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_all_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_all_nullable_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_all_nullable_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_send_multiple_nullable_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_send_multiple_nullable_types(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypes", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_all_nullable_types_without_recursion(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_all_nullable_types_without_recursion(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_send_multiple_nullable_types_without_recursion(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_send_multiple_nullable_types_without_recursion(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_bool(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    gboolean return_value) {
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoBool", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_bool(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoBoolResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_bool_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoBool", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_int(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    int64_t return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse) response =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoInt", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_int(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntResponse) response =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoInt", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_double(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    double return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoDouble", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_double(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_double_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoDouble", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_string(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoString", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_string(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoString", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_uint8_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoUint8List", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_uint8_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoUint8List", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_non_null_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_non_null_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse) response =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoMapResponse) response =
      core_tests_golub_test_host_integration_core_api_call_flutter_echo_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_int_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_non_null_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_non_null_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_non_null_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_non_null_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAnEnum return_value) {
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_another_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAnotherEnum return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAnotherEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_another_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAnotherEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_bool(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    gboolean* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableBool", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_bool(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableBool", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_int(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    int64_t* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableInt", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_int(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableInt", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_double(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    double* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableDouble", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_double(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableDouble", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_string(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableString", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_string(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableString", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_uint8_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableUint8List", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_uint8_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableUint8List", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_enum_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullEnumList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_class_list(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullClassList", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_string_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullStringMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_int_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullIntMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_enum_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullEnumMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_class_map(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullClassMap", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_nullable_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAnEnum* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_echo_another_nullable_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubTestAnotherEnum* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAnotherNullableEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_echo_another_nullable_enum(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAnotherNullableEnum", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_call_flutter_small_api_echo_string(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSmallApiEchoString", error->message);
  }
}

void core_tests_golub_test_host_integration_core_api_respond_error_call_flutter_small_api_echo_string(
    CoreTestsGolubTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse)
      response =
          core_tests_golub_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSmallApiEchoString", error->message);
  }
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  gchar* suffix;
};

G_DEFINE_TYPE(CoreTestsGolubTestFlutterIntegrationCoreApi,
              core_tests_golub_test_flutter_integration_core_api, G_TYPE_OBJECT)

static void core_tests_golub_test_flutter_integration_core_api_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API(object);
  g_clear_object(&self->messenger);
  g_clear_pointer(&self->suffix, g_free);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_flutter_integration_core_api_init(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self) {}

static void core_tests_golub_test_flutter_integration_core_api_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_dispose;
}

CoreTestsGolubTestFlutterIntegrationCoreApi*
core_tests_golub_test_flutter_integration_core_api_new(
    FlBinaryMessenger* messenger, const gchar* suffix) {
  CoreTestsGolubTestFlutterIntegrationCoreApi* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API(g_object_new(
          core_tests_golub_test_flutter_integration_core_api_get_type(),
          nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  return self;
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse,
              core_tests_golub_test_flutter_integration_core_api_noop_response,
              G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_noop_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_noop_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_noop_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_noop_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_noop_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse*
core_tests_golub_test_flutter_integration_core_api_noop_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(g_object_new(
          core_tests_golub_test_flutter_integration_core_api_noop_response_get_type(),
          nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_noop_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_noop_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_noop_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_noop_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_noop_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_noop_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_noop_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

static void core_tests_golub_test_flutter_integration_core_api_noop_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_noop(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi.noop%"
      "s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_noop_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiNoopResponse*
core_tests_golub_test_flutter_integration_core_api_noop_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_noop_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse,
    core_tests_golub_test_flutter_integration_core_api_throw_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_throw_error_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_throw_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_throw_error_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_throw_error_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_throw_error_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse*
core_tests_golub_test_flutter_integration_core_api_throw_error_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_throw_error_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_throw_error_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_throw_error_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_throw_error_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_throw_error_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_throw_error_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_throw_error_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_throw_error_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_throw_error_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_throw_error_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void core_tests_golub_test_flutter_integration_core_api_throw_error_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_throw_error(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "throwError%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_throw_error_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorResponse*
core_tests_golub_test_flutter_integration_core_api_throw_error_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_throw_error_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse,
    core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

static void
core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_throw_error_from_void(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "throwErrorFromVoid%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_throw_error_from_void_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse*
core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubTestAllTypes*
core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_is_error(
          self));
  return CORE_TESTS_GOLUB_TEST_ALL_TYPES(
      fl_value_get_custom_value_object(self->return_value));
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_types_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_all_types(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubTestAllTypes* everything, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, fl_value_new_custom_object(core_tests_golub_test_all_types_type_id,
                                       G_OBJECT(everything)));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoAllTypes%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_all_types_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllTypesResponse*
core_tests_golub_test_flutter_integration_core_api_echo_all_types_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_all_types_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubTestAllNullableTypes*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
      fl_value_get_custom_value_object(self->return_value));
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubTestAllNullableTypes* everything, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, everything != nullptr
                ? fl_value_new_custom_object(
                      core_tests_golub_test_all_nullable_types_type_id,
                      G_OBJECT(everything))
                : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoAllNullableTypes%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse,
    core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
      self =
          CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubTestAllNullableTypes*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_is_error(
          self));
  return CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES(
      fl_value_get_custom_value_object(self->return_value));
}

static void
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    const gchar* a_nullable_string, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_nullable_bool != nullptr
                                 ? fl_value_new_bool(*a_nullable_bool)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_int != nullptr
                                 ? fl_value_new_int(*a_nullable_int)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_string != nullptr
                                 ? fl_value_new_string(a_nullable_string)
                                 : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "sendMultipleNullableTypes%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubTestAllNullableTypesWithoutRecursion*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
      fl_value_get_custom_value_object(self->return_value));
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubTestAllNullableTypesWithoutRecursion* everything,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args,
      everything != nullptr
          ? fl_value_new_custom_object(
                core_tests_golub_test_all_nullable_types_without_recursion_type_id,
                G_OBJECT(everything))
          : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoAllNullableTypesWithoutRecursion%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubTestAllNullableTypesWithoutRecursion*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_is_error(
          self));
  return CORE_TESTS_GOLUB_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
      fl_value_get_custom_value_object(self->return_value));
}

static void
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    const gchar* a_nullable_string, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_nullable_bool != nullptr
                                 ? fl_value_new_bool(*a_nullable_bool)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_int != nullptr
                                 ? fl_value_new_int(*a_nullable_int)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_string != nullptr
                                 ? fl_value_new_string(a_nullable_string)
                                 : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "sendMultipleNullableTypesWithoutRecursion%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_bool_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_bool_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_bool_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse*
core_tests_golub_test_flutter_integration_core_api_echo_bool_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_bool_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_bool_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_bool_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_bool_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_bool_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_bool_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_bool_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_bool_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_bool_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          self),
      FALSE);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_bool_response_is_error(
          self));
  return fl_value_get_bool(self->return_value);
}

static void core_tests_golub_test_flutter_integration_core_api_echo_bool_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_bool(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, gboolean a_bool,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_bool(a_bool));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoBool%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_bool_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoBoolResponse*
core_tests_golub_test_flutter_integration_core_api_echo_bool_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_bool_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_int_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_int_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_int_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_int_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse*
core_tests_golub_test_flutter_integration_core_api_echo_int_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(g_object_new(
          core_tests_golub_test_flutter_integration_core_api_echo_int_response_get_type(),
          nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_int_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_int_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_int_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_int_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_int_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_int_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_int_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

int64_t
core_tests_golub_test_flutter_integration_core_api_echo_int_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          self),
      0);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_int_response_is_error(
          self));
  return fl_value_get_int(self->return_value);
}

static void core_tests_golub_test_flutter_integration_core_api_echo_int_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_int(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, int64_t an_int,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_int(an_int));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoInt%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_int_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntResponse*
core_tests_golub_test_flutter_integration_core_api_echo_int_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_int_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_double_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_double_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_double_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_double_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse*
core_tests_golub_test_flutter_integration_core_api_echo_double_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_double_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_double_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_double_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_double_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_double_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_double_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_double_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_double_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

double
core_tests_golub_test_flutter_integration_core_api_echo_double_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          self),
      0.0);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_double_response_is_error(
          self));
  return fl_value_get_float(self->return_value);
}

static void core_tests_golub_test_flutter_integration_core_api_echo_double_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_double(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, double a_double,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_float(a_double));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoDouble%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_double_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoDoubleResponse*
core_tests_golub_test_flutter_integration_core_api_echo_double_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_double_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_string_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_string_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_string_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse*
core_tests_golub_test_flutter_integration_core_api_echo_string_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_string_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_string_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_string_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_string_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_string_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_string_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_string_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(self->return_value);
}

static void core_tests_golub_test_flutter_integration_core_api_echo_string_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_string(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_string(a_string));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoString%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_string_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringResponse*
core_tests_golub_test_flutter_integration_core_api_echo_string_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_string_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const uint8_t*
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse* self,
    size_t* return_value_length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_is_error(
          self));
  if (return_value_length != nullptr) {
    *return_value_length = fl_value_get_length(self->return_value);
  }
  return fl_value_get_uint8_list(self->return_value);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_uint8_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, const uint8_t* list,
    size_t list_length, GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_uint8_list(list, list_length));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoUint8List%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoUint8ListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_uint8_list_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_list_response_is_error(
          self));
  return self->return_value;
}

static void core_tests_golub_test_flutter_integration_core_api_echo_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(list));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_list_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_list_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_enum_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* enum_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(enum_list));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoEnumList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_enum_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_enum_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_enum_list_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_class_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_class_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* class_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(class_list));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoClassList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_class_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_class_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_class_list_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* enum_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(enum_list));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNonNullEnumList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_list_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* class_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(class_list));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNonNullClassList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_list_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(g_object_new(
          core_tests_golub_test_flutter_integration_core_api_echo_map_response_get_type(),
          nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_map_response_is_error(
          self));
  return self->return_value;
}

static void core_tests_golub_test_flutter_integration_core_api_echo_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_map_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_string_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_string_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* string_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(string_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoStringMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_string_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoStringMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_string_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_string_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_is_error(
          self));
  return self->return_value;
}

static void core_tests_golub_test_flutter_integration_core_api_echo_int_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_int_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* int_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(int_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoIntMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_int_map_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoIntMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_int_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_int_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_is_error(
          self));
  return self->return_value;
}

static void core_tests_golub_test_flutter_integration_core_api_echo_enum_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_enum_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* enum_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(enum_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoEnumMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_enum_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_enum_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_enum_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_class_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_class_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* class_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(class_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoClassMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_class_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoClassMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_class_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_class_map_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* string_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(string_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNonNullStringMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_non_null_string_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* int_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(int_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNonNullIntMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_non_null_int_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* enum_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(enum_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNonNullEnumMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_non_null_enum_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* class_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(class_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNonNullClassMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_non_null_class_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_enum_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_enum_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_enum_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse*
core_tests_golub_test_flutter_integration_core_api_echo_enum_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_enum_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_enum_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_enum_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_enum_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_enum_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_enum_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubTestAnEnum
core_tests_golub_test_flutter_integration_core_api_echo_enum_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          self),
      static_cast<CoreTestsGolubTestAnEnum>(0));
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_enum_response_is_error(
          self));
  return static_cast<CoreTestsGolubTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(
          fl_value_get_custom_value(self->return_value)))));
}

static void core_tests_golub_test_flutter_integration_core_api_echo_enum_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_enum(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubTestAnEnum an_enum, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                fl_value_new_int(an_enum),
                                (GDestroyNotify)fl_value_unref));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoEnum%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_enum_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoEnumResponse*
core_tests_golub_test_flutter_integration_core_api_echo_enum_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_enum_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse*
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubTestAnotherEnum
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          self),
      static_cast<CoreTestsGolubTestAnotherEnum>(0));
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_is_error(
          self));
  return static_cast<CoreTestsGolubTestAnotherEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(
          fl_value_get_custom_value(self->return_value)))));
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_another_enum(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubTestAnotherEnum another_enum, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                                fl_value_new_int(another_enum),
                                (GDestroyNotify)fl_value_unref));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoAnotherEnum%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_another_enum_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherEnumResponse*
core_tests_golub_test_flutter_integration_core_api_echo_another_enum_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_another_enum_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
  gboolean return_value_;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse* self) {
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

gboolean*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  self->return_value_ = fl_value_get_bool(self->return_value);
  return &self->return_value_;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, gboolean* a_bool,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_bool != nullptr ? fl_value_new_bool(*a_bool)
                                               : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableBool%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableBoolResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_bool_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
  int64_t return_value_;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

int64_t*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  self->return_value_ = fl_value_get_int(self->return_value);
  return &self->return_value_;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_int(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, int64_t* an_int,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, an_int != nullptr ? fl_value_new_int(*an_int)
                                               : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableInt%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
  double return_value_;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

double*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  self->return_value_ = fl_value_get_float(self->return_value);
  return &self->return_value_;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_double(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, double* a_double,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_double != nullptr ? fl_value_new_float(*a_double)
                                                 : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableDouble%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_double_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return fl_value_get_string(self->return_value);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_string(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_string != nullptr ? fl_value_new_string(a_string)
                                                 : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableString%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const uint8_t*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self,
    size_t* return_value_length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  if (return_value_length != nullptr) {
    *return_value_length = fl_value_get_length(self->return_value);
  }
  return fl_value_get_uint8_list(self->return_value);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, const uint8_t* list,
    size_t list_length, GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, list != nullptr
                                 ? fl_value_new_uint8_list(list, list_length)
                                 : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableUint8List%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_uint8_list_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse* self) {
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, list != nullptr ? fl_value_ref(list) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_list_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* enum_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, enum_list != nullptr ? fl_value_ref(enum_list)
                                                  : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableEnumList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_list_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* class_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, class_list != nullptr ? fl_value_ref(class_list)
                                                   : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableClassList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_list_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
      self =
          CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* enum_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, enum_list != nullptr ? fl_value_ref(enum_list)
                                                  : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableNonNullEnumList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
      self =
          CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
      self = CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* class_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, class_list != nullptr ? fl_value_ref(class_list)
                                                   : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableNonNullClassList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, map != nullptr ? fl_value_ref(map) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_map_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* string_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, string_map != nullptr ? fl_value_ref(string_map)
                                                   : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableStringMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_string_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* int_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, int_map != nullptr ? fl_value_ref(int_map) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableIntMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_int_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* enum_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, enum_map != nullptr ? fl_value_ref(enum_map) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableEnumMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_map_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* class_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, class_map != nullptr ? fl_value_ref(class_map)
                                                  : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableClassMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_class_map_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
      self = CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* string_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, string_map != nullptr ? fl_value_ref(string_map)
                                                   : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableNonNullStringMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* int_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, int_map != nullptr ? fl_value_ref(int_map) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableNonNullIntMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* enum_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, enum_map != nullptr ? fl_value_ref(enum_map) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableNonNullEnumMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
      self =
          CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, FlValue* class_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, class_map != nullptr ? fl_value_ref(class_map)
                                                  : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableNonNullClassMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
  CoreTestsGolubTestAnEnum return_value_;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse* self) {
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubTestAnEnum*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  self->return_value_ = static_cast<CoreTestsGolubTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(
          fl_value_get_custom_value(self->return_value)))));
  return &self->return_value_;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubTestAnEnum* an_enum, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, an_enum != nullptr
                ? fl_value_new_custom(core_tests_golub_test_an_enum_type_id,
                                      fl_value_new_int(*an_enum),
                                      (GDestroyNotify)fl_value_unref)
                : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoNullableEnum%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoNullableEnumResponse*
core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_nullable_enum_response_new(
      response);
}

struct
    _CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
  CoreTestsGolubTestAnotherEnum return_value_;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubTestAnotherEnum*
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  self->return_value_ = static_cast<CoreTestsGolubTestAnotherEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(
          fl_value_get_custom_value(self->return_value)))));
  return &self->return_value_;
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubTestAnotherEnum* another_enum, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args,
      another_enum != nullptr
          ? fl_value_new_custom(core_tests_golub_test_another_enum_type_id,
                                fl_value_new_int(*another_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoAnotherNullableEnum%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_another_nullable_enum_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse,
    core_tests_golub_test_flutter_integration_core_api_noop_async_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_noop_async_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_noop_async_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_noop_async_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_noop_async_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_noop_async_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse*
core_tests_golub_test_flutter_integration_core_api_noop_async_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_noop_async_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_noop_async_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_noop_async_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_noop_async_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_noop_async_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_noop_async_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_noop_async_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_noop_async_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

static void core_tests_golub_test_flutter_integration_core_api_noop_async_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_noop_async(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "noopAsync%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_noop_async_cb, task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiNoopAsyncResponse*
core_tests_golub_test_flutter_integration_core_api_noop_async_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_noop_async_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse,
    core_tests_golub_test_flutter_integration_core_api_echo_async_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse* self) {}

static void
core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_class_init(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_dispose;
}

static CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse*
core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          g_object_new(
              core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_is_error(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_get_error_code(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_get_error_message(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_get_error_details(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const gchar*
core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_get_return_value(
    CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_is_error(
          self));
  return fl_value_get_string(self->return_value);
}

static void
core_tests_golub_test_flutter_integration_core_api_echo_async_string_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_integration_core_api_echo_async_string(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_string(a_string));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterIntegrationCoreApi."
      "echoAsyncString%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_integration_core_api_echo_async_string_cb,
      task);
}

CoreTestsGolubTestFlutterIntegrationCoreApiEchoAsyncStringResponse*
core_tests_golub_test_flutter_integration_core_api_echo_async_string_finish(
    CoreTestsGolubTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_integration_core_api_echo_async_string_response_new(
      response);
}

struct _CoreTestsGolubTestHostTrivialApiNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostTrivialApiNoopResponse,
              core_tests_golub_test_host_trivial_api_noop_response,
              G_TYPE_OBJECT)

static void core_tests_golub_test_host_trivial_api_noop_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostTrivialApiNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_TRIVIAL_API_NOOP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_trivial_api_noop_response_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_host_trivial_api_noop_response_init(
    CoreTestsGolubTestHostTrivialApiNoopResponse* self) {}

static void core_tests_golub_test_host_trivial_api_noop_response_class_init(
    CoreTestsGolubTestHostTrivialApiNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_trivial_api_noop_response_dispose;
}

CoreTestsGolubTestHostTrivialApiNoopResponse*
core_tests_golub_test_host_trivial_api_noop_response_new() {
  CoreTestsGolubTestHostTrivialApiNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_TRIVIAL_API_NOOP_RESPONSE(g_object_new(
          core_tests_golub_test_host_trivial_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

CoreTestsGolubTestHostTrivialApiNoopResponse*
core_tests_golub_test_host_trivial_api_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostTrivialApiNoopResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_TRIVIAL_API_NOOP_RESPONSE(g_object_new(
          core_tests_golub_test_host_trivial_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostTrivialApi {
  GObject parent_instance;

  const CoreTestsGolubTestHostTrivialApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostTrivialApi,
              core_tests_golub_test_host_trivial_api, G_TYPE_OBJECT)

static void core_tests_golub_test_host_trivial_api_dispose(GObject* object) {
  CoreTestsGolubTestHostTrivialApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_TRIVIAL_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(core_tests_golub_test_host_trivial_api_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_host_trivial_api_init(
    CoreTestsGolubTestHostTrivialApi* self) {}

static void core_tests_golub_test_host_trivial_api_class_init(
    CoreTestsGolubTestHostTrivialApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_trivial_api_dispose;
}

static CoreTestsGolubTestHostTrivialApi*
core_tests_golub_test_host_trivial_api_new(
    const CoreTestsGolubTestHostTrivialApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func) {
  CoreTestsGolubTestHostTrivialApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_TRIVIAL_API(g_object_new(
          core_tests_golub_test_host_trivial_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void core_tests_golub_test_host_trivial_api_noop_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostTrivialApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_TRIVIAL_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostTrivialApiNoopResponse) response =
      self->vtable->noop(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostTrivialApi", "noop");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostTrivialApi", "noop",
              error->message);
  }
}

void core_tests_golub_test_host_trivial_api_set_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix,
    const CoreTestsGolubTestHostTrivialApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(CoreTestsGolubTestHostTrivialApi) api_data =
      core_tests_golub_test_host_trivial_api_new(vtable, user_data,
                                                 user_data_free_func);

  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  g_autofree gchar* noop_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostTrivialApi.noop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_channel = fl_basic_message_channel_new(
      messenger, noop_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      noop_channel, core_tests_golub_test_host_trivial_api_noop_cb,
      g_object_ref(api_data), g_object_unref);
}

void core_tests_golub_test_host_trivial_api_clear_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  g_autofree gchar* noop_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostTrivialApi.noop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_channel = fl_basic_message_channel_new(
      messenger, noop_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(noop_channel, nullptr, nullptr,
                                               nullptr);
}

struct _CoreTestsGolubTestHostSmallApiResponseHandle {
  GObject parent_instance;

  FlBasicMessageChannel* channel;
  FlBasicMessageChannelResponseHandle* response_handle;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostSmallApiResponseHandle,
              core_tests_golub_test_host_small_api_response_handle,
              G_TYPE_OBJECT)

static void core_tests_golub_test_host_small_api_response_handle_dispose(
    GObject* object) {
  CoreTestsGolubTestHostSmallApiResponseHandle* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API_RESPONSE_HANDLE(object);
  g_clear_object(&self->channel);
  g_clear_object(&self->response_handle);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_small_api_response_handle_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_host_small_api_response_handle_init(
    CoreTestsGolubTestHostSmallApiResponseHandle* self) {}

static void core_tests_golub_test_host_small_api_response_handle_class_init(
    CoreTestsGolubTestHostSmallApiResponseHandleClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_small_api_response_handle_dispose;
}

static CoreTestsGolubTestHostSmallApiResponseHandle*
core_tests_golub_test_host_small_api_response_handle_new(
    FlBasicMessageChannel* channel,
    FlBasicMessageChannelResponseHandle* response_handle) {
  CoreTestsGolubTestHostSmallApiResponseHandle* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API_RESPONSE_HANDLE(g_object_new(
          core_tests_golub_test_host_small_api_response_handle_get_type(),
          nullptr));
  self->channel = FL_BASIC_MESSAGE_CHANNEL(g_object_ref(channel));
  self->response_handle =
      FL_BASIC_MESSAGE_CHANNEL_RESPONSE_HANDLE(g_object_ref(response_handle));
  return self;
}

G_DECLARE_FINAL_TYPE(CoreTestsGolubTestHostSmallApiEchoResponse,
                     core_tests_golub_test_host_small_api_echo_response,
                     CORE_TESTS_GOLUB_TEST, HOST_SMALL_API_ECHO_RESPONSE,
                     GObject)

struct _CoreTestsGolubTestHostSmallApiEchoResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostSmallApiEchoResponse,
              core_tests_golub_test_host_small_api_echo_response, G_TYPE_OBJECT)

static void core_tests_golub_test_host_small_api_echo_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostSmallApiEchoResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API_ECHO_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_small_api_echo_response_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_host_small_api_echo_response_init(
    CoreTestsGolubTestHostSmallApiEchoResponse* self) {}

static void core_tests_golub_test_host_small_api_echo_response_class_init(
    CoreTestsGolubTestHostSmallApiEchoResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_small_api_echo_response_dispose;
}

static CoreTestsGolubTestHostSmallApiEchoResponse*
core_tests_golub_test_host_small_api_echo_response_new(
    const gchar* return_value) {
  CoreTestsGolubTestHostSmallApiEchoResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API_ECHO_RESPONSE(g_object_new(
          core_tests_golub_test_host_small_api_echo_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsGolubTestHostSmallApiEchoResponse*
core_tests_golub_test_host_small_api_echo_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostSmallApiEchoResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API_ECHO_RESPONSE(g_object_new(
          core_tests_golub_test_host_small_api_echo_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(CoreTestsGolubTestHostSmallApiVoidVoidResponse,
                     core_tests_golub_test_host_small_api_void_void_response,
                     CORE_TESTS_GOLUB_TEST, HOST_SMALL_API_VOID_VOID_RESPONSE,
                     GObject)

struct _CoreTestsGolubTestHostSmallApiVoidVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostSmallApiVoidVoidResponse,
              core_tests_golub_test_host_small_api_void_void_response,
              G_TYPE_OBJECT)

static void core_tests_golub_test_host_small_api_void_void_response_dispose(
    GObject* object) {
  CoreTestsGolubTestHostSmallApiVoidVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API_VOID_VOID_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_host_small_api_void_void_response_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_host_small_api_void_void_response_init(
    CoreTestsGolubTestHostSmallApiVoidVoidResponse* self) {}

static void core_tests_golub_test_host_small_api_void_void_response_class_init(
    CoreTestsGolubTestHostSmallApiVoidVoidResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_host_small_api_void_void_response_dispose;
}

static CoreTestsGolubTestHostSmallApiVoidVoidResponse*
core_tests_golub_test_host_small_api_void_void_response_new() {
  CoreTestsGolubTestHostSmallApiVoidVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API_VOID_VOID_RESPONSE(g_object_new(
          core_tests_golub_test_host_small_api_void_void_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsGolubTestHostSmallApiVoidVoidResponse*
core_tests_golub_test_host_small_api_void_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubTestHostSmallApiVoidVoidResponse* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API_VOID_VOID_RESPONSE(g_object_new(
          core_tests_golub_test_host_small_api_void_void_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubTestHostSmallApi {
  GObject parent_instance;

  const CoreTestsGolubTestHostSmallApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(CoreTestsGolubTestHostSmallApi,
              core_tests_golub_test_host_small_api, G_TYPE_OBJECT)

static void core_tests_golub_test_host_small_api_dispose(GObject* object) {
  CoreTestsGolubTestHostSmallApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(core_tests_golub_test_host_small_api_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_host_small_api_init(
    CoreTestsGolubTestHostSmallApi* self) {}

static void core_tests_golub_test_host_small_api_class_init(
    CoreTestsGolubTestHostSmallApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = core_tests_golub_test_host_small_api_dispose;
}

static CoreTestsGolubTestHostSmallApi* core_tests_golub_test_host_small_api_new(
    const CoreTestsGolubTestHostSmallApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func) {
  CoreTestsGolubTestHostSmallApi* self = CORE_TESTS_GOLUB_TEST_HOST_SMALL_API(
      g_object_new(core_tests_golub_test_host_small_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void core_tests_golub_test_host_small_api_echo_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostSmallApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubTestHostSmallApiResponseHandle) handle =
      core_tests_golub_test_host_small_api_response_handle_new(channel,
                                                               response_handle);
  self->vtable->echo(a_string, handle, self->user_data);
}

static void core_tests_golub_test_host_small_api_void_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubTestHostSmallApi* self =
      CORE_TESTS_GOLUB_TEST_HOST_SMALL_API(user_data);

  if (self->vtable == nullptr || self->vtable->void_void == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubTestHostSmallApiResponseHandle) handle =
      core_tests_golub_test_host_small_api_response_handle_new(channel,
                                                               response_handle);
  self->vtable->void_void(handle, self->user_data);
}

void core_tests_golub_test_host_small_api_set_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix,
    const CoreTestsGolubTestHostSmallApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(CoreTestsGolubTestHostSmallApi) api_data =
      core_tests_golub_test_host_small_api_new(vtable, user_data,
                                               user_data_free_func);

  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  g_autofree gchar* echo_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostSmallApi.echo%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_channel = fl_basic_message_channel_new(
      messenger, echo_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_channel, core_tests_golub_test_host_small_api_echo_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* void_void_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostSmallApi.voidVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) void_void_channel =
      fl_basic_message_channel_new(messenger, void_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      void_void_channel, core_tests_golub_test_host_small_api_void_void_cb,
      g_object_ref(api_data), g_object_unref);
}

void core_tests_golub_test_host_small_api_clear_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  g_autofree gchar* echo_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostSmallApi.echo%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_channel = fl_basic_message_channel_new(
      messenger, echo_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_channel, nullptr, nullptr,
                                               nullptr);
  g_autofree gchar* void_void_channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.HostSmallApi.voidVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) void_void_channel =
      fl_basic_message_channel_new(messenger, void_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(void_void_channel, nullptr,
                                               nullptr, nullptr);
}

void core_tests_golub_test_host_small_api_respond_echo(
    CoreTestsGolubTestHostSmallApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(CoreTestsGolubTestHostSmallApiEchoResponse) response =
      core_tests_golub_test_host_small_api_echo_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi", "echo",
              error->message);
  }
}

void core_tests_golub_test_host_small_api_respond_error_echo(
    CoreTestsGolubTestHostSmallApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsGolubTestHostSmallApiEchoResponse) response =
      core_tests_golub_test_host_small_api_echo_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi", "echo",
              error->message);
  }
}

void core_tests_golub_test_host_small_api_respond_void_void(
    CoreTestsGolubTestHostSmallApiResponseHandle* response_handle) {
  g_autoptr(CoreTestsGolubTestHostSmallApiVoidVoidResponse) response =
      core_tests_golub_test_host_small_api_void_void_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi",
              "voidVoid", error->message);
  }
}

void core_tests_golub_test_host_small_api_respond_error_void_void(
    CoreTestsGolubTestHostSmallApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsGolubTestHostSmallApiVoidVoidResponse) response =
      core_tests_golub_test_host_small_api_void_void_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi",
              "voidVoid", error->message);
  }
}

struct _CoreTestsGolubTestFlutterSmallApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  gchar* suffix;
};

G_DEFINE_TYPE(CoreTestsGolubTestFlutterSmallApi,
              core_tests_golub_test_flutter_small_api, G_TYPE_OBJECT)

static void core_tests_golub_test_flutter_small_api_dispose(GObject* object) {
  CoreTestsGolubTestFlutterSmallApi* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_SMALL_API(object);
  g_clear_object(&self->messenger);
  g_clear_pointer(&self->suffix, g_free);
  G_OBJECT_CLASS(core_tests_golub_test_flutter_small_api_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_flutter_small_api_init(
    CoreTestsGolubTestFlutterSmallApi* self) {}

static void core_tests_golub_test_flutter_small_api_class_init(
    CoreTestsGolubTestFlutterSmallApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_small_api_dispose;
}

CoreTestsGolubTestFlutterSmallApi* core_tests_golub_test_flutter_small_api_new(
    FlBinaryMessenger* messenger, const gchar* suffix) {
  CoreTestsGolubTestFlutterSmallApi* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_SMALL_API(g_object_new(
          core_tests_golub_test_flutter_small_api_get_type(), nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  return self;
}

struct _CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse,
    core_tests_golub_test_flutter_small_api_echo_wrapped_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_init(
    CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse* self) {}

static void
core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_class_init(
    CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_dispose;
}

static CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse*
core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(g_object_new(
          core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_get_type(),
          nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_is_error(
    CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_get_error_code(
    CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_get_error_message(
    CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_get_error_details(
    CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubTestTestMessage*
core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_get_return_value(
    CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_is_error(
          self));
  return CORE_TESTS_GOLUB_TEST_TEST_MESSAGE(
      fl_value_get_custom_value_object(self->return_value));
}

static void core_tests_golub_test_flutter_small_api_echo_wrapped_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_small_api_echo_wrapped_list(
    CoreTestsGolubTestFlutterSmallApi* self, CoreTestsGolubTestTestMessage* msg,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, fl_value_new_custom_object(
                core_tests_golub_test_test_message_type_id, G_OBJECT(msg)));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterSmallApi."
      "echoWrappedList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_small_api_echo_wrapped_list_cb, task);
}

CoreTestsGolubTestFlutterSmallApiEchoWrappedListResponse*
core_tests_golub_test_flutter_small_api_echo_wrapped_list_finish(
    CoreTestsGolubTestFlutterSmallApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_small_api_echo_wrapped_list_response_new(
      response);
}

struct _CoreTestsGolubTestFlutterSmallApiEchoStringResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(CoreTestsGolubTestFlutterSmallApiEchoStringResponse,
              core_tests_golub_test_flutter_small_api_echo_string_response,
              G_TYPE_OBJECT)

static void
core_tests_golub_test_flutter_small_api_echo_string_response_dispose(
    GObject* object) {
  CoreTestsGolubTestFlutterSmallApiEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golub_test_flutter_small_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void core_tests_golub_test_flutter_small_api_echo_string_response_init(
    CoreTestsGolubTestFlutterSmallApiEchoStringResponse* self) {}

static void
core_tests_golub_test_flutter_small_api_echo_string_response_class_init(
    CoreTestsGolubTestFlutterSmallApiEchoStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golub_test_flutter_small_api_echo_string_response_dispose;
}

static CoreTestsGolubTestFlutterSmallApiEchoStringResponse*
core_tests_golub_test_flutter_small_api_echo_string_response_new(
    FlValue* response) {
  CoreTestsGolubTestFlutterSmallApiEchoStringResponse* self =
      CORE_TESTS_GOLUB_TEST_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(g_object_new(
          core_tests_golub_test_flutter_small_api_echo_string_response_get_type(),
          nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean core_tests_golub_test_flutter_small_api_echo_string_response_is_error(
    CoreTestsGolubTestFlutterSmallApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golub_test_flutter_small_api_echo_string_response_get_error_code(
    CoreTestsGolubTestFlutterSmallApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_small_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golub_test_flutter_small_api_echo_string_response_get_error_message(
    CoreTestsGolubTestFlutterSmallApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_small_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golub_test_flutter_small_api_echo_string_response_get_error_details(
    CoreTestsGolubTestFlutterSmallApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(self),
      nullptr);
  g_assert(
      core_tests_golub_test_flutter_small_api_echo_string_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const gchar*
core_tests_golub_test_flutter_small_api_echo_string_response_get_return_value(
    CoreTestsGolubTestFlutterSmallApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUB_TEST_IS_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(self),
      nullptr);
  g_assert(
      !core_tests_golub_test_flutter_small_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(self->return_value);
}

static void core_tests_golub_test_flutter_small_api_echo_string_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golub_test_flutter_small_api_echo_string(
    CoreTestsGolubTestFlutterSmallApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_string(a_string));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golub.golub_integration_tests.FlutterSmallApi.echoString%s",
      self->suffix);
  g_autoptr(CoreTestsGolubTestGolubMessageCodec) codec =
      core_tests_golub_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golub_test_flutter_small_api_echo_string_cb, task);
}

CoreTestsGolubTestFlutterSmallApiEchoStringResponse*
core_tests_golub_test_flutter_small_api_echo_string_finish(
    CoreTestsGolubTestFlutterSmallApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golub_test_flutter_small_api_echo_string_response_new(
      response);
}
