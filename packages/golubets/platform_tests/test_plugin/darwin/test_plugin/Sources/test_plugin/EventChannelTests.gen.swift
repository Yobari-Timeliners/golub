// Copyright 2013 The Flutter Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Golubets, do not edit directly.
// See also: https://pub.dev/packages/golubets

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
public final class EventChannelTestsError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  public init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "EventChannelTestsError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let golubetsError = error as? EventChannelTestsError {
    return [
      golubetsError.code,
      golubetsError.message,
      golubetsError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsEventChannelTests(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsEventChannelTests(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsEventChannelTests(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with golubetsets. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashEventChannelTests(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
    for item in valueList { deepHashEventChannelTests(value: item, hasher: &hasher) }
    return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys {
      hasher.combine(key)
      deepHashEventChannelTests(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

public enum EventEnum: Int {
  case one = 0
  case two = 1
  case three = 2
  case fortyTwo = 3
  case fourHundredTwentyTwo = 4
}

public enum AnotherEventEnum: Int {
  case justInCase = 0
}

/// A class containing all supported nullable types.
///
/// Generated class from Golubets that represents data sent in messages.
public class EventAllNullableTypes: Hashable {
  public init(
    aNullableBool: Bool? = nil,
    aNullableInt: Int64? = nil,
    aNullableInt64: Int64? = nil,
    aNullableDouble: Double? = nil,
    aNullableByteArray: FlutterStandardTypedData? = nil,
    aNullable4ByteArray: FlutterStandardTypedData? = nil,
    aNullable8ByteArray: FlutterStandardTypedData? = nil,
    aNullableFloatArray: FlutterStandardTypedData? = nil,
    aNullableEnum: EventEnum? = nil,
    anotherNullableEnum: AnotherEventEnum? = nil,
    aNullableString: String? = nil,
    aNullableObject: Any? = nil,
    allNullableTypes: EventAllNullableTypes? = nil,
    list: [Any?]? = nil,
    stringList: [String?]? = nil,
    intList: [Int64?]? = nil,
    doubleList: [Double?]? = nil,
    boolList: [Bool?]? = nil,
    enumList: [EventEnum?]? = nil,
    objectList: [Any?]? = nil,
    listList: [[Any?]?]? = nil,
    mapList: [[AnyHashable?: Any?]?]? = nil,
    recursiveClassList: [EventAllNullableTypes?]? = nil,
    map: [AnyHashable?: Any?]? = nil,
    stringMap: [String?: String?]? = nil,
    intMap: [Int64?: Int64?]? = nil,
    enumMap: [EventEnum?: EventEnum?]? = nil,
    objectMap: [AnyHashable?: Any?]? = nil,
    listMap: [Int64?: [Any?]?]? = nil,
    mapMap: [Int64?: [AnyHashable?: Any?]?]? = nil,
    recursiveClassMap: [Int64?: EventAllNullableTypes?]? = nil
  ) {
    self.aNullableBool = aNullableBool
    self.aNullableInt = aNullableInt
    self.aNullableInt64 = aNullableInt64
    self.aNullableDouble = aNullableDouble
    self.aNullableByteArray = aNullableByteArray
    self.aNullable4ByteArray = aNullable4ByteArray
    self.aNullable8ByteArray = aNullable8ByteArray
    self.aNullableFloatArray = aNullableFloatArray
    self.aNullableEnum = aNullableEnum
    self.anotherNullableEnum = anotherNullableEnum
    self.aNullableString = aNullableString
    self.aNullableObject = aNullableObject
    self.allNullableTypes = allNullableTypes
    self.list = list
    self.stringList = stringList
    self.intList = intList
    self.doubleList = doubleList
    self.boolList = boolList
    self.enumList = enumList
    self.objectList = objectList
    self.listList = listList
    self.mapList = mapList
    self.recursiveClassList = recursiveClassList
    self.map = map
    self.stringMap = stringMap
    self.intMap = intMap
    self.enumMap = enumMap
    self.objectMap = objectMap
    self.listMap = listMap
    self.mapMap = mapMap
    self.recursiveClassMap = recursiveClassMap
  }
  var aNullableBool: Bool?
  var aNullableInt: Int64?
  var aNullableInt64: Int64?
  var aNullableDouble: Double?
  var aNullableByteArray: FlutterStandardTypedData?
  var aNullable4ByteArray: FlutterStandardTypedData?
  var aNullable8ByteArray: FlutterStandardTypedData?
  var aNullableFloatArray: FlutterStandardTypedData?
  var aNullableEnum: EventEnum?
  var anotherNullableEnum: AnotherEventEnum?
  var aNullableString: String?
  var aNullableObject: Any?
  var allNullableTypes: EventAllNullableTypes?
  var list: [Any?]?
  var stringList: [String?]?
  var intList: [Int64?]?
  var doubleList: [Double?]?
  var boolList: [Bool?]?
  var enumList: [EventEnum?]?
  var objectList: [Any?]?
  var listList: [[Any?]?]?
  var mapList: [[AnyHashable?: Any?]?]?
  var recursiveClassList: [EventAllNullableTypes?]?
  var map: [AnyHashable?: Any?]?
  var stringMap: [String?: String?]?
  var intMap: [Int64?: Int64?]?
  var enumMap: [EventEnum?: EventEnum?]?
  var objectMap: [AnyHashable?: Any?]?
  var listMap: [Int64?: [Any?]?]?
  var mapMap: [Int64?: [AnyHashable?: Any?]?]?
  var recursiveClassMap: [Int64?: EventAllNullableTypes?]?

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ golubetsVar_list: [Any?]) -> EventAllNullableTypes? {
    let aNullableBool: Bool? = nilOrValue(golubetsVar_list[0])
    let aNullableInt: Int64? = nilOrValue(golubetsVar_list[1])
    let aNullableInt64: Int64? = nilOrValue(golubetsVar_list[2])
    let aNullableDouble: Double? = nilOrValue(golubetsVar_list[3])
    let aNullableByteArray: FlutterStandardTypedData? = nilOrValue(golubetsVar_list[4])
    let aNullable4ByteArray: FlutterStandardTypedData? = nilOrValue(golubetsVar_list[5])
    let aNullable8ByteArray: FlutterStandardTypedData? = nilOrValue(golubetsVar_list[6])
    let aNullableFloatArray: FlutterStandardTypedData? = nilOrValue(golubetsVar_list[7])
    let aNullableEnum: EventEnum? = nilOrValue(golubetsVar_list[8])
    let anotherNullableEnum: AnotherEventEnum? = nilOrValue(golubetsVar_list[9])
    let aNullableString: String? = nilOrValue(golubetsVar_list[10])
    let aNullableObject: Any? = golubetsVar_list[11]
    let allNullableTypes: EventAllNullableTypes? = nilOrValue(golubetsVar_list[12])
    let list: [Any?]? = nilOrValue(golubetsVar_list[13])
    let stringList: [String?]? = nilOrValue(golubetsVar_list[14])
    let intList: [Int64?]? = nilOrValue(golubetsVar_list[15])
    let doubleList: [Double?]? = nilOrValue(golubetsVar_list[16])
    let boolList: [Bool?]? = nilOrValue(golubetsVar_list[17])
    let enumList: [EventEnum?]? = nilOrValue(golubetsVar_list[18])
    let objectList: [Any?]? = nilOrValue(golubetsVar_list[19])
    let listList: [[Any?]?]? = nilOrValue(golubetsVar_list[20])
    let mapList: [[AnyHashable?: Any?]?]? = nilOrValue(golubetsVar_list[21])
    let recursiveClassList: [EventAllNullableTypes?]? = nilOrValue(golubetsVar_list[22])
    let map: [AnyHashable?: Any?]? = nilOrValue(golubetsVar_list[23])
    let stringMap: [String?: String?]? = nilOrValue(golubetsVar_list[24])
    let intMap: [Int64?: Int64?]? = nilOrValue(golubetsVar_list[25])
    let enumMap: [EventEnum?: EventEnum?]? = golubetsVar_list[26] as? [EventEnum?: EventEnum?]
    let objectMap: [AnyHashable?: Any?]? = nilOrValue(golubetsVar_list[27])
    let listMap: [Int64?: [Any?]?]? = nilOrValue(golubetsVar_list[28])
    let mapMap: [Int64?: [AnyHashable?: Any?]?]? = nilOrValue(golubetsVar_list[29])
    let recursiveClassMap: [Int64?: EventAllNullableTypes?]? = nilOrValue(golubetsVar_list[30])

    return EventAllNullableTypes(
      aNullableBool: aNullableBool,
      aNullableInt: aNullableInt,
      aNullableInt64: aNullableInt64,
      aNullableDouble: aNullableDouble,
      aNullableByteArray: aNullableByteArray,
      aNullable4ByteArray: aNullable4ByteArray,
      aNullable8ByteArray: aNullable8ByteArray,
      aNullableFloatArray: aNullableFloatArray,
      aNullableEnum: aNullableEnum,
      anotherNullableEnum: anotherNullableEnum,
      aNullableString: aNullableString,
      aNullableObject: aNullableObject,
      allNullableTypes: allNullableTypes,
      list: list,
      stringList: stringList,
      intList: intList,
      doubleList: doubleList,
      boolList: boolList,
      enumList: enumList,
      objectList: objectList,
      listList: listList,
      mapList: mapList,
      recursiveClassList: recursiveClassList,
      map: map,
      stringMap: stringMap,
      intMap: intMap,
      enumMap: enumMap,
      objectMap: objectMap,
      listMap: listMap,
      mapMap: mapMap,
      recursiveClassMap: recursiveClassMap
    )
  }
  func toList() -> [Any?] {
    return [
      aNullableBool,
      aNullableInt,
      aNullableInt64,
      aNullableDouble,
      aNullableByteArray,
      aNullable4ByteArray,
      aNullable8ByteArray,
      aNullableFloatArray,
      aNullableEnum,
      anotherNullableEnum,
      aNullableString,
      aNullableObject,
      allNullableTypes,
      list,
      stringList,
      intList,
      doubleList,
      boolList,
      enumList,
      objectList,
      listList,
      mapList,
      recursiveClassList,
      map,
      stringMap,
      intMap,
      enumMap,
      objectMap,
      listMap,
      mapMap,
      recursiveClassMap,
    ]
  }
  public static func == (lhs: EventAllNullableTypes, rhs: EventAllNullableTypes) -> Bool {
    if lhs === rhs {
      return true
    }
    return deepEqualsEventChannelTests(lhs.toList(), rhs.toList())
  }
  public func hash(into hasher: inout Hasher) {
    deepHashEventChannelTests(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Golubets that represents data sent in messages.
public enum PlatformEvent: Hashable {
  case intEvent(
    value: Int64
  )

  case stringEvent(
    value: String
  )

  case boolEvent(
    value: Bool
  )

  case doubleEvent(
    value: Double
  )

  case objectsEvent(
    value: Any
  )

  case enumEvent(
    value: EventEnum
  )

  case classEvent(
    value: EventAllNullableTypes
  )

  case emptyEvent

  internal static func fromListIntEvent(_ list: [Any?]) -> PlatformEvent? {
    let value = list[0] as! Int64

    return .intEvent(
      value: value
    )
  }

  internal static func fromListStringEvent(_ list: [Any?]) -> PlatformEvent? {
    let value = list[0] as! String

    return .stringEvent(
      value: value
    )
  }

  internal static func fromListBoolEvent(_ list: [Any?]) -> PlatformEvent? {
    let value = list[0] as! Bool

    return .boolEvent(
      value: value
    )
  }

  internal static func fromListDoubleEvent(_ list: [Any?]) -> PlatformEvent? {
    let value = list[0] as! Double

    return .doubleEvent(
      value: value
    )
  }

  internal static func fromListObjectsEvent(_ list: [Any?]) -> PlatformEvent? {
    let value = list[0]!

    return .objectsEvent(
      value: value
    )
  }

  internal static func fromListEnumEvent(_ list: [Any?]) -> PlatformEvent? {
    let value = list[0] as! EventEnum

    return .enumEvent(
      value: value
    )
  }

  internal static func fromListClassEvent(_ list: [Any?]) -> PlatformEvent? {
    let value = list[0] as! EventAllNullableTypes

    return .classEvent(
      value: value
    )
  }

  internal static func fromListEmptyEvent(_ list: [Any?]) -> PlatformEvent? {
    return .emptyEvent
  }

  public func toList() -> [Any?] {
    switch self {
    case .intEvent(
      let value
    ):
      return [
        value
      ]
    case .stringEvent(
      let value
    ):
      return [
        value
      ]
    case .boolEvent(
      let value
    ):
      return [
        value
      ]
    case .doubleEvent(
      let value
    ):
      return [
        value
      ]
    case .objectsEvent(
      let value
    ):
      return [
        value
      ]
    case .enumEvent(
      let value
    ):
      return [
        value
      ]
    case .classEvent(
      let value
    ):
      return [
        value
      ]
    case .emptyEvent:
      return []
    }
  }
  public static func == (lhs: PlatformEvent, rhs: PlatformEvent) -> Bool {
    return deepEqualsEventChannelTests(lhs.toList(), rhs.toList())
  }
  public func hash(into hasher: inout Hasher) {
    deepHashEventChannelTests(value: toList(), hasher: &hasher)
  }
}

private class EventChannelTestsGolubetsCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return EventEnum(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return AnotherEventEnum(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      return EventAllNullableTypes.fromList(self.readValue() as! [Any?])
    case 132:
      return PlatformEvent.fromListIntEvent(self.readValue() as! [Any?])
    case 133:
      return PlatformEvent.fromListStringEvent(self.readValue() as! [Any?])
    case 134:
      return PlatformEvent.fromListBoolEvent(self.readValue() as! [Any?])
    case 135:
      return PlatformEvent.fromListDoubleEvent(self.readValue() as! [Any?])
    case 136:
      return PlatformEvent.fromListObjectsEvent(self.readValue() as! [Any?])
    case 137:
      return PlatformEvent.fromListEnumEvent(self.readValue() as! [Any?])
    case 138:
      return PlatformEvent.fromListClassEvent(self.readValue() as! [Any?])
    case 139:
      return PlatformEvent.fromListEmptyEvent(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class EventChannelTestsGolubetsCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? EventEnum {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? AnotherEventEnum {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? EventAllNullableTypes {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let childValue = value as? PlatformEvent, case .intEvent = childValue {
      super.writeByte(132)
      super.writeValue(childValue.toList())
    } else if let childValue = value as? PlatformEvent, case .stringEvent = childValue {
      super.writeByte(133)
      super.writeValue(childValue.toList())
    } else if let childValue = value as? PlatformEvent, case .boolEvent = childValue {
      super.writeByte(134)
      super.writeValue(childValue.toList())
    } else if let childValue = value as? PlatformEvent, case .doubleEvent = childValue {
      super.writeByte(135)
      super.writeValue(childValue.toList())
    } else if let childValue = value as? PlatformEvent, case .objectsEvent = childValue {
      super.writeByte(136)
      super.writeValue(childValue.toList())
    } else if let childValue = value as? PlatformEvent, case .enumEvent = childValue {
      super.writeByte(137)
      super.writeValue(childValue.toList())
    } else if let childValue = value as? PlatformEvent, case .classEvent = childValue {
      super.writeByte(138)
      super.writeValue(childValue.toList())
    } else if let childValue = value as? PlatformEvent, case .emptyEvent = childValue {
      super.writeByte(139)
      super.writeValue(childValue.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class EventChannelTestsGolubetsCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return EventChannelTestsGolubetsCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return EventChannelTestsGolubetsCodecWriter(data: data)
  }
}

class EventChannelTestsGolubetsCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = EventChannelTestsGolubetsCodec(
    readerWriter: EventChannelTestsGolubetsCodecReaderWriter())
}

var eventChannelTestsGolubetsMethodCodec = FlutterStandardMethodCodec(
  readerWriter: EventChannelTestsGolubetsCodecReaderWriter())

private class GolubetsStreamHandler<ReturnType>: NSObject, FlutterStreamHandler {
  private let wrapper: GolubetsEventChannelWrapper<ReturnType>
  private var golubetsSink: GolubetsEventSink<ReturnType>? = nil

  init(wrapper: GolubetsEventChannelWrapper<ReturnType>) {
    self.wrapper = wrapper
  }

  func onListen(withArguments arguments: Any?, eventSink events: @escaping FlutterEventSink)
    -> FlutterError?
  {
    golubetsSink = GolubetsEventSink<ReturnType>(events)
    wrapper.onListen(withArguments: arguments, sink: golubetsSink!)
    return nil
  }

  func onCancel(withArguments arguments: Any?) -> FlutterError? {
    golubetsSink = nil
    wrapper.onCancel(withArguments: arguments)
    return nil
  }
}

class GolubetsEventChannelWrapper<ReturnType> {
  func onListen(withArguments arguments: Any?, sink: GolubetsEventSink<ReturnType>) {}
  func onCancel(withArguments arguments: Any?) {}
}

class GolubetsEventSink<ReturnType> {
  private let sink: FlutterEventSink

  init(_ sink: @escaping FlutterEventSink) {
    self.sink = sink
  }

  func success(_ value: ReturnType) {
    sink(value)
  }

  func error(code: String, message: String?, details: Any?) {
    sink(FlutterError(code: code, message: message, details: details))
  }

  func endOfStream() {
    sink(FlutterEndOfEventStream)
  }

}

class StreamIntsStreamHandler: GolubetsEventChannelWrapper<Int64> {
  static func register(
    with messenger: FlutterBinaryMessenger,
    instanceName: String = "",
    streamHandler: StreamIntsStreamHandler
  ) {
    var channelName =
      "dev.bayori.golubets.golubets_integration_tests.EventChannelMethods.streamInts"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = GolubetsStreamHandler<Int64>(wrapper: streamHandler)
    let channel = FlutterEventChannel(
      name: channelName, binaryMessenger: messenger, codec: eventChannelTestsGolubetsMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}

class StreamEventsStreamHandler: GolubetsEventChannelWrapper<PlatformEvent> {
  static func register(
    with messenger: FlutterBinaryMessenger,
    instanceName: String = "",
    streamHandler: StreamEventsStreamHandler
  ) {
    var channelName =
      "dev.bayori.golubets.golubets_integration_tests.EventChannelMethods.streamEvents"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = GolubetsStreamHandler<PlatformEvent>(wrapper: streamHandler)
    let channel = FlutterEventChannel(
      name: channelName, binaryMessenger: messenger, codec: eventChannelTestsGolubetsMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}

class StreamConsistentNumbersStreamHandler: GolubetsEventChannelWrapper<Int64> {
  static func register(
    with messenger: FlutterBinaryMessenger,
    instanceName: String = "",
    streamHandler: StreamConsistentNumbersStreamHandler
  ) {
    var channelName =
      "dev.bayori.golubets.golubets_integration_tests.EventChannelMethods.streamConsistentNumbers"
    if !instanceName.isEmpty {
      channelName += ".\(instanceName)"
    }
    let internalStreamHandler = GolubetsStreamHandler<Int64>(wrapper: streamHandler)
    let channel = FlutterEventChannel(
      name: channelName, binaryMessenger: messenger, codec: eventChannelTestsGolubetsMethodCodec)
    channel.setStreamHandler(internalStreamHandler)
  }
}

/// Generated protocol from Golubets that represents a handler of messages from Flutter.
public protocol SealedClassApi {
  func echo(event: PlatformEvent) throws -> PlatformEvent
}

/// Generated setup class from Golubets to handle messages through the `binaryMessenger`.
public class SealedClassApiSetup {
  static var codec: FlutterStandardMessageCodec { EventChannelTestsGolubetsCodec.shared }
  /// Sets up an instance of `SealedClassApi` to handle messages through the `binaryMessenger`.
  public static func setUp(
    binaryMessenger: FlutterBinaryMessenger, api: SealedClassApi?, messageChannelSuffix: String = ""
  ) {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let echoChannel = FlutterBasicMessageChannel(
      name: "dev.bayori.golubets.golubets_integration_tests.SealedClassApi.echo\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      echoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let eventArg = args[0] as! PlatformEvent
        do {
          let result = try api.echo(event: eventArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      echoChannel.setMessageHandler(nil)
    }
  }
}
