// Copyright 2013 The Flutter Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Golubets, do not edit directly.
// See also: https://pub.dev/packages/golubets

#include "core_tests.gen.h"

struct _CoreTestsGolubetsTestUnusedClass {
  GObject parent_instance;

  FlValue* a_field;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestUnusedClass,
              core_tests_golubets_test_unused_class, G_TYPE_OBJECT)

static void core_tests_golubets_test_unused_class_dispose(GObject* object) {
  CoreTestsGolubetsTestUnusedClass* self =
      CORE_TESTS_GOLUBETS_TEST_UNUSED_CLASS(object);
  g_clear_pointer(&self->a_field, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golubets_test_unused_class_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_unused_class_init(
    CoreTestsGolubetsTestUnusedClass* self) {}

static void core_tests_golubets_test_unused_class_class_init(
    CoreTestsGolubetsTestUnusedClassClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_unused_class_dispose;
}

CoreTestsGolubetsTestUnusedClass* core_tests_golubets_test_unused_class_new(
    FlValue* a_field) {
  CoreTestsGolubetsTestUnusedClass* self =
      CORE_TESTS_GOLUBETS_TEST_UNUSED_CLASS(g_object_new(
          core_tests_golubets_test_unused_class_get_type(), nullptr));
  if (a_field != nullptr) {
    self->a_field = fl_value_ref(a_field);
  } else {
    self->a_field = nullptr;
  }
  return self;
}

FlValue* core_tests_golubets_test_unused_class_get_a_field(
    CoreTestsGolubetsTestUnusedClass* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_UNUSED_CLASS(self), nullptr);
  return self->a_field;
}

static FlValue* core_tests_golubets_test_unused_class_to_list(
    CoreTestsGolubetsTestUnusedClass* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->a_field != nullptr
                                   ? fl_value_ref(self->a_field)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsGolubetsTestUnusedClass*
core_tests_golubets_test_unused_class_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  FlValue* a_field = nullptr;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_field = value0;
  }
  return core_tests_golubets_test_unused_class_new(a_field);
}

struct _CoreTestsGolubetsTestAllTypes {
  GObject parent_instance;

  gboolean a_bool;
  int64_t an_int;
  int64_t an_int64;
  double a_double;
  uint8_t* a_byte_array;
  size_t a_byte_array_length;
  int32_t* a4_byte_array;
  size_t a4_byte_array_length;
  int64_t* a8_byte_array;
  size_t a8_byte_array_length;
  double* a_float_array;
  size_t a_float_array_length;
  CoreTestsGolubetsTestAnEnum an_enum;
  CoreTestsGolubetsTestAnotherEnum another_enum;
  gchar* a_string;
  FlValue* an_object;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* enum_list;
  FlValue* object_list;
  FlValue* list_list;
  FlValue* map_list;
  FlValue* map;
  FlValue* string_map;
  FlValue* int_map;
  FlValue* enum_map;
  FlValue* object_map;
  FlValue* list_map;
  FlValue* map_map;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestAllTypes, core_tests_golubets_test_all_types,
              G_TYPE_OBJECT)

static void core_tests_golubets_test_all_types_dispose(GObject* object) {
  CoreTestsGolubetsTestAllTypes* self =
      CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(object);
  g_clear_pointer(&self->a_string, g_free);
  g_clear_pointer(&self->an_object, fl_value_unref);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->enum_list, fl_value_unref);
  g_clear_pointer(&self->object_list, fl_value_unref);
  g_clear_pointer(&self->list_list, fl_value_unref);
  g_clear_pointer(&self->map_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  g_clear_pointer(&self->string_map, fl_value_unref);
  g_clear_pointer(&self->int_map, fl_value_unref);
  g_clear_pointer(&self->enum_map, fl_value_unref);
  g_clear_pointer(&self->object_map, fl_value_unref);
  g_clear_pointer(&self->list_map, fl_value_unref);
  g_clear_pointer(&self->map_map, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golubets_test_all_types_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_all_types_init(
    CoreTestsGolubetsTestAllTypes* self) {}

static void core_tests_golubets_test_all_types_class_init(
    CoreTestsGolubetsTestAllTypesClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = core_tests_golubets_test_all_types_dispose;
}

CoreTestsGolubetsTestAllTypes* core_tests_golubets_test_all_types_new(
    gboolean a_bool, int64_t an_int, int64_t an_int64, double a_double,
    const uint8_t* a_byte_array, size_t a_byte_array_length,
    const int32_t* a4_byte_array, size_t a4_byte_array_length,
    const int64_t* a8_byte_array, size_t a8_byte_array_length,
    const double* a_float_array, size_t a_float_array_length,
    CoreTestsGolubetsTestAnEnum an_enum,
    CoreTestsGolubetsTestAnotherEnum another_enum, const gchar* a_string,
    FlValue* an_object, FlValue* list, FlValue* string_list, FlValue* int_list,
    FlValue* double_list, FlValue* bool_list, FlValue* enum_list,
    FlValue* object_list, FlValue* list_list, FlValue* map_list, FlValue* map,
    FlValue* string_map, FlValue* int_map, FlValue* enum_map,
    FlValue* object_map, FlValue* list_map, FlValue* map_map) {
  CoreTestsGolubetsTestAllTypes* self = CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(
      g_object_new(core_tests_golubets_test_all_types_get_type(), nullptr));
  self->a_bool = a_bool;
  self->an_int = an_int;
  self->an_int64 = an_int64;
  self->a_double = a_double;
  self->a_byte_array = static_cast<uint8_t*>(
      memcpy(malloc(a_byte_array_length), a_byte_array, a_byte_array_length));
  self->a_byte_array_length = a_byte_array_length;
  self->a4_byte_array = static_cast<int32_t*>(
      memcpy(malloc(sizeof(int32_t) * a4_byte_array_length), a4_byte_array,
             sizeof(int32_t) * a4_byte_array_length));
  self->a4_byte_array_length = a4_byte_array_length;
  self->a8_byte_array = static_cast<int64_t*>(
      memcpy(malloc(sizeof(int64_t) * a8_byte_array_length), a8_byte_array,
             sizeof(int64_t) * a8_byte_array_length));
  self->a8_byte_array_length = a8_byte_array_length;
  self->a_float_array = static_cast<double*>(
      memcpy(malloc(sizeof(double) * a_float_array_length), a_float_array,
             sizeof(double) * a_float_array_length));
  self->a_float_array_length = a_float_array_length;
  self->an_enum = an_enum;
  self->another_enum = another_enum;
  self->a_string = g_strdup(a_string);
  self->an_object = fl_value_ref(an_object);
  self->list = fl_value_ref(list);
  self->string_list = fl_value_ref(string_list);
  self->int_list = fl_value_ref(int_list);
  self->double_list = fl_value_ref(double_list);
  self->bool_list = fl_value_ref(bool_list);
  self->enum_list = fl_value_ref(enum_list);
  self->object_list = fl_value_ref(object_list);
  self->list_list = fl_value_ref(list_list);
  self->map_list = fl_value_ref(map_list);
  self->map = fl_value_ref(map);
  self->string_map = fl_value_ref(string_map);
  self->int_map = fl_value_ref(int_map);
  self->enum_map = fl_value_ref(enum_map);
  self->object_map = fl_value_ref(object_map);
  self->list_map = fl_value_ref(list_map);
  self->map_map = fl_value_ref(map_map);
  return self;
}

gboolean core_tests_golubets_test_all_types_get_a_bool(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), FALSE);
  return self->a_bool;
}

int64_t core_tests_golubets_test_all_types_get_an_int(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), 0);
  return self->an_int;
}

int64_t core_tests_golubets_test_all_types_get_an_int64(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), 0);
  return self->an_int64;
}

double core_tests_golubets_test_all_types_get_a_double(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), 0.0);
  return self->a_double;
}

const uint8_t* core_tests_golubets_test_all_types_get_a_byte_array(
    CoreTestsGolubetsTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a_byte_array_length;
  return self->a_byte_array;
}

const int32_t* core_tests_golubets_test_all_types_get_a4_byte_array(
    CoreTestsGolubetsTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a4_byte_array_length;
  return self->a4_byte_array;
}

const int64_t* core_tests_golubets_test_all_types_get_a8_byte_array(
    CoreTestsGolubetsTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a8_byte_array_length;
  return self->a8_byte_array;
}

const double* core_tests_golubets_test_all_types_get_a_float_array(
    CoreTestsGolubetsTestAllTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  *length = self->a_float_array_length;
  return self->a_float_array;
}

CoreTestsGolubetsTestAnEnum core_tests_golubets_test_all_types_get_an_enum(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self),
                       static_cast<CoreTestsGolubetsTestAnEnum>(0));
  return self->an_enum;
}

CoreTestsGolubetsTestAnotherEnum
core_tests_golubets_test_all_types_get_another_enum(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self),
                       static_cast<CoreTestsGolubetsTestAnotherEnum>(0));
  return self->another_enum;
}

const gchar* core_tests_golubets_test_all_types_get_a_string(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->a_string;
}

FlValue* core_tests_golubets_test_all_types_get_an_object(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->an_object;
}

FlValue* core_tests_golubets_test_all_types_get_list(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->list;
}

FlValue* core_tests_golubets_test_all_types_get_string_list(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->string_list;
}

FlValue* core_tests_golubets_test_all_types_get_int_list(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->int_list;
}

FlValue* core_tests_golubets_test_all_types_get_double_list(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->double_list;
}

FlValue* core_tests_golubets_test_all_types_get_bool_list(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->bool_list;
}

FlValue* core_tests_golubets_test_all_types_get_enum_list(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->enum_list;
}

FlValue* core_tests_golubets_test_all_types_get_object_list(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->object_list;
}

FlValue* core_tests_golubets_test_all_types_get_list_list(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->list_list;
}

FlValue* core_tests_golubets_test_all_types_get_map_list(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->map_list;
}

FlValue* core_tests_golubets_test_all_types_get_map(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->map;
}

FlValue* core_tests_golubets_test_all_types_get_string_map(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->string_map;
}

FlValue* core_tests_golubets_test_all_types_get_int_map(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->int_map;
}

FlValue* core_tests_golubets_test_all_types_get_enum_map(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->enum_map;
}

FlValue* core_tests_golubets_test_all_types_get_object_map(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->object_map;
}

FlValue* core_tests_golubets_test_all_types_get_list_map(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->list_map;
}

FlValue* core_tests_golubets_test_all_types_get_map_map(
    CoreTestsGolubetsTestAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES(self), nullptr);
  return self->map_map;
}

static FlValue* core_tests_golubets_test_all_types_to_list(
    CoreTestsGolubetsTestAllTypes* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->a_bool));
  fl_value_append_take(values, fl_value_new_int(self->an_int));
  fl_value_append_take(values, fl_value_new_int(self->an_int64));
  fl_value_append_take(values, fl_value_new_float(self->a_double));
  fl_value_append_take(
      values,
      fl_value_new_uint8_list(self->a_byte_array, self->a_byte_array_length));
  fl_value_append_take(
      values,
      fl_value_new_int32_list(self->a4_byte_array, self->a4_byte_array_length));
  fl_value_append_take(
      values,
      fl_value_new_int64_list(self->a8_byte_array, self->a8_byte_array_length));
  fl_value_append_take(
      values,
      fl_value_new_float_list(self->a_float_array, self->a_float_array_length));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                  fl_value_new_int(self->an_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                                  fl_value_new_int(self->another_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(values, fl_value_new_string(self->a_string));
  fl_value_append_take(values, fl_value_ref(self->an_object));
  fl_value_append_take(values, fl_value_ref(self->list));
  fl_value_append_take(values, fl_value_ref(self->string_list));
  fl_value_append_take(values, fl_value_ref(self->int_list));
  fl_value_append_take(values, fl_value_ref(self->double_list));
  fl_value_append_take(values, fl_value_ref(self->bool_list));
  fl_value_append_take(values, fl_value_ref(self->enum_list));
  fl_value_append_take(values, fl_value_ref(self->object_list));
  fl_value_append_take(values, fl_value_ref(self->list_list));
  fl_value_append_take(values, fl_value_ref(self->map_list));
  fl_value_append_take(values, fl_value_ref(self->map));
  fl_value_append_take(values, fl_value_ref(self->string_map));
  fl_value_append_take(values, fl_value_ref(self->int_map));
  fl_value_append_take(values, fl_value_ref(self->enum_map));
  fl_value_append_take(values, fl_value_ref(self->object_map));
  fl_value_append_take(values, fl_value_ref(self->list_map));
  fl_value_append_take(values, fl_value_ref(self->map_map));
  return values;
}

static CoreTestsGolubetsTestAllTypes*
core_tests_golubets_test_all_types_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t an_int = fl_value_get_int(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t an_int64 = fl_value_get_int(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double a_double = fl_value_get_float(value3);
  FlValue* value4 = fl_value_get_list_value(values, 4);
  const uint8_t* a_byte_array = fl_value_get_uint8_list(value4);
  size_t a_byte_array_length = fl_value_get_length(value4);
  FlValue* value5 = fl_value_get_list_value(values, 5);
  const int32_t* a4_byte_array = fl_value_get_int32_list(value5);
  size_t a4_byte_array_length = fl_value_get_length(value5);
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const int64_t* a8_byte_array = fl_value_get_int64_list(value6);
  size_t a8_byte_array_length = fl_value_get_length(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  const double* a_float_array = fl_value_get_float_list(value7);
  size_t a_float_array_length = fl_value_get_length(value7);
  FlValue* value8 = fl_value_get_list_value(values, 8);
  CoreTestsGolubetsTestAnEnum an_enum =
      static_cast<CoreTestsGolubetsTestAnEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value8)))));
  FlValue* value9 = fl_value_get_list_value(values, 9);
  CoreTestsGolubetsTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubetsTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value9)))));
  FlValue* value10 = fl_value_get_list_value(values, 10);
  const gchar* a_string = fl_value_get_string(value10);
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* an_object = value11;
  FlValue* value12 = fl_value_get_list_value(values, 12);
  FlValue* list = value12;
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* string_list = value13;
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* int_list = value14;
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* double_list = value15;
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* bool_list = value16;
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* enum_list = value17;
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* object_list = value18;
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* list_list = value19;
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* map_list = value20;
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* map = value21;
  FlValue* value22 = fl_value_get_list_value(values, 22);
  FlValue* string_map = value22;
  FlValue* value23 = fl_value_get_list_value(values, 23);
  FlValue* int_map = value23;
  FlValue* value24 = fl_value_get_list_value(values, 24);
  FlValue* enum_map = value24;
  FlValue* value25 = fl_value_get_list_value(values, 25);
  FlValue* object_map = value25;
  FlValue* value26 = fl_value_get_list_value(values, 26);
  FlValue* list_map = value26;
  FlValue* value27 = fl_value_get_list_value(values, 27);
  FlValue* map_map = value27;
  return core_tests_golubets_test_all_types_new(
      a_bool, an_int, an_int64, a_double, a_byte_array, a_byte_array_length,
      a4_byte_array, a4_byte_array_length, a8_byte_array, a8_byte_array_length,
      a_float_array, a_float_array_length, an_enum, another_enum, a_string,
      an_object, list, string_list, int_list, double_list, bool_list, enum_list,
      object_list, list_list, map_list, map, string_map, int_map, enum_map,
      object_map, list_map, map_map);
}

struct _CoreTestsGolubetsTestAllNullableTypes {
  GObject parent_instance;

  gboolean* a_nullable_bool;
  int64_t* a_nullable_int;
  int64_t* a_nullable_int64;
  double* a_nullable_double;
  uint8_t* a_nullable_byte_array;
  size_t a_nullable_byte_array_length;
  int32_t* a_nullable4_byte_array;
  size_t a_nullable4_byte_array_length;
  int64_t* a_nullable8_byte_array;
  size_t a_nullable8_byte_array_length;
  double* a_nullable_float_array;
  size_t a_nullable_float_array_length;
  CoreTestsGolubetsTestAnEnum* a_nullable_enum;
  CoreTestsGolubetsTestAnotherEnum* another_nullable_enum;
  gchar* a_nullable_string;
  FlValue* a_nullable_object;
  CoreTestsGolubetsTestAllNullableTypes* all_nullable_types;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* enum_list;
  FlValue* object_list;
  FlValue* list_list;
  FlValue* map_list;
  FlValue* recursive_class_list;
  FlValue* map;
  FlValue* string_map;
  FlValue* int_map;
  FlValue* enum_map;
  FlValue* object_map;
  FlValue* list_map;
  FlValue* map_map;
  FlValue* recursive_class_map;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestAllNullableTypes,
              core_tests_golubets_test_all_nullable_types, G_TYPE_OBJECT)

static void core_tests_golubets_test_all_nullable_types_dispose(
    GObject* object) {
  CoreTestsGolubetsTestAllNullableTypes* self =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(object);
  g_clear_pointer(&self->a_nullable_bool, g_free);
  g_clear_pointer(&self->a_nullable_int, g_free);
  g_clear_pointer(&self->a_nullable_int64, g_free);
  g_clear_pointer(&self->a_nullable_double, g_free);
  g_clear_pointer(&self->a_nullable_enum, g_free);
  g_clear_pointer(&self->another_nullable_enum, g_free);
  g_clear_pointer(&self->a_nullable_string, g_free);
  g_clear_pointer(&self->a_nullable_object, fl_value_unref);
  g_clear_object(&self->all_nullable_types);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->enum_list, fl_value_unref);
  g_clear_pointer(&self->object_list, fl_value_unref);
  g_clear_pointer(&self->list_list, fl_value_unref);
  g_clear_pointer(&self->map_list, fl_value_unref);
  g_clear_pointer(&self->recursive_class_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  g_clear_pointer(&self->string_map, fl_value_unref);
  g_clear_pointer(&self->int_map, fl_value_unref);
  g_clear_pointer(&self->enum_map, fl_value_unref);
  g_clear_pointer(&self->object_map, fl_value_unref);
  g_clear_pointer(&self->list_map, fl_value_unref);
  g_clear_pointer(&self->map_map, fl_value_unref);
  g_clear_pointer(&self->recursive_class_map, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golubets_test_all_nullable_types_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_all_nullable_types_init(
    CoreTestsGolubetsTestAllNullableTypes* self) {}

static void core_tests_golubets_test_all_nullable_types_class_init(
    CoreTestsGolubetsTestAllNullableTypesClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_all_nullable_types_dispose;
}

CoreTestsGolubetsTestAllNullableTypes*
core_tests_golubets_test_all_nullable_types_new(
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    int64_t* a_nullable_int64, double* a_nullable_double,
    const uint8_t* a_nullable_byte_array, size_t a_nullable_byte_array_length,
    const int32_t* a_nullable4_byte_array, size_t a_nullable4_byte_array_length,
    const int64_t* a_nullable8_byte_array, size_t a_nullable8_byte_array_length,
    const double* a_nullable_float_array, size_t a_nullable_float_array_length,
    CoreTestsGolubetsTestAnEnum* a_nullable_enum,
    CoreTestsGolubetsTestAnotherEnum* another_nullable_enum,
    const gchar* a_nullable_string, FlValue* a_nullable_object,
    CoreTestsGolubetsTestAllNullableTypes* all_nullable_types, FlValue* list,
    FlValue* string_list, FlValue* int_list, FlValue* double_list,
    FlValue* bool_list, FlValue* enum_list, FlValue* object_list,
    FlValue* list_list, FlValue* map_list, FlValue* recursive_class_list,
    FlValue* map, FlValue* string_map, FlValue* int_map, FlValue* enum_map,
    FlValue* object_map, FlValue* list_map, FlValue* map_map,
    FlValue* recursive_class_map) {
  CoreTestsGolubetsTestAllNullableTypes* self =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(g_object_new(
          core_tests_golubets_test_all_nullable_types_get_type(), nullptr));
  if (a_nullable_bool != nullptr) {
    self->a_nullable_bool = static_cast<gboolean*>(malloc(sizeof(gboolean)));
    *self->a_nullable_bool = *a_nullable_bool;
  } else {
    self->a_nullable_bool = nullptr;
  }
  if (a_nullable_int != nullptr) {
    self->a_nullable_int = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int = *a_nullable_int;
  } else {
    self->a_nullable_int = nullptr;
  }
  if (a_nullable_int64 != nullptr) {
    self->a_nullable_int64 = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int64 = *a_nullable_int64;
  } else {
    self->a_nullable_int64 = nullptr;
  }
  if (a_nullable_double != nullptr) {
    self->a_nullable_double = static_cast<double*>(malloc(sizeof(double)));
    *self->a_nullable_double = *a_nullable_double;
  } else {
    self->a_nullable_double = nullptr;
  }
  if (a_nullable_byte_array != nullptr) {
    self->a_nullable_byte_array = static_cast<uint8_t*>(
        memcpy(malloc(a_nullable_byte_array_length), a_nullable_byte_array,
               a_nullable_byte_array_length));
    self->a_nullable_byte_array_length = a_nullable_byte_array_length;
  } else {
    self->a_nullable_byte_array = nullptr;
    self->a_nullable_byte_array_length = 0;
  }
  if (a_nullable4_byte_array != nullptr) {
    self->a_nullable4_byte_array = static_cast<int32_t*>(
        memcpy(malloc(sizeof(int32_t) * a_nullable4_byte_array_length),
               a_nullable4_byte_array,
               sizeof(int32_t) * a_nullable4_byte_array_length));
    self->a_nullable4_byte_array_length = a_nullable4_byte_array_length;
  } else {
    self->a_nullable4_byte_array = nullptr;
    self->a_nullable4_byte_array_length = 0;
  }
  if (a_nullable8_byte_array != nullptr) {
    self->a_nullable8_byte_array = static_cast<int64_t*>(
        memcpy(malloc(sizeof(int64_t) * a_nullable8_byte_array_length),
               a_nullable8_byte_array,
               sizeof(int64_t) * a_nullable8_byte_array_length));
    self->a_nullable8_byte_array_length = a_nullable8_byte_array_length;
  } else {
    self->a_nullable8_byte_array = nullptr;
    self->a_nullable8_byte_array_length = 0;
  }
  if (a_nullable_float_array != nullptr) {
    self->a_nullable_float_array = static_cast<double*>(
        memcpy(malloc(sizeof(double) * a_nullable_float_array_length),
               a_nullable_float_array,
               sizeof(double) * a_nullable_float_array_length));
    self->a_nullable_float_array_length = a_nullable_float_array_length;
  } else {
    self->a_nullable_float_array = nullptr;
    self->a_nullable_float_array_length = 0;
  }
  if (a_nullable_enum != nullptr) {
    self->a_nullable_enum = static_cast<CoreTestsGolubetsTestAnEnum*>(
        malloc(sizeof(CoreTestsGolubetsTestAnEnum)));
    *self->a_nullable_enum = *a_nullable_enum;
  } else {
    self->a_nullable_enum = nullptr;
  }
  if (another_nullable_enum != nullptr) {
    self->another_nullable_enum =
        static_cast<CoreTestsGolubetsTestAnotherEnum*>(
            malloc(sizeof(CoreTestsGolubetsTestAnotherEnum)));
    *self->another_nullable_enum = *another_nullable_enum;
  } else {
    self->another_nullable_enum = nullptr;
  }
  if (a_nullable_string != nullptr) {
    self->a_nullable_string = g_strdup(a_nullable_string);
  } else {
    self->a_nullable_string = nullptr;
  }
  if (a_nullable_object != nullptr) {
    self->a_nullable_object = fl_value_ref(a_nullable_object);
  } else {
    self->a_nullable_object = nullptr;
  }
  if (all_nullable_types != nullptr) {
    self->all_nullable_types = CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
        g_object_ref(all_nullable_types));
  } else {
    self->all_nullable_types = nullptr;
  }
  if (list != nullptr) {
    self->list = fl_value_ref(list);
  } else {
    self->list = nullptr;
  }
  if (string_list != nullptr) {
    self->string_list = fl_value_ref(string_list);
  } else {
    self->string_list = nullptr;
  }
  if (int_list != nullptr) {
    self->int_list = fl_value_ref(int_list);
  } else {
    self->int_list = nullptr;
  }
  if (double_list != nullptr) {
    self->double_list = fl_value_ref(double_list);
  } else {
    self->double_list = nullptr;
  }
  if (bool_list != nullptr) {
    self->bool_list = fl_value_ref(bool_list);
  } else {
    self->bool_list = nullptr;
  }
  if (enum_list != nullptr) {
    self->enum_list = fl_value_ref(enum_list);
  } else {
    self->enum_list = nullptr;
  }
  if (object_list != nullptr) {
    self->object_list = fl_value_ref(object_list);
  } else {
    self->object_list = nullptr;
  }
  if (list_list != nullptr) {
    self->list_list = fl_value_ref(list_list);
  } else {
    self->list_list = nullptr;
  }
  if (map_list != nullptr) {
    self->map_list = fl_value_ref(map_list);
  } else {
    self->map_list = nullptr;
  }
  if (recursive_class_list != nullptr) {
    self->recursive_class_list = fl_value_ref(recursive_class_list);
  } else {
    self->recursive_class_list = nullptr;
  }
  if (map != nullptr) {
    self->map = fl_value_ref(map);
  } else {
    self->map = nullptr;
  }
  if (string_map != nullptr) {
    self->string_map = fl_value_ref(string_map);
  } else {
    self->string_map = nullptr;
  }
  if (int_map != nullptr) {
    self->int_map = fl_value_ref(int_map);
  } else {
    self->int_map = nullptr;
  }
  if (enum_map != nullptr) {
    self->enum_map = fl_value_ref(enum_map);
  } else {
    self->enum_map = nullptr;
  }
  if (object_map != nullptr) {
    self->object_map = fl_value_ref(object_map);
  } else {
    self->object_map = nullptr;
  }
  if (list_map != nullptr) {
    self->list_map = fl_value_ref(list_map);
  } else {
    self->list_map = nullptr;
  }
  if (map_map != nullptr) {
    self->map_map = fl_value_ref(map_map);
  } else {
    self->map_map = nullptr;
  }
  if (recursive_class_map != nullptr) {
    self->recursive_class_map = fl_value_ref(recursive_class_map);
  } else {
    self->recursive_class_map = nullptr;
  }
  return self;
}

gboolean* core_tests_golubets_test_all_nullable_types_get_a_nullable_bool(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_bool;
}

int64_t* core_tests_golubets_test_all_nullable_types_get_a_nullable_int(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_int;
}

int64_t* core_tests_golubets_test_all_nullable_types_get_a_nullable_int64(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_int64;
}

double* core_tests_golubets_test_all_nullable_types_get_a_nullable_double(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_double;
}

const uint8_t*
core_tests_golubets_test_all_nullable_types_get_a_nullable_byte_array(
    CoreTestsGolubetsTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable_byte_array_length;
  return self->a_nullable_byte_array;
}

const int32_t*
core_tests_golubets_test_all_nullable_types_get_a_nullable4_byte_array(
    CoreTestsGolubetsTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable4_byte_array_length;
  return self->a_nullable4_byte_array;
}

const int64_t*
core_tests_golubets_test_all_nullable_types_get_a_nullable8_byte_array(
    CoreTestsGolubetsTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable8_byte_array_length;
  return self->a_nullable8_byte_array;
}

const double*
core_tests_golubets_test_all_nullable_types_get_a_nullable_float_array(
    CoreTestsGolubetsTestAllNullableTypes* self, size_t* length) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  *length = self->a_nullable_float_array_length;
  return self->a_nullable_float_array;
}

CoreTestsGolubetsTestAnEnum*
core_tests_golubets_test_all_nullable_types_get_a_nullable_enum(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_enum;
}

CoreTestsGolubetsTestAnotherEnum*
core_tests_golubets_test_all_nullable_types_get_another_nullable_enum(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->another_nullable_enum;
}

const gchar* core_tests_golubets_test_all_nullable_types_get_a_nullable_string(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_string;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_a_nullable_object(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->a_nullable_object;
}

CoreTestsGolubetsTestAllNullableTypes*
core_tests_golubets_test_all_nullable_types_get_all_nullable_types(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->all_nullable_types;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->list;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_string_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->string_list;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_int_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->int_list;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_double_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->double_list;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_bool_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->bool_list;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_enum_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->enum_list;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_object_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->object_list;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_list_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->list_list;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_map_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->map_list;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_recursive_class_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->recursive_class_list;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_map(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->map;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_string_map(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->string_map;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_int_map(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->int_map;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_enum_map(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->enum_map;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_object_map(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->object_map;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_list_map(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->list_map;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_map_map(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->map_map;
}

FlValue* core_tests_golubets_test_all_nullable_types_get_recursive_class_map(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES(self),
                       nullptr);
  return self->recursive_class_map;
}

static FlValue* core_tests_golubets_test_all_nullable_types_to_list(
    CoreTestsGolubetsTestAllNullableTypes* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->a_nullable_bool != nullptr
                                   ? fl_value_new_bool(*self->a_nullable_bool)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int64 != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int64)
                                   : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_double != nullptr
                           ? fl_value_new_float(*self->a_nullable_double)
                           : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_byte_array != nullptr
                  ? fl_value_new_uint8_list(self->a_nullable_byte_array,
                                            self->a_nullable_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable4_byte_array != nullptr
                  ? fl_value_new_int32_list(self->a_nullable4_byte_array,
                                            self->a_nullable4_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable8_byte_array != nullptr
                  ? fl_value_new_int64_list(self->a_nullable8_byte_array,
                                            self->a_nullable8_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_float_array != nullptr
                  ? fl_value_new_float_list(self->a_nullable_float_array,
                                            self->a_nullable_float_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values,
      self->a_nullable_enum != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                fl_value_new_int(*self->a_nullable_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  fl_value_append_take(
      values,
      self->another_nullable_enum != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                                fl_value_new_int(*self->another_nullable_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_string != nullptr
                           ? fl_value_new_string(self->a_nullable_string)
                           : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_object != nullptr
                                   ? fl_value_ref(self->a_nullable_object)
                                   : fl_value_new_null());
  fl_value_append_take(
      values, self->all_nullable_types != nullptr
                  ? fl_value_new_custom_object(
                        core_tests_golubets_test_all_nullable_types_type_id,
                        G_OBJECT(self->all_nullable_types))
                  : fl_value_new_null());
  fl_value_append_take(values, self->list != nullptr ? fl_value_ref(self->list)
                                                     : fl_value_new_null());
  fl_value_append_take(values, self->string_list != nullptr
                                   ? fl_value_ref(self->string_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->int_list != nullptr
                                   ? fl_value_ref(self->int_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->double_list != nullptr
                                   ? fl_value_ref(self->double_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->bool_list != nullptr
                                   ? fl_value_ref(self->bool_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->enum_list != nullptr
                                   ? fl_value_ref(self->enum_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->object_list != nullptr
                                   ? fl_value_ref(self->object_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list_list != nullptr
                                   ? fl_value_ref(self->list_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map_list != nullptr
                                   ? fl_value_ref(self->map_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->recursive_class_list != nullptr
                                   ? fl_value_ref(self->recursive_class_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map != nullptr ? fl_value_ref(self->map)
                                                    : fl_value_new_null());
  fl_value_append_take(values, self->string_map != nullptr
                                   ? fl_value_ref(self->string_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->int_map != nullptr
                                   ? fl_value_ref(self->int_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->enum_map != nullptr
                                   ? fl_value_ref(self->enum_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->object_map != nullptr
                                   ? fl_value_ref(self->object_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list_map != nullptr
                                   ? fl_value_ref(self->list_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map_map != nullptr
                                   ? fl_value_ref(self->map_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->recursive_class_map != nullptr
                                   ? fl_value_ref(self->recursive_class_map)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsGolubetsTestAllNullableTypes*
core_tests_golubets_test_all_nullable_types_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t* a_nullable_int64 = nullptr;
  int64_t a_nullable_int64_value;
  if (fl_value_get_type(value2) != FL_VALUE_TYPE_NULL) {
    a_nullable_int64_value = fl_value_get_int(value2);
    a_nullable_int64 = &a_nullable_int64_value;
  }
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double* a_nullable_double = nullptr;
  double a_nullable_double_value;
  if (fl_value_get_type(value3) != FL_VALUE_TYPE_NULL) {
    a_nullable_double_value = fl_value_get_float(value3);
    a_nullable_double = &a_nullable_double_value;
  }
  FlValue* value4 = fl_value_get_list_value(values, 4);
  const uint8_t* a_nullable_byte_array = nullptr;
  size_t a_nullable_byte_array_length = 0;
  if (fl_value_get_type(value4) != FL_VALUE_TYPE_NULL) {
    a_nullable_byte_array = fl_value_get_uint8_list(value4);
    a_nullable_byte_array_length = fl_value_get_length(value4);
  }
  FlValue* value5 = fl_value_get_list_value(values, 5);
  const int32_t* a_nullable4_byte_array = nullptr;
  size_t a_nullable4_byte_array_length = 0;
  if (fl_value_get_type(value5) != FL_VALUE_TYPE_NULL) {
    a_nullable4_byte_array = fl_value_get_int32_list(value5);
    a_nullable4_byte_array_length = fl_value_get_length(value5);
  }
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const int64_t* a_nullable8_byte_array = nullptr;
  size_t a_nullable8_byte_array_length = 0;
  if (fl_value_get_type(value6) != FL_VALUE_TYPE_NULL) {
    a_nullable8_byte_array = fl_value_get_int64_list(value6);
    a_nullable8_byte_array_length = fl_value_get_length(value6);
  }
  FlValue* value7 = fl_value_get_list_value(values, 7);
  const double* a_nullable_float_array = nullptr;
  size_t a_nullable_float_array_length = 0;
  if (fl_value_get_type(value7) != FL_VALUE_TYPE_NULL) {
    a_nullable_float_array = fl_value_get_float_list(value7);
    a_nullable_float_array_length = fl_value_get_length(value7);
  }
  FlValue* value8 = fl_value_get_list_value(values, 8);
  CoreTestsGolubetsTestAnEnum* a_nullable_enum = nullptr;
  CoreTestsGolubetsTestAnEnum a_nullable_enum_value;
  if (fl_value_get_type(value8) != FL_VALUE_TYPE_NULL) {
    a_nullable_enum_value = static_cast<CoreTestsGolubetsTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value8)))));
    a_nullable_enum = &a_nullable_enum_value;
  }
  FlValue* value9 = fl_value_get_list_value(values, 9);
  CoreTestsGolubetsTestAnotherEnum* another_nullable_enum = nullptr;
  CoreTestsGolubetsTestAnotherEnum another_nullable_enum_value;
  if (fl_value_get_type(value9) != FL_VALUE_TYPE_NULL) {
    another_nullable_enum_value = static_cast<CoreTestsGolubetsTestAnotherEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value9)))));
    another_nullable_enum = &another_nullable_enum_value;
  }
  FlValue* value10 = fl_value_get_list_value(values, 10);
  const gchar* a_nullable_string = nullptr;
  if (fl_value_get_type(value10) != FL_VALUE_TYPE_NULL) {
    a_nullable_string = fl_value_get_string(value10);
  }
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* a_nullable_object = nullptr;
  if (fl_value_get_type(value11) != FL_VALUE_TYPE_NULL) {
    a_nullable_object = value11;
  }
  FlValue* value12 = fl_value_get_list_value(values, 12);
  CoreTestsGolubetsTestAllNullableTypes* all_nullable_types = nullptr;
  if (fl_value_get_type(value12) != FL_VALUE_TYPE_NULL) {
    all_nullable_types = CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
        fl_value_get_custom_value_object(value12));
  }
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* list = nullptr;
  if (fl_value_get_type(value13) != FL_VALUE_TYPE_NULL) {
    list = value13;
  }
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* string_list = nullptr;
  if (fl_value_get_type(value14) != FL_VALUE_TYPE_NULL) {
    string_list = value14;
  }
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* int_list = nullptr;
  if (fl_value_get_type(value15) != FL_VALUE_TYPE_NULL) {
    int_list = value15;
  }
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* double_list = nullptr;
  if (fl_value_get_type(value16) != FL_VALUE_TYPE_NULL) {
    double_list = value16;
  }
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* bool_list = nullptr;
  if (fl_value_get_type(value17) != FL_VALUE_TYPE_NULL) {
    bool_list = value17;
  }
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* enum_list = nullptr;
  if (fl_value_get_type(value18) != FL_VALUE_TYPE_NULL) {
    enum_list = value18;
  }
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* object_list = nullptr;
  if (fl_value_get_type(value19) != FL_VALUE_TYPE_NULL) {
    object_list = value19;
  }
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* list_list = nullptr;
  if (fl_value_get_type(value20) != FL_VALUE_TYPE_NULL) {
    list_list = value20;
  }
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* map_list = nullptr;
  if (fl_value_get_type(value21) != FL_VALUE_TYPE_NULL) {
    map_list = value21;
  }
  FlValue* value22 = fl_value_get_list_value(values, 22);
  FlValue* recursive_class_list = nullptr;
  if (fl_value_get_type(value22) != FL_VALUE_TYPE_NULL) {
    recursive_class_list = value22;
  }
  FlValue* value23 = fl_value_get_list_value(values, 23);
  FlValue* map = nullptr;
  if (fl_value_get_type(value23) != FL_VALUE_TYPE_NULL) {
    map = value23;
  }
  FlValue* value24 = fl_value_get_list_value(values, 24);
  FlValue* string_map = nullptr;
  if (fl_value_get_type(value24) != FL_VALUE_TYPE_NULL) {
    string_map = value24;
  }
  FlValue* value25 = fl_value_get_list_value(values, 25);
  FlValue* int_map = nullptr;
  if (fl_value_get_type(value25) != FL_VALUE_TYPE_NULL) {
    int_map = value25;
  }
  FlValue* value26 = fl_value_get_list_value(values, 26);
  FlValue* enum_map = nullptr;
  if (fl_value_get_type(value26) != FL_VALUE_TYPE_NULL) {
    enum_map = value26;
  }
  FlValue* value27 = fl_value_get_list_value(values, 27);
  FlValue* object_map = nullptr;
  if (fl_value_get_type(value27) != FL_VALUE_TYPE_NULL) {
    object_map = value27;
  }
  FlValue* value28 = fl_value_get_list_value(values, 28);
  FlValue* list_map = nullptr;
  if (fl_value_get_type(value28) != FL_VALUE_TYPE_NULL) {
    list_map = value28;
  }
  FlValue* value29 = fl_value_get_list_value(values, 29);
  FlValue* map_map = nullptr;
  if (fl_value_get_type(value29) != FL_VALUE_TYPE_NULL) {
    map_map = value29;
  }
  FlValue* value30 = fl_value_get_list_value(values, 30);
  FlValue* recursive_class_map = nullptr;
  if (fl_value_get_type(value30) != FL_VALUE_TYPE_NULL) {
    recursive_class_map = value30;
  }
  return core_tests_golubets_test_all_nullable_types_new(
      a_nullable_bool, a_nullable_int, a_nullable_int64, a_nullable_double,
      a_nullable_byte_array, a_nullable_byte_array_length,
      a_nullable4_byte_array, a_nullable4_byte_array_length,
      a_nullable8_byte_array, a_nullable8_byte_array_length,
      a_nullable_float_array, a_nullable_float_array_length, a_nullable_enum,
      another_nullable_enum, a_nullable_string, a_nullable_object,
      all_nullable_types, list, string_list, int_list, double_list, bool_list,
      enum_list, object_list, list_list, map_list, recursive_class_list, map,
      string_map, int_map, enum_map, object_map, list_map, map_map,
      recursive_class_map);
}

struct _CoreTestsGolubetsTestAllNullableTypesWithoutRecursion {
  GObject parent_instance;

  gboolean* a_nullable_bool;
  int64_t* a_nullable_int;
  int64_t* a_nullable_int64;
  double* a_nullable_double;
  uint8_t* a_nullable_byte_array;
  size_t a_nullable_byte_array_length;
  int32_t* a_nullable4_byte_array;
  size_t a_nullable4_byte_array_length;
  int64_t* a_nullable8_byte_array;
  size_t a_nullable8_byte_array_length;
  double* a_nullable_float_array;
  size_t a_nullable_float_array_length;
  CoreTestsGolubetsTestAnEnum* a_nullable_enum;
  CoreTestsGolubetsTestAnotherEnum* another_nullable_enum;
  gchar* a_nullable_string;
  FlValue* a_nullable_object;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* enum_list;
  FlValue* object_list;
  FlValue* list_list;
  FlValue* map_list;
  FlValue* map;
  FlValue* string_map;
  FlValue* int_map;
  FlValue* enum_map;
  FlValue* object_map;
  FlValue* list_map;
  FlValue* map_map;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestAllNullableTypesWithoutRecursion,
              core_tests_golubets_test_all_nullable_types_without_recursion,
              G_TYPE_OBJECT)

static void
core_tests_golubets_test_all_nullable_types_without_recursion_dispose(
    GObject* object) {
  CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(object);
  g_clear_pointer(&self->a_nullable_bool, g_free);
  g_clear_pointer(&self->a_nullable_int, g_free);
  g_clear_pointer(&self->a_nullable_int64, g_free);
  g_clear_pointer(&self->a_nullable_double, g_free);
  g_clear_pointer(&self->a_nullable_enum, g_free);
  g_clear_pointer(&self->another_nullable_enum, g_free);
  g_clear_pointer(&self->a_nullable_string, g_free);
  g_clear_pointer(&self->a_nullable_object, fl_value_unref);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->enum_list, fl_value_unref);
  g_clear_pointer(&self->object_list, fl_value_unref);
  g_clear_pointer(&self->list_list, fl_value_unref);
  g_clear_pointer(&self->map_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  g_clear_pointer(&self->string_map, fl_value_unref);
  g_clear_pointer(&self->int_map, fl_value_unref);
  g_clear_pointer(&self->enum_map, fl_value_unref);
  g_clear_pointer(&self->object_map, fl_value_unref);
  g_clear_pointer(&self->list_map, fl_value_unref);
  g_clear_pointer(&self->map_map, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_all_nullable_types_without_recursion_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_all_nullable_types_without_recursion_init(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {}

static void
core_tests_golubets_test_all_nullable_types_without_recursion_class_init(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursionClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_all_nullable_types_without_recursion_dispose;
}

CoreTestsGolubetsTestAllNullableTypesWithoutRecursion*
core_tests_golubets_test_all_nullable_types_without_recursion_new(
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    int64_t* a_nullable_int64, double* a_nullable_double,
    const uint8_t* a_nullable_byte_array, size_t a_nullable_byte_array_length,
    const int32_t* a_nullable4_byte_array, size_t a_nullable4_byte_array_length,
    const int64_t* a_nullable8_byte_array, size_t a_nullable8_byte_array_length,
    const double* a_nullable_float_array, size_t a_nullable_float_array_length,
    CoreTestsGolubetsTestAnEnum* a_nullable_enum,
    CoreTestsGolubetsTestAnotherEnum* another_nullable_enum,
    const gchar* a_nullable_string, FlValue* a_nullable_object, FlValue* list,
    FlValue* string_list, FlValue* int_list, FlValue* double_list,
    FlValue* bool_list, FlValue* enum_list, FlValue* object_list,
    FlValue* list_list, FlValue* map_list, FlValue* map, FlValue* string_map,
    FlValue* int_map, FlValue* enum_map, FlValue* object_map, FlValue* list_map,
    FlValue* map_map) {
  CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(g_object_new(
          core_tests_golubets_test_all_nullable_types_without_recursion_get_type(),
          nullptr));
  if (a_nullable_bool != nullptr) {
    self->a_nullable_bool = static_cast<gboolean*>(malloc(sizeof(gboolean)));
    *self->a_nullable_bool = *a_nullable_bool;
  } else {
    self->a_nullable_bool = nullptr;
  }
  if (a_nullable_int != nullptr) {
    self->a_nullable_int = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int = *a_nullable_int;
  } else {
    self->a_nullable_int = nullptr;
  }
  if (a_nullable_int64 != nullptr) {
    self->a_nullable_int64 = static_cast<int64_t*>(malloc(sizeof(int64_t)));
    *self->a_nullable_int64 = *a_nullable_int64;
  } else {
    self->a_nullable_int64 = nullptr;
  }
  if (a_nullable_double != nullptr) {
    self->a_nullable_double = static_cast<double*>(malloc(sizeof(double)));
    *self->a_nullable_double = *a_nullable_double;
  } else {
    self->a_nullable_double = nullptr;
  }
  if (a_nullable_byte_array != nullptr) {
    self->a_nullable_byte_array = static_cast<uint8_t*>(
        memcpy(malloc(a_nullable_byte_array_length), a_nullable_byte_array,
               a_nullable_byte_array_length));
    self->a_nullable_byte_array_length = a_nullable_byte_array_length;
  } else {
    self->a_nullable_byte_array = nullptr;
    self->a_nullable_byte_array_length = 0;
  }
  if (a_nullable4_byte_array != nullptr) {
    self->a_nullable4_byte_array = static_cast<int32_t*>(
        memcpy(malloc(sizeof(int32_t) * a_nullable4_byte_array_length),
               a_nullable4_byte_array,
               sizeof(int32_t) * a_nullable4_byte_array_length));
    self->a_nullable4_byte_array_length = a_nullable4_byte_array_length;
  } else {
    self->a_nullable4_byte_array = nullptr;
    self->a_nullable4_byte_array_length = 0;
  }
  if (a_nullable8_byte_array != nullptr) {
    self->a_nullable8_byte_array = static_cast<int64_t*>(
        memcpy(malloc(sizeof(int64_t) * a_nullable8_byte_array_length),
               a_nullable8_byte_array,
               sizeof(int64_t) * a_nullable8_byte_array_length));
    self->a_nullable8_byte_array_length = a_nullable8_byte_array_length;
  } else {
    self->a_nullable8_byte_array = nullptr;
    self->a_nullable8_byte_array_length = 0;
  }
  if (a_nullable_float_array != nullptr) {
    self->a_nullable_float_array = static_cast<double*>(
        memcpy(malloc(sizeof(double) * a_nullable_float_array_length),
               a_nullable_float_array,
               sizeof(double) * a_nullable_float_array_length));
    self->a_nullable_float_array_length = a_nullable_float_array_length;
  } else {
    self->a_nullable_float_array = nullptr;
    self->a_nullable_float_array_length = 0;
  }
  if (a_nullable_enum != nullptr) {
    self->a_nullable_enum = static_cast<CoreTestsGolubetsTestAnEnum*>(
        malloc(sizeof(CoreTestsGolubetsTestAnEnum)));
    *self->a_nullable_enum = *a_nullable_enum;
  } else {
    self->a_nullable_enum = nullptr;
  }
  if (another_nullable_enum != nullptr) {
    self->another_nullable_enum =
        static_cast<CoreTestsGolubetsTestAnotherEnum*>(
            malloc(sizeof(CoreTestsGolubetsTestAnotherEnum)));
    *self->another_nullable_enum = *another_nullable_enum;
  } else {
    self->another_nullable_enum = nullptr;
  }
  if (a_nullable_string != nullptr) {
    self->a_nullable_string = g_strdup(a_nullable_string);
  } else {
    self->a_nullable_string = nullptr;
  }
  if (a_nullable_object != nullptr) {
    self->a_nullable_object = fl_value_ref(a_nullable_object);
  } else {
    self->a_nullable_object = nullptr;
  }
  if (list != nullptr) {
    self->list = fl_value_ref(list);
  } else {
    self->list = nullptr;
  }
  if (string_list != nullptr) {
    self->string_list = fl_value_ref(string_list);
  } else {
    self->string_list = nullptr;
  }
  if (int_list != nullptr) {
    self->int_list = fl_value_ref(int_list);
  } else {
    self->int_list = nullptr;
  }
  if (double_list != nullptr) {
    self->double_list = fl_value_ref(double_list);
  } else {
    self->double_list = nullptr;
  }
  if (bool_list != nullptr) {
    self->bool_list = fl_value_ref(bool_list);
  } else {
    self->bool_list = nullptr;
  }
  if (enum_list != nullptr) {
    self->enum_list = fl_value_ref(enum_list);
  } else {
    self->enum_list = nullptr;
  }
  if (object_list != nullptr) {
    self->object_list = fl_value_ref(object_list);
  } else {
    self->object_list = nullptr;
  }
  if (list_list != nullptr) {
    self->list_list = fl_value_ref(list_list);
  } else {
    self->list_list = nullptr;
  }
  if (map_list != nullptr) {
    self->map_list = fl_value_ref(map_list);
  } else {
    self->map_list = nullptr;
  }
  if (map != nullptr) {
    self->map = fl_value_ref(map);
  } else {
    self->map = nullptr;
  }
  if (string_map != nullptr) {
    self->string_map = fl_value_ref(string_map);
  } else {
    self->string_map = nullptr;
  }
  if (int_map != nullptr) {
    self->int_map = fl_value_ref(int_map);
  } else {
    self->int_map = nullptr;
  }
  if (enum_map != nullptr) {
    self->enum_map = fl_value_ref(enum_map);
  } else {
    self->enum_map = nullptr;
  }
  if (object_map != nullptr) {
    self->object_map = fl_value_ref(object_map);
  } else {
    self->object_map = nullptr;
  }
  if (list_map != nullptr) {
    self->list_map = fl_value_ref(list_map);
  } else {
    self->list_map = nullptr;
  }
  if (map_map != nullptr) {
    self->map_map = fl_value_ref(map_map);
  } else {
    self->map_map = nullptr;
  }
  return self;
}

gboolean*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable_bool(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_bool;
}

int64_t*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable_int(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_int;
}

int64_t*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable_int64(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_int64;
}

double*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable_double(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_double;
}

const uint8_t*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable_byte_array(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self,
    size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable_byte_array_length;
  return self->a_nullable_byte_array;
}

const int32_t*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable4_byte_array(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self,
    size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable4_byte_array_length;
  return self->a_nullable4_byte_array;
}

const int64_t*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable8_byte_array(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self,
    size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable8_byte_array_length;
  return self->a_nullable8_byte_array;
}

const double*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable_float_array(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self,
    size_t* length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  *length = self->a_nullable_float_array_length;
  return self->a_nullable_float_array;
}

CoreTestsGolubetsTestAnEnum*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable_enum(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_enum;
}

CoreTestsGolubetsTestAnotherEnum*
core_tests_golubets_test_all_nullable_types_without_recursion_get_another_nullable_enum(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->another_nullable_enum;
}

const gchar*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable_string(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_string;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_a_nullable_object(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->a_nullable_object;
}

FlValue* core_tests_golubets_test_all_nullable_types_without_recursion_get_list(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->list;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_string_list(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->string_list;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_int_list(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->int_list;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_double_list(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->double_list;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_bool_list(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->bool_list;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_enum_list(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->enum_list;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_object_list(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->object_list;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_list_list(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->list_list;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_map_list(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->map_list;
}

FlValue* core_tests_golubets_test_all_nullable_types_without_recursion_get_map(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->map;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_string_map(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->string_map;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_int_map(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->int_map;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_enum_map(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->enum_map;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_object_map(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->object_map;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_list_map(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->list_map;
}

FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_get_map_map(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(self),
      nullptr);
  return self->map_map;
}

static FlValue*
core_tests_golubets_test_all_nullable_types_without_recursion_to_list(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->a_nullable_bool != nullptr
                                   ? fl_value_new_bool(*self->a_nullable_bool)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_int64 != nullptr
                                   ? fl_value_new_int(*self->a_nullable_int64)
                                   : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_double != nullptr
                           ? fl_value_new_float(*self->a_nullable_double)
                           : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_byte_array != nullptr
                  ? fl_value_new_uint8_list(self->a_nullable_byte_array,
                                            self->a_nullable_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable4_byte_array != nullptr
                  ? fl_value_new_int32_list(self->a_nullable4_byte_array,
                                            self->a_nullable4_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable8_byte_array != nullptr
                  ? fl_value_new_int64_list(self->a_nullable8_byte_array,
                                            self->a_nullable8_byte_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values, self->a_nullable_float_array != nullptr
                  ? fl_value_new_float_list(self->a_nullable_float_array,
                                            self->a_nullable_float_array_length)
                  : fl_value_new_null());
  fl_value_append_take(
      values,
      self->a_nullable_enum != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                fl_value_new_int(*self->a_nullable_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  fl_value_append_take(
      values,
      self->another_nullable_enum != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                                fl_value_new_int(*self->another_nullable_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  fl_value_append_take(values,
                       self->a_nullable_string != nullptr
                           ? fl_value_new_string(self->a_nullable_string)
                           : fl_value_new_null());
  fl_value_append_take(values, self->a_nullable_object != nullptr
                                   ? fl_value_ref(self->a_nullable_object)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list != nullptr ? fl_value_ref(self->list)
                                                     : fl_value_new_null());
  fl_value_append_take(values, self->string_list != nullptr
                                   ? fl_value_ref(self->string_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->int_list != nullptr
                                   ? fl_value_ref(self->int_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->double_list != nullptr
                                   ? fl_value_ref(self->double_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->bool_list != nullptr
                                   ? fl_value_ref(self->bool_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->enum_list != nullptr
                                   ? fl_value_ref(self->enum_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->object_list != nullptr
                                   ? fl_value_ref(self->object_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list_list != nullptr
                                   ? fl_value_ref(self->list_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map_list != nullptr
                                   ? fl_value_ref(self->map_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map != nullptr ? fl_value_ref(self->map)
                                                    : fl_value_new_null());
  fl_value_append_take(values, self->string_map != nullptr
                                   ? fl_value_ref(self->string_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->int_map != nullptr
                                   ? fl_value_ref(self->int_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->enum_map != nullptr
                                   ? fl_value_ref(self->enum_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->object_map != nullptr
                                   ? fl_value_ref(self->object_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->list_map != nullptr
                                   ? fl_value_ref(self->list_map)
                                   : fl_value_new_null());
  fl_value_append_take(values, self->map_map != nullptr
                                   ? fl_value_ref(self->map_map)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsGolubetsTestAllNullableTypesWithoutRecursion*
core_tests_golubets_test_all_nullable_types_without_recursion_new_from_list(
    FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t* a_nullable_int64 = nullptr;
  int64_t a_nullable_int64_value;
  if (fl_value_get_type(value2) != FL_VALUE_TYPE_NULL) {
    a_nullable_int64_value = fl_value_get_int(value2);
    a_nullable_int64 = &a_nullable_int64_value;
  }
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double* a_nullable_double = nullptr;
  double a_nullable_double_value;
  if (fl_value_get_type(value3) != FL_VALUE_TYPE_NULL) {
    a_nullable_double_value = fl_value_get_float(value3);
    a_nullable_double = &a_nullable_double_value;
  }
  FlValue* value4 = fl_value_get_list_value(values, 4);
  const uint8_t* a_nullable_byte_array = nullptr;
  size_t a_nullable_byte_array_length = 0;
  if (fl_value_get_type(value4) != FL_VALUE_TYPE_NULL) {
    a_nullable_byte_array = fl_value_get_uint8_list(value4);
    a_nullable_byte_array_length = fl_value_get_length(value4);
  }
  FlValue* value5 = fl_value_get_list_value(values, 5);
  const int32_t* a_nullable4_byte_array = nullptr;
  size_t a_nullable4_byte_array_length = 0;
  if (fl_value_get_type(value5) != FL_VALUE_TYPE_NULL) {
    a_nullable4_byte_array = fl_value_get_int32_list(value5);
    a_nullable4_byte_array_length = fl_value_get_length(value5);
  }
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const int64_t* a_nullable8_byte_array = nullptr;
  size_t a_nullable8_byte_array_length = 0;
  if (fl_value_get_type(value6) != FL_VALUE_TYPE_NULL) {
    a_nullable8_byte_array = fl_value_get_int64_list(value6);
    a_nullable8_byte_array_length = fl_value_get_length(value6);
  }
  FlValue* value7 = fl_value_get_list_value(values, 7);
  const double* a_nullable_float_array = nullptr;
  size_t a_nullable_float_array_length = 0;
  if (fl_value_get_type(value7) != FL_VALUE_TYPE_NULL) {
    a_nullable_float_array = fl_value_get_float_list(value7);
    a_nullable_float_array_length = fl_value_get_length(value7);
  }
  FlValue* value8 = fl_value_get_list_value(values, 8);
  CoreTestsGolubetsTestAnEnum* a_nullable_enum = nullptr;
  CoreTestsGolubetsTestAnEnum a_nullable_enum_value;
  if (fl_value_get_type(value8) != FL_VALUE_TYPE_NULL) {
    a_nullable_enum_value = static_cast<CoreTestsGolubetsTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value8)))));
    a_nullable_enum = &a_nullable_enum_value;
  }
  FlValue* value9 = fl_value_get_list_value(values, 9);
  CoreTestsGolubetsTestAnotherEnum* another_nullable_enum = nullptr;
  CoreTestsGolubetsTestAnotherEnum another_nullable_enum_value;
  if (fl_value_get_type(value9) != FL_VALUE_TYPE_NULL) {
    another_nullable_enum_value = static_cast<CoreTestsGolubetsTestAnotherEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value9)))));
    another_nullable_enum = &another_nullable_enum_value;
  }
  FlValue* value10 = fl_value_get_list_value(values, 10);
  const gchar* a_nullable_string = nullptr;
  if (fl_value_get_type(value10) != FL_VALUE_TYPE_NULL) {
    a_nullable_string = fl_value_get_string(value10);
  }
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* a_nullable_object = nullptr;
  if (fl_value_get_type(value11) != FL_VALUE_TYPE_NULL) {
    a_nullable_object = value11;
  }
  FlValue* value12 = fl_value_get_list_value(values, 12);
  FlValue* list = nullptr;
  if (fl_value_get_type(value12) != FL_VALUE_TYPE_NULL) {
    list = value12;
  }
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* string_list = nullptr;
  if (fl_value_get_type(value13) != FL_VALUE_TYPE_NULL) {
    string_list = value13;
  }
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* int_list = nullptr;
  if (fl_value_get_type(value14) != FL_VALUE_TYPE_NULL) {
    int_list = value14;
  }
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* double_list = nullptr;
  if (fl_value_get_type(value15) != FL_VALUE_TYPE_NULL) {
    double_list = value15;
  }
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* bool_list = nullptr;
  if (fl_value_get_type(value16) != FL_VALUE_TYPE_NULL) {
    bool_list = value16;
  }
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* enum_list = nullptr;
  if (fl_value_get_type(value17) != FL_VALUE_TYPE_NULL) {
    enum_list = value17;
  }
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* object_list = nullptr;
  if (fl_value_get_type(value18) != FL_VALUE_TYPE_NULL) {
    object_list = value18;
  }
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* list_list = nullptr;
  if (fl_value_get_type(value19) != FL_VALUE_TYPE_NULL) {
    list_list = value19;
  }
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* map_list = nullptr;
  if (fl_value_get_type(value20) != FL_VALUE_TYPE_NULL) {
    map_list = value20;
  }
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* map = nullptr;
  if (fl_value_get_type(value21) != FL_VALUE_TYPE_NULL) {
    map = value21;
  }
  FlValue* value22 = fl_value_get_list_value(values, 22);
  FlValue* string_map = nullptr;
  if (fl_value_get_type(value22) != FL_VALUE_TYPE_NULL) {
    string_map = value22;
  }
  FlValue* value23 = fl_value_get_list_value(values, 23);
  FlValue* int_map = nullptr;
  if (fl_value_get_type(value23) != FL_VALUE_TYPE_NULL) {
    int_map = value23;
  }
  FlValue* value24 = fl_value_get_list_value(values, 24);
  FlValue* enum_map = nullptr;
  if (fl_value_get_type(value24) != FL_VALUE_TYPE_NULL) {
    enum_map = value24;
  }
  FlValue* value25 = fl_value_get_list_value(values, 25);
  FlValue* object_map = nullptr;
  if (fl_value_get_type(value25) != FL_VALUE_TYPE_NULL) {
    object_map = value25;
  }
  FlValue* value26 = fl_value_get_list_value(values, 26);
  FlValue* list_map = nullptr;
  if (fl_value_get_type(value26) != FL_VALUE_TYPE_NULL) {
    list_map = value26;
  }
  FlValue* value27 = fl_value_get_list_value(values, 27);
  FlValue* map_map = nullptr;
  if (fl_value_get_type(value27) != FL_VALUE_TYPE_NULL) {
    map_map = value27;
  }
  return core_tests_golubets_test_all_nullable_types_without_recursion_new(
      a_nullable_bool, a_nullable_int, a_nullable_int64, a_nullable_double,
      a_nullable_byte_array, a_nullable_byte_array_length,
      a_nullable4_byte_array, a_nullable4_byte_array_length,
      a_nullable8_byte_array, a_nullable8_byte_array_length,
      a_nullable_float_array, a_nullable_float_array_length, a_nullable_enum,
      another_nullable_enum, a_nullable_string, a_nullable_object, list,
      string_list, int_list, double_list, bool_list, enum_list, object_list,
      list_list, map_list, map, string_map, int_map, enum_map, object_map,
      list_map, map_map);
}

struct _CoreTestsGolubetsTestAllClassesWrapper {
  GObject parent_instance;

  CoreTestsGolubetsTestAllNullableTypes* all_nullable_types;
  CoreTestsGolubetsTestAllNullableTypesWithoutRecursion*
      all_nullable_types_without_recursion;
  CoreTestsGolubetsTestAllTypes* all_types;
  FlValue* class_list;
  FlValue* nullable_class_list;
  FlValue* class_map;
  FlValue* nullable_class_map;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestAllClassesWrapper,
              core_tests_golubets_test_all_classes_wrapper, G_TYPE_OBJECT)

static void core_tests_golubets_test_all_classes_wrapper_dispose(
    GObject* object) {
  CoreTestsGolubetsTestAllClassesWrapper* self =
      CORE_TESTS_GOLUBETS_TEST_ALL_CLASSES_WRAPPER(object);
  g_clear_object(&self->all_nullable_types);
  g_clear_object(&self->all_nullable_types_without_recursion);
  g_clear_object(&self->all_types);
  g_clear_pointer(&self->class_list, fl_value_unref);
  g_clear_pointer(&self->nullable_class_list, fl_value_unref);
  g_clear_pointer(&self->class_map, fl_value_unref);
  g_clear_pointer(&self->nullable_class_map, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golubets_test_all_classes_wrapper_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_all_classes_wrapper_init(
    CoreTestsGolubetsTestAllClassesWrapper* self) {}

static void core_tests_golubets_test_all_classes_wrapper_class_init(
    CoreTestsGolubetsTestAllClassesWrapperClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_all_classes_wrapper_dispose;
}

CoreTestsGolubetsTestAllClassesWrapper*
core_tests_golubets_test_all_classes_wrapper_new(
    CoreTestsGolubetsTestAllNullableTypes* all_nullable_types,
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion*
        all_nullable_types_without_recursion,
    CoreTestsGolubetsTestAllTypes* all_types, FlValue* class_list,
    FlValue* nullable_class_list, FlValue* class_map,
    FlValue* nullable_class_map) {
  CoreTestsGolubetsTestAllClassesWrapper* self =
      CORE_TESTS_GOLUBETS_TEST_ALL_CLASSES_WRAPPER(g_object_new(
          core_tests_golubets_test_all_classes_wrapper_get_type(), nullptr));
  self->all_nullable_types = CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
      g_object_ref(all_nullable_types));
  if (all_nullable_types_without_recursion != nullptr) {
    self->all_nullable_types_without_recursion =
        CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
            g_object_ref(all_nullable_types_without_recursion));
  } else {
    self->all_nullable_types_without_recursion = nullptr;
  }
  if (all_types != nullptr) {
    self->all_types =
        CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(g_object_ref(all_types));
  } else {
    self->all_types = nullptr;
  }
  self->class_list = fl_value_ref(class_list);
  if (nullable_class_list != nullptr) {
    self->nullable_class_list = fl_value_ref(nullable_class_list);
  } else {
    self->nullable_class_list = nullptr;
  }
  self->class_map = fl_value_ref(class_map);
  if (nullable_class_map != nullptr) {
    self->nullable_class_map = fl_value_ref(nullable_class_map);
  } else {
    self->nullable_class_map = nullptr;
  }
  return self;
}

CoreTestsGolubetsTestAllNullableTypes*
core_tests_golubets_test_all_classes_wrapper_get_all_nullable_types(
    CoreTestsGolubetsTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->all_nullable_types;
}

CoreTestsGolubetsTestAllNullableTypesWithoutRecursion*
core_tests_golubets_test_all_classes_wrapper_get_all_nullable_types_without_recursion(
    CoreTestsGolubetsTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->all_nullable_types_without_recursion;
}

CoreTestsGolubetsTestAllTypes*
core_tests_golubets_test_all_classes_wrapper_get_all_types(
    CoreTestsGolubetsTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->all_types;
}

FlValue* core_tests_golubets_test_all_classes_wrapper_get_class_list(
    CoreTestsGolubetsTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->class_list;
}

FlValue* core_tests_golubets_test_all_classes_wrapper_get_nullable_class_list(
    CoreTestsGolubetsTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->nullable_class_list;
}

FlValue* core_tests_golubets_test_all_classes_wrapper_get_class_map(
    CoreTestsGolubetsTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->class_map;
}

FlValue* core_tests_golubets_test_all_classes_wrapper_get_nullable_class_map(
    CoreTestsGolubetsTestAllClassesWrapper* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_ALL_CLASSES_WRAPPER(self),
                       nullptr);
  return self->nullable_class_map;
}

static FlValue* core_tests_golubets_test_all_classes_wrapper_to_list(
    CoreTestsGolubetsTestAllClassesWrapper* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values,
                       fl_value_new_custom_object(
                           core_tests_golubets_test_all_nullable_types_type_id,
                           G_OBJECT(self->all_nullable_types)));
  fl_value_append_take(
      values,
      self->all_nullable_types_without_recursion != nullptr
          ? fl_value_new_custom_object(
                core_tests_golubets_test_all_nullable_types_without_recursion_type_id,
                G_OBJECT(self->all_nullable_types_without_recursion))
          : fl_value_new_null());
  fl_value_append_take(values,
                       self->all_types != nullptr
                           ? fl_value_new_custom_object(
                                 core_tests_golubets_test_all_types_type_id,
                                 G_OBJECT(self->all_types))
                           : fl_value_new_null());
  fl_value_append_take(values, fl_value_ref(self->class_list));
  fl_value_append_take(values, self->nullable_class_list != nullptr
                                   ? fl_value_ref(self->nullable_class_list)
                                   : fl_value_new_null());
  fl_value_append_take(values, fl_value_ref(self->class_map));
  fl_value_append_take(values, self->nullable_class_map != nullptr
                                   ? fl_value_ref(self->nullable_class_map)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsGolubetsTestAllClassesWrapper*
core_tests_golubets_test_all_classes_wrapper_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  CoreTestsGolubetsTestAllNullableTypes* all_nullable_types =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  FlValue* value1 = fl_value_get_list_value(values, 1);
  CoreTestsGolubetsTestAllNullableTypesWithoutRecursion*
      all_nullable_types_without_recursion = nullptr;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    all_nullable_types_without_recursion =
        CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
            fl_value_get_custom_value_object(value1));
  }
  FlValue* value2 = fl_value_get_list_value(values, 2);
  CoreTestsGolubetsTestAllTypes* all_types = nullptr;
  if (fl_value_get_type(value2) != FL_VALUE_TYPE_NULL) {
    all_types = CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(
        fl_value_get_custom_value_object(value2));
  }
  FlValue* value3 = fl_value_get_list_value(values, 3);
  FlValue* class_list = value3;
  FlValue* value4 = fl_value_get_list_value(values, 4);
  FlValue* nullable_class_list = nullptr;
  if (fl_value_get_type(value4) != FL_VALUE_TYPE_NULL) {
    nullable_class_list = value4;
  }
  FlValue* value5 = fl_value_get_list_value(values, 5);
  FlValue* class_map = value5;
  FlValue* value6 = fl_value_get_list_value(values, 6);
  FlValue* nullable_class_map = nullptr;
  if (fl_value_get_type(value6) != FL_VALUE_TYPE_NULL) {
    nullable_class_map = value6;
  }
  return core_tests_golubets_test_all_classes_wrapper_new(
      all_nullable_types, all_nullable_types_without_recursion, all_types,
      class_list, nullable_class_list, class_map, nullable_class_map);
}

struct _CoreTestsGolubetsTestImmutableAllTypes {
  GObject parent_instance;

  gboolean a_bool;
  int64_t an_int;
  int64_t an_int64;
  double a_double;
  CoreTestsGolubetsTestAnEnum an_enum;
  CoreTestsGolubetsTestAnotherEnum another_enum;
  gchar* a_string;
  FlValue* an_object;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* enum_list;
  FlValue* object_list;
  FlValue* list_list;
  FlValue* map_list;
  FlValue* map;
  FlValue* string_map;
  FlValue* int_map;
  FlValue* enum_map;
  FlValue* object_map;
  FlValue* list_map;
  FlValue* map_map;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestImmutableAllTypes,
              core_tests_golubets_test_immutable_all_types, G_TYPE_OBJECT)

static void core_tests_golubets_test_immutable_all_types_dispose(
    GObject* object) {
  CoreTestsGolubetsTestImmutableAllTypes* self =
      CORE_TESTS_GOLUBETS_TEST_IMMUTABLE_ALL_TYPES(object);
  g_clear_pointer(&self->a_string, g_free);
  g_clear_pointer(&self->an_object, fl_value_unref);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->enum_list, fl_value_unref);
  g_clear_pointer(&self->object_list, fl_value_unref);
  g_clear_pointer(&self->list_list, fl_value_unref);
  g_clear_pointer(&self->map_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  g_clear_pointer(&self->string_map, fl_value_unref);
  g_clear_pointer(&self->int_map, fl_value_unref);
  g_clear_pointer(&self->enum_map, fl_value_unref);
  g_clear_pointer(&self->object_map, fl_value_unref);
  g_clear_pointer(&self->list_map, fl_value_unref);
  g_clear_pointer(&self->map_map, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golubets_test_immutable_all_types_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_immutable_all_types_init(
    CoreTestsGolubetsTestImmutableAllTypes* self) {}

static void core_tests_golubets_test_immutable_all_types_class_init(
    CoreTestsGolubetsTestImmutableAllTypesClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_immutable_all_types_dispose;
}

CoreTestsGolubetsTestImmutableAllTypes*
core_tests_golubets_test_immutable_all_types_new(
    gboolean a_bool, int64_t an_int, int64_t an_int64, double a_double,
    CoreTestsGolubetsTestAnEnum an_enum,
    CoreTestsGolubetsTestAnotherEnum another_enum, const gchar* a_string,
    FlValue* an_object, FlValue* list, FlValue* string_list, FlValue* int_list,
    FlValue* double_list, FlValue* bool_list, FlValue* enum_list,
    FlValue* object_list, FlValue* list_list, FlValue* map_list, FlValue* map,
    FlValue* string_map, FlValue* int_map, FlValue* enum_map,
    FlValue* object_map, FlValue* list_map, FlValue* map_map) {
  CoreTestsGolubetsTestImmutableAllTypes* self =
      CORE_TESTS_GOLUBETS_TEST_IMMUTABLE_ALL_TYPES(g_object_new(
          core_tests_golubets_test_immutable_all_types_get_type(), nullptr));
  self->a_bool = a_bool;
  self->an_int = an_int;
  self->an_int64 = an_int64;
  self->a_double = a_double;
  self->an_enum = an_enum;
  self->another_enum = another_enum;
  self->a_string = g_strdup(a_string);
  self->an_object = fl_value_ref(an_object);
  self->list = fl_value_ref(list);
  self->string_list = fl_value_ref(string_list);
  self->int_list = fl_value_ref(int_list);
  self->double_list = fl_value_ref(double_list);
  self->bool_list = fl_value_ref(bool_list);
  self->enum_list = fl_value_ref(enum_list);
  self->object_list = fl_value_ref(object_list);
  self->list_list = fl_value_ref(list_list);
  self->map_list = fl_value_ref(map_list);
  self->map = fl_value_ref(map);
  self->string_map = fl_value_ref(string_map);
  self->int_map = fl_value_ref(int_map);
  self->enum_map = fl_value_ref(enum_map);
  self->object_map = fl_value_ref(object_map);
  self->list_map = fl_value_ref(list_map);
  self->map_map = fl_value_ref(map_map);
  return self;
}

gboolean core_tests_golubets_test_immutable_all_types_get_a_bool(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       FALSE);
  return self->a_bool;
}

int64_t core_tests_golubets_test_immutable_all_types_get_an_int(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       0);
  return self->an_int;
}

int64_t core_tests_golubets_test_immutable_all_types_get_an_int64(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       0);
  return self->an_int64;
}

double core_tests_golubets_test_immutable_all_types_get_a_double(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       0.0);
  return self->a_double;
}

CoreTestsGolubetsTestAnEnum
core_tests_golubets_test_immutable_all_types_get_an_enum(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       static_cast<CoreTestsGolubetsTestAnEnum>(0));
  return self->an_enum;
}

CoreTestsGolubetsTestAnotherEnum
core_tests_golubets_test_immutable_all_types_get_another_enum(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       static_cast<CoreTestsGolubetsTestAnotherEnum>(0));
  return self->another_enum;
}

const gchar* core_tests_golubets_test_immutable_all_types_get_a_string(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->a_string;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_an_object(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->an_object;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_list(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->list;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_string_list(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->string_list;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_int_list(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->int_list;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_double_list(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->double_list;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_bool_list(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->bool_list;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_enum_list(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->enum_list;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_object_list(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->object_list;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_list_list(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->list_list;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_map_list(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->map_list;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_map(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->map;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_string_map(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->string_map;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_int_map(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->int_map;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_enum_map(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->enum_map;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_object_map(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->object_map;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_list_map(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->list_map;
}

FlValue* core_tests_golubets_test_immutable_all_types_get_map_map(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_IMMUTABLE_ALL_TYPES(self),
                       nullptr);
  return self->map_map;
}

static FlValue* core_tests_golubets_test_immutable_all_types_to_list(
    CoreTestsGolubetsTestImmutableAllTypes* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->a_bool));
  fl_value_append_take(values, fl_value_new_int(self->an_int));
  fl_value_append_take(values, fl_value_new_int(self->an_int64));
  fl_value_append_take(values, fl_value_new_float(self->a_double));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                  fl_value_new_int(self->an_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                                  fl_value_new_int(self->another_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(values, fl_value_new_string(self->a_string));
  fl_value_append_take(values, fl_value_ref(self->an_object));
  fl_value_append_take(values, fl_value_ref(self->list));
  fl_value_append_take(values, fl_value_ref(self->string_list));
  fl_value_append_take(values, fl_value_ref(self->int_list));
  fl_value_append_take(values, fl_value_ref(self->double_list));
  fl_value_append_take(values, fl_value_ref(self->bool_list));
  fl_value_append_take(values, fl_value_ref(self->enum_list));
  fl_value_append_take(values, fl_value_ref(self->object_list));
  fl_value_append_take(values, fl_value_ref(self->list_list));
  fl_value_append_take(values, fl_value_ref(self->map_list));
  fl_value_append_take(values, fl_value_ref(self->map));
  fl_value_append_take(values, fl_value_ref(self->string_map));
  fl_value_append_take(values, fl_value_ref(self->int_map));
  fl_value_append_take(values, fl_value_ref(self->enum_map));
  fl_value_append_take(values, fl_value_ref(self->object_map));
  fl_value_append_take(values, fl_value_ref(self->list_map));
  fl_value_append_take(values, fl_value_ref(self->map_map));
  return values;
}

static CoreTestsGolubetsTestImmutableAllTypes*
core_tests_golubets_test_immutable_all_types_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t an_int = fl_value_get_int(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t an_int64 = fl_value_get_int(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double a_double = fl_value_get_float(value3);
  FlValue* value4 = fl_value_get_list_value(values, 4);
  CoreTestsGolubetsTestAnEnum an_enum =
      static_cast<CoreTestsGolubetsTestAnEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value4)))));
  FlValue* value5 = fl_value_get_list_value(values, 5);
  CoreTestsGolubetsTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubetsTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value5)))));
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const gchar* a_string = fl_value_get_string(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  FlValue* an_object = value7;
  FlValue* value8 = fl_value_get_list_value(values, 8);
  FlValue* list = value8;
  FlValue* value9 = fl_value_get_list_value(values, 9);
  FlValue* string_list = value9;
  FlValue* value10 = fl_value_get_list_value(values, 10);
  FlValue* int_list = value10;
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* double_list = value11;
  FlValue* value12 = fl_value_get_list_value(values, 12);
  FlValue* bool_list = value12;
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* enum_list = value13;
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* object_list = value14;
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* list_list = value15;
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* map_list = value16;
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* map = value17;
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* string_map = value18;
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* int_map = value19;
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* enum_map = value20;
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* object_map = value21;
  FlValue* value22 = fl_value_get_list_value(values, 22);
  FlValue* list_map = value22;
  FlValue* value23 = fl_value_get_list_value(values, 23);
  FlValue* map_map = value23;
  return core_tests_golubets_test_immutable_all_types_new(
      a_bool, an_int, an_int64, a_double, an_enum, another_enum, a_string,
      an_object, list, string_list, int_list, double_list, bool_list, enum_list,
      object_list, list_list, map_list, map, string_map, int_map, enum_map,
      object_map, list_map, map_map);
}

struct _CoreTestsGolubetsTestAllTypesWithDefaults {
  GObject parent_instance;

  gboolean a_bool;
  int64_t an_int;
  int64_t an_int64;
  double a_double;
  CoreTestsGolubetsTestAnEnum an_enum;
  CoreTestsGolubetsTestAnotherEnum another_enum;
  gchar* a_string;
  FlValue* an_object;
  FlValue* list;
  FlValue* string_list;
  FlValue* int_list;
  FlValue* double_list;
  FlValue* bool_list;
  FlValue* enum_list;
  FlValue* object_list;
  FlValue* list_list;
  FlValue* map_list;
  FlValue* map;
  FlValue* string_map;
  FlValue* int_map;
  FlValue* enum_map;
  FlValue* object_map;
  FlValue* list_map;
  FlValue* map_map;
  CoreTestsGolubetsTestImmutableAllTypes* all_types;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestAllTypesWithDefaults,
              core_tests_golubets_test_all_types_with_defaults, G_TYPE_OBJECT)

static void core_tests_golubets_test_all_types_with_defaults_dispose(
    GObject* object) {
  CoreTestsGolubetsTestAllTypesWithDefaults* self =
      CORE_TESTS_GOLUBETS_TEST_ALL_TYPES_WITH_DEFAULTS(object);
  g_clear_pointer(&self->a_string, g_free);
  g_clear_pointer(&self->an_object, fl_value_unref);
  g_clear_pointer(&self->list, fl_value_unref);
  g_clear_pointer(&self->string_list, fl_value_unref);
  g_clear_pointer(&self->int_list, fl_value_unref);
  g_clear_pointer(&self->double_list, fl_value_unref);
  g_clear_pointer(&self->bool_list, fl_value_unref);
  g_clear_pointer(&self->enum_list, fl_value_unref);
  g_clear_pointer(&self->object_list, fl_value_unref);
  g_clear_pointer(&self->list_list, fl_value_unref);
  g_clear_pointer(&self->map_list, fl_value_unref);
  g_clear_pointer(&self->map, fl_value_unref);
  g_clear_pointer(&self->string_map, fl_value_unref);
  g_clear_pointer(&self->int_map, fl_value_unref);
  g_clear_pointer(&self->enum_map, fl_value_unref);
  g_clear_pointer(&self->object_map, fl_value_unref);
  g_clear_pointer(&self->list_map, fl_value_unref);
  g_clear_pointer(&self->map_map, fl_value_unref);
  g_clear_object(&self->all_types);
  G_OBJECT_CLASS(core_tests_golubets_test_all_types_with_defaults_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_all_types_with_defaults_init(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {}

static void core_tests_golubets_test_all_types_with_defaults_class_init(
    CoreTestsGolubetsTestAllTypesWithDefaultsClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_all_types_with_defaults_dispose;
}

CoreTestsGolubetsTestAllTypesWithDefaults*
core_tests_golubets_test_all_types_with_defaults_new(
    gboolean a_bool, int64_t an_int, int64_t an_int64, double a_double,
    CoreTestsGolubetsTestAnEnum an_enum,
    CoreTestsGolubetsTestAnotherEnum another_enum, const gchar* a_string,
    FlValue* an_object, FlValue* list, FlValue* string_list, FlValue* int_list,
    FlValue* double_list, FlValue* bool_list, FlValue* enum_list,
    FlValue* object_list, FlValue* list_list, FlValue* map_list, FlValue* map,
    FlValue* string_map, FlValue* int_map, FlValue* enum_map,
    FlValue* object_map, FlValue* list_map, FlValue* map_map,
    CoreTestsGolubetsTestImmutableAllTypes* all_types) {
  CoreTestsGolubetsTestAllTypesWithDefaults* self =
      CORE_TESTS_GOLUBETS_TEST_ALL_TYPES_WITH_DEFAULTS(g_object_new(
          core_tests_golubets_test_all_types_with_defaults_get_type(),
          nullptr));
  self->a_bool = a_bool;
  self->an_int = an_int;
  self->an_int64 = an_int64;
  self->a_double = a_double;
  self->an_enum = an_enum;
  self->another_enum = another_enum;
  self->a_string = g_strdup(a_string);
  self->an_object = fl_value_ref(an_object);
  self->list = fl_value_ref(list);
  self->string_list = fl_value_ref(string_list);
  self->int_list = fl_value_ref(int_list);
  self->double_list = fl_value_ref(double_list);
  self->bool_list = fl_value_ref(bool_list);
  self->enum_list = fl_value_ref(enum_list);
  self->object_list = fl_value_ref(object_list);
  self->list_list = fl_value_ref(list_list);
  self->map_list = fl_value_ref(map_list);
  self->map = fl_value_ref(map);
  self->string_map = fl_value_ref(string_map);
  self->int_map = fl_value_ref(int_map);
  self->enum_map = fl_value_ref(enum_map);
  self->object_map = fl_value_ref(object_map);
  self->list_map = fl_value_ref(list_map);
  self->map_map = fl_value_ref(map_map);
  self->all_types =
      CORE_TESTS_GOLUBETS_TEST_IMMUTABLE_ALL_TYPES(g_object_ref(all_types));
  return self;
}

gboolean core_tests_golubets_test_all_types_with_defaults_get_a_bool(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), FALSE);
  return self->a_bool;
}

int64_t core_tests_golubets_test_all_types_with_defaults_get_an_int(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), 0);
  return self->an_int;
}

int64_t core_tests_golubets_test_all_types_with_defaults_get_an_int64(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), 0);
  return self->an_int64;
}

double core_tests_golubets_test_all_types_with_defaults_get_a_double(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), 0.0);
  return self->a_double;
}

CoreTestsGolubetsTestAnEnum
core_tests_golubets_test_all_types_with_defaults_get_an_enum(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
      static_cast<CoreTestsGolubetsTestAnEnum>(0));
  return self->an_enum;
}

CoreTestsGolubetsTestAnotherEnum
core_tests_golubets_test_all_types_with_defaults_get_another_enum(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self),
      static_cast<CoreTestsGolubetsTestAnotherEnum>(0));
  return self->another_enum;
}

const gchar* core_tests_golubets_test_all_types_with_defaults_get_a_string(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->a_string;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_an_object(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->an_object;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_list(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->list;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_string_list(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->string_list;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_int_list(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->int_list;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_double_list(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->double_list;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_bool_list(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->bool_list;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_enum_list(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->enum_list;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_object_list(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->object_list;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_list_list(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->list_list;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_map_list(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->map_list;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_map(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->map;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_string_map(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->string_map;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_int_map(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->int_map;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_enum_map(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->enum_map;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_object_map(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->object_map;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_list_map(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->list_map;
}

FlValue* core_tests_golubets_test_all_types_with_defaults_get_map_map(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->map_map;
}

CoreTestsGolubetsTestImmutableAllTypes*
core_tests_golubets_test_all_types_with_defaults_get_all_types(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_ALL_TYPES_WITH_DEFAULTS(self), nullptr);
  return self->all_types;
}

static FlValue* core_tests_golubets_test_all_types_with_defaults_to_list(
    CoreTestsGolubetsTestAllTypesWithDefaults* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, fl_value_new_bool(self->a_bool));
  fl_value_append_take(values, fl_value_new_int(self->an_int));
  fl_value_append_take(values, fl_value_new_int(self->an_int64));
  fl_value_append_take(values, fl_value_new_float(self->a_double));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                  fl_value_new_int(self->an_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(
      values, fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                                  fl_value_new_int(self->another_enum),
                                  (GDestroyNotify)fl_value_unref));
  fl_value_append_take(values, fl_value_new_string(self->a_string));
  fl_value_append_take(values, fl_value_ref(self->an_object));
  fl_value_append_take(values, fl_value_ref(self->list));
  fl_value_append_take(values, fl_value_ref(self->string_list));
  fl_value_append_take(values, fl_value_ref(self->int_list));
  fl_value_append_take(values, fl_value_ref(self->double_list));
  fl_value_append_take(values, fl_value_ref(self->bool_list));
  fl_value_append_take(values, fl_value_ref(self->enum_list));
  fl_value_append_take(values, fl_value_ref(self->object_list));
  fl_value_append_take(values, fl_value_ref(self->list_list));
  fl_value_append_take(values, fl_value_ref(self->map_list));
  fl_value_append_take(values, fl_value_ref(self->map));
  fl_value_append_take(values, fl_value_ref(self->string_map));
  fl_value_append_take(values, fl_value_ref(self->int_map));
  fl_value_append_take(values, fl_value_ref(self->enum_map));
  fl_value_append_take(values, fl_value_ref(self->object_map));
  fl_value_append_take(values, fl_value_ref(self->list_map));
  fl_value_append_take(values, fl_value_ref(self->map_map));
  fl_value_append_take(values,
                       fl_value_new_custom_object(
                           core_tests_golubets_test_immutable_all_types_type_id,
                           G_OBJECT(self->all_types)));
  return values;
}

static CoreTestsGolubetsTestAllTypesWithDefaults*
core_tests_golubets_test_all_types_with_defaults_new_from_list(
    FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  FlValue* value1 = fl_value_get_list_value(values, 1);
  int64_t an_int = fl_value_get_int(value1);
  FlValue* value2 = fl_value_get_list_value(values, 2);
  int64_t an_int64 = fl_value_get_int(value2);
  FlValue* value3 = fl_value_get_list_value(values, 3);
  double a_double = fl_value_get_float(value3);
  FlValue* value4 = fl_value_get_list_value(values, 4);
  CoreTestsGolubetsTestAnEnum an_enum =
      static_cast<CoreTestsGolubetsTestAnEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value4)))));
  FlValue* value5 = fl_value_get_list_value(values, 5);
  CoreTestsGolubetsTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubetsTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value5)))));
  FlValue* value6 = fl_value_get_list_value(values, 6);
  const gchar* a_string = fl_value_get_string(value6);
  FlValue* value7 = fl_value_get_list_value(values, 7);
  FlValue* an_object = value7;
  FlValue* value8 = fl_value_get_list_value(values, 8);
  FlValue* list = value8;
  FlValue* value9 = fl_value_get_list_value(values, 9);
  FlValue* string_list = value9;
  FlValue* value10 = fl_value_get_list_value(values, 10);
  FlValue* int_list = value10;
  FlValue* value11 = fl_value_get_list_value(values, 11);
  FlValue* double_list = value11;
  FlValue* value12 = fl_value_get_list_value(values, 12);
  FlValue* bool_list = value12;
  FlValue* value13 = fl_value_get_list_value(values, 13);
  FlValue* enum_list = value13;
  FlValue* value14 = fl_value_get_list_value(values, 14);
  FlValue* object_list = value14;
  FlValue* value15 = fl_value_get_list_value(values, 15);
  FlValue* list_list = value15;
  FlValue* value16 = fl_value_get_list_value(values, 16);
  FlValue* map_list = value16;
  FlValue* value17 = fl_value_get_list_value(values, 17);
  FlValue* map = value17;
  FlValue* value18 = fl_value_get_list_value(values, 18);
  FlValue* string_map = value18;
  FlValue* value19 = fl_value_get_list_value(values, 19);
  FlValue* int_map = value19;
  FlValue* value20 = fl_value_get_list_value(values, 20);
  FlValue* enum_map = value20;
  FlValue* value21 = fl_value_get_list_value(values, 21);
  FlValue* object_map = value21;
  FlValue* value22 = fl_value_get_list_value(values, 22);
  FlValue* list_map = value22;
  FlValue* value23 = fl_value_get_list_value(values, 23);
  FlValue* map_map = value23;
  FlValue* value24 = fl_value_get_list_value(values, 24);
  CoreTestsGolubetsTestImmutableAllTypes* all_types =
      CORE_TESTS_GOLUBETS_TEST_IMMUTABLE_ALL_TYPES(
          fl_value_get_custom_value_object(value24));
  return core_tests_golubets_test_all_types_with_defaults_new(
      a_bool, an_int, an_int64, a_double, an_enum, another_enum, a_string,
      an_object, list, string_list, int_list, double_list, bool_list, enum_list,
      object_list, list_list, map_list, map, string_map, int_map, enum_map,
      object_map, list_map, map_map, all_types);
}

struct _CoreTestsGolubetsTestTestMessage {
  GObject parent_instance;

  FlValue* test_list;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestTestMessage,
              core_tests_golubets_test_test_message, G_TYPE_OBJECT)

static void core_tests_golubets_test_test_message_dispose(GObject* object) {
  CoreTestsGolubetsTestTestMessage* self =
      CORE_TESTS_GOLUBETS_TEST_TEST_MESSAGE(object);
  g_clear_pointer(&self->test_list, fl_value_unref);
  G_OBJECT_CLASS(core_tests_golubets_test_test_message_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_test_message_init(
    CoreTestsGolubetsTestTestMessage* self) {}

static void core_tests_golubets_test_test_message_class_init(
    CoreTestsGolubetsTestTestMessageClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_test_message_dispose;
}

CoreTestsGolubetsTestTestMessage* core_tests_golubets_test_test_message_new(
    FlValue* test_list) {
  CoreTestsGolubetsTestTestMessage* self =
      CORE_TESTS_GOLUBETS_TEST_TEST_MESSAGE(g_object_new(
          core_tests_golubets_test_test_message_get_type(), nullptr));
  if (test_list != nullptr) {
    self->test_list = fl_value_ref(test_list);
  } else {
    self->test_list = nullptr;
  }
  return self;
}

FlValue* core_tests_golubets_test_test_message_get_test_list(
    CoreTestsGolubetsTestTestMessage* self) {
  g_return_val_if_fail(CORE_TESTS_GOLUBETS_TEST_IS_TEST_MESSAGE(self), nullptr);
  return self->test_list;
}

static FlValue* core_tests_golubets_test_test_message_to_list(
    CoreTestsGolubetsTestTestMessage* self) {
  FlValue* values = fl_value_new_list();
  fl_value_append_take(values, self->test_list != nullptr
                                   ? fl_value_ref(self->test_list)
                                   : fl_value_new_null());
  return values;
}

static CoreTestsGolubetsTestTestMessage*
core_tests_golubets_test_test_message_new_from_list(FlValue* values) {
  FlValue* value0 = fl_value_get_list_value(values, 0);
  FlValue* test_list = nullptr;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    test_list = value0;
  }
  return core_tests_golubets_test_test_message_new(test_list);
}

struct _CoreTestsGolubetsTestGolubMessageCodec {
  FlStandardMessageCodec parent_instance;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestGolubMessageCodec,
              core_tests_golubets_test_golub_message_codec,
              fl_standard_message_codec_get_type())

const int core_tests_golubets_test_an_enum_type_id = 129;
const int core_tests_golubets_test_another_enum_type_id = 130;
const int core_tests_golubets_test_unused_class_type_id = 131;
const int core_tests_golubets_test_all_types_type_id = 132;
const int core_tests_golubets_test_all_nullable_types_type_id = 133;
const int
    core_tests_golubets_test_all_nullable_types_without_recursion_type_id = 134;
const int core_tests_golubets_test_all_classes_wrapper_type_id = 135;
const int core_tests_golubets_test_immutable_all_types_type_id = 136;
const int core_tests_golubets_test_all_types_with_defaults_type_id = 137;
const int core_tests_golubets_test_test_message_type_id = 138;

static gboolean
core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_an_enum(
    FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value,
    GError** error) {
  uint8_t type = core_tests_golubets_test_an_enum_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  return fl_standard_message_codec_write_value(codec, buffer, value, error);
}

static gboolean
core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_another_enum(
    FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value,
    GError** error) {
  uint8_t type = core_tests_golubets_test_another_enum_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  return fl_standard_message_codec_write_value(codec, buffer, value, error);
}

static gboolean
core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_unused_class(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubetsTestUnusedClass* value, GError** error) {
  uint8_t type = core_tests_golubets_test_unused_class_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golubets_test_unused_class_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_all_types(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubetsTestAllTypes* value, GError** error) {
  uint8_t type = core_tests_golubets_test_all_types_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values = core_tests_golubets_test_all_types_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_all_nullable_types(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubetsTestAllNullableTypes* value, GError** error) {
  uint8_t type = core_tests_golubets_test_all_nullable_types_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golubets_test_all_nullable_types_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_all_nullable_types_without_recursion(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* value,
    GError** error) {
  uint8_t type =
      core_tests_golubets_test_all_nullable_types_without_recursion_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golubets_test_all_nullable_types_without_recursion_to_list(
          value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_all_classes_wrapper(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubetsTestAllClassesWrapper* value, GError** error) {
  uint8_t type = core_tests_golubets_test_all_classes_wrapper_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golubets_test_all_classes_wrapper_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_immutable_all_types(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubetsTestImmutableAllTypes* value, GError** error) {
  uint8_t type = core_tests_golubets_test_immutable_all_types_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golubets_test_immutable_all_types_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_all_types_with_defaults(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubetsTestAllTypesWithDefaults* value, GError** error) {
  uint8_t type = core_tests_golubets_test_all_types_with_defaults_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golubets_test_all_types_with_defaults_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean
core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_test_message(
    FlStandardMessageCodec* codec, GByteArray* buffer,
    CoreTestsGolubetsTestTestMessage* value, GError** error) {
  uint8_t type = core_tests_golubets_test_test_message_type_id;
  g_byte_array_append(buffer, &type, sizeof(uint8_t));
  g_autoptr(FlValue) values =
      core_tests_golubets_test_test_message_to_list(value);
  return fl_standard_message_codec_write_value(codec, buffer, values, error);
}

static gboolean core_tests_golubets_test_golub_message_codec_write_value(
    FlStandardMessageCodec* codec, GByteArray* buffer, FlValue* value,
    GError** error) {
  if (fl_value_get_type(value) == FL_VALUE_TYPE_CUSTOM) {
    switch (fl_value_get_custom_type(value)) {
      case core_tests_golubets_test_an_enum_type_id:
        return core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_an_enum(
            codec, buffer,
            reinterpret_cast<FlValue*>(
                const_cast<gpointer>(fl_value_get_custom_value(value))),
            error);
      case core_tests_golubets_test_another_enum_type_id:
        return core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_another_enum(
            codec, buffer,
            reinterpret_cast<FlValue*>(
                const_cast<gpointer>(fl_value_get_custom_value(value))),
            error);
      case core_tests_golubets_test_unused_class_type_id:
        return core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_unused_class(
            codec, buffer,
            CORE_TESTS_GOLUBETS_TEST_UNUSED_CLASS(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golubets_test_all_types_type_id:
        return core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_all_types(
            codec, buffer,
            CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golubets_test_all_nullable_types_type_id:
        return core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_all_nullable_types(
            codec, buffer,
            CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golubets_test_all_nullable_types_without_recursion_type_id:
        return core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_all_nullable_types_without_recursion(
            codec, buffer,
            CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golubets_test_all_classes_wrapper_type_id:
        return core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_all_classes_wrapper(
            codec, buffer,
            CORE_TESTS_GOLUBETS_TEST_ALL_CLASSES_WRAPPER(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golubets_test_immutable_all_types_type_id:
        return core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_immutable_all_types(
            codec, buffer,
            CORE_TESTS_GOLUBETS_TEST_IMMUTABLE_ALL_TYPES(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golubets_test_all_types_with_defaults_type_id:
        return core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_all_types_with_defaults(
            codec, buffer,
            CORE_TESTS_GOLUBETS_TEST_ALL_TYPES_WITH_DEFAULTS(
                fl_value_get_custom_value_object(value)),
            error);
      case core_tests_golubets_test_test_message_type_id:
        return core_tests_golubets_test_golub_message_codec_write_core_tests_golubets_test_test_message(
            codec, buffer,
            CORE_TESTS_GOLUBETS_TEST_TEST_MESSAGE(
                fl_value_get_custom_value_object(value)),
            error);
    }
  }

  return FL_STANDARD_MESSAGE_CODEC_CLASS(
             core_tests_golubets_test_golub_message_codec_parent_class)
      ->write_value(codec, buffer, value, error);
}

static FlValue*
core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_an_enum(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  return fl_value_new_custom(
      core_tests_golubets_test_an_enum_type_id,
      fl_standard_message_codec_read_value(codec, buffer, offset, error),
      (GDestroyNotify)fl_value_unref);
}

static FlValue*
core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_another_enum(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  return fl_value_new_custom(
      core_tests_golubets_test_another_enum_type_id,
      fl_standard_message_codec_read_value(codec, buffer, offset, error),
      (GDestroyNotify)fl_value_unref);
}

static FlValue*
core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_unused_class(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubetsTestUnusedClass) value =
      core_tests_golubets_test_unused_class_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golubets_test_unused_class_type_id, G_OBJECT(value));
}

static FlValue*
core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_all_types(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubetsTestAllTypes) value =
      core_tests_golubets_test_all_types_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(core_tests_golubets_test_all_types_type_id,
                                    G_OBJECT(value));
}

static FlValue*
core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_all_nullable_types(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubetsTestAllNullableTypes) value =
      core_tests_golubets_test_all_nullable_types_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golubets_test_all_nullable_types_type_id, G_OBJECT(value));
}

static FlValue*
core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_all_nullable_types_without_recursion(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubetsTestAllNullableTypesWithoutRecursion) value =
      core_tests_golubets_test_all_nullable_types_without_recursion_new_from_list(
          values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golubets_test_all_nullable_types_without_recursion_type_id,
      G_OBJECT(value));
}

static FlValue*
core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_all_classes_wrapper(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubetsTestAllClassesWrapper) value =
      core_tests_golubets_test_all_classes_wrapper_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golubets_test_all_classes_wrapper_type_id, G_OBJECT(value));
}

static FlValue*
core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_immutable_all_types(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubetsTestImmutableAllTypes) value =
      core_tests_golubets_test_immutable_all_types_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golubets_test_immutable_all_types_type_id, G_OBJECT(value));
}

static FlValue*
core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_all_types_with_defaults(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubetsTestAllTypesWithDefaults) value =
      core_tests_golubets_test_all_types_with_defaults_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golubets_test_all_types_with_defaults_type_id,
      G_OBJECT(value));
}

static FlValue*
core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_test_message(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset,
    GError** error) {
  g_autoptr(FlValue) values =
      fl_standard_message_codec_read_value(codec, buffer, offset, error);
  if (values == nullptr) {
    return nullptr;
  }

  g_autoptr(CoreTestsGolubetsTestTestMessage) value =
      core_tests_golubets_test_test_message_new_from_list(values);
  if (value == nullptr) {
    g_set_error(error, FL_MESSAGE_CODEC_ERROR, FL_MESSAGE_CODEC_ERROR_FAILED,
                "Invalid data received for MessageData");
    return nullptr;
  }

  return fl_value_new_custom_object(
      core_tests_golubets_test_test_message_type_id, G_OBJECT(value));
}

static FlValue* core_tests_golubets_test_golub_message_codec_read_value_of_type(
    FlStandardMessageCodec* codec, GBytes* buffer, size_t* offset, int type,
    GError** error) {
  switch (type) {
    case core_tests_golubets_test_an_enum_type_id:
      return core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_an_enum(
          codec, buffer, offset, error);
    case core_tests_golubets_test_another_enum_type_id:
      return core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_another_enum(
          codec, buffer, offset, error);
    case core_tests_golubets_test_unused_class_type_id:
      return core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_unused_class(
          codec, buffer, offset, error);
    case core_tests_golubets_test_all_types_type_id:
      return core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_all_types(
          codec, buffer, offset, error);
    case core_tests_golubets_test_all_nullable_types_type_id:
      return core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_all_nullable_types(
          codec, buffer, offset, error);
    case core_tests_golubets_test_all_nullable_types_without_recursion_type_id:
      return core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_all_nullable_types_without_recursion(
          codec, buffer, offset, error);
    case core_tests_golubets_test_all_classes_wrapper_type_id:
      return core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_all_classes_wrapper(
          codec, buffer, offset, error);
    case core_tests_golubets_test_immutable_all_types_type_id:
      return core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_immutable_all_types(
          codec, buffer, offset, error);
    case core_tests_golubets_test_all_types_with_defaults_type_id:
      return core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_all_types_with_defaults(
          codec, buffer, offset, error);
    case core_tests_golubets_test_test_message_type_id:
      return core_tests_golubets_test_golub_message_codec_read_core_tests_golubets_test_test_message(
          codec, buffer, offset, error);
    default:
      return FL_STANDARD_MESSAGE_CODEC_CLASS(
                 core_tests_golubets_test_golub_message_codec_parent_class)
          ->read_value_of_type(codec, buffer, offset, type, error);
  }
}

static void core_tests_golubets_test_golub_message_codec_init(
    CoreTestsGolubetsTestGolubMessageCodec* self) {}

static void core_tests_golubets_test_golub_message_codec_class_init(
    CoreTestsGolubetsTestGolubMessageCodecClass* klass) {
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->write_value =
      core_tests_golubets_test_golub_message_codec_write_value;
  FL_STANDARD_MESSAGE_CODEC_CLASS(klass)->read_value_of_type =
      core_tests_golubets_test_golub_message_codec_read_value_of_type;
}

static CoreTestsGolubetsTestGolubMessageCodec*
core_tests_golubets_test_golub_message_codec_new() {
  CoreTestsGolubetsTestGolubMessageCodec* self =
      CORE_TESTS_GOLUBETS_TEST_GOLUB_MESSAGE_CODEC(g_object_new(
          core_tests_golubets_test_golub_message_codec_get_type(), nullptr));
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle {
  GObject parent_instance;

  FlBasicMessageChannel* channel;
  FlBasicMessageChannelResponseHandle* response_handle;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle,
    core_tests_golubets_test_host_integration_core_api_response_handle,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_response_handle_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_RESPONSE_HANDLE(
          object);
  g_clear_object(&self->channel);
  g_clear_object(&self->response_handle);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_response_handle_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_response_handle_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* self) {}

static void
core_tests_golubets_test_host_integration_core_api_response_handle_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandleClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_response_handle_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle*
core_tests_golubets_test_host_integration_core_api_response_handle_new(
    FlBasicMessageChannel* channel,
    FlBasicMessageChannelResponseHandle* response_handle) {
  CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_RESPONSE_HANDLE(g_object_new(
          core_tests_golubets_test_host_integration_core_api_response_handle_get_type(),
          nullptr));
  self->channel = FL_BASIC_MESSAGE_CHANNEL(g_object_ref(channel));
  self->response_handle =
      FL_BASIC_MESSAGE_CHANNEL_RESPONSE_HANDLE(g_object_ref(response_handle));
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestHostIntegrationCoreApiNoopResponse,
              core_tests_golubets_test_host_integration_core_api_noop_response,
              G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_noop_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_noop_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_noop_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiNoopResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_noop_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_noop_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiNoopResponse*
core_tests_golubets_test_host_integration_core_api_noop_response_new() {
  CoreTestsGolubetsTestHostIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(g_object_new(
          core_tests_golubets_test_host_integration_core_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiNoopResponse*
core_tests_golubets_test_host_integration_core_api_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_NOOP_RESPONSE(g_object_new(
          core_tests_golubets_test_host_integration_core_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesResponse,
    core_tests_golubets_test_host_integration_core_api_echo_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_all_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_types_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_types_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_all_types_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_all_types_response_new(
    CoreTestsGolubetsTestAllTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom_object(core_tests_golubets_test_all_types_type_id,
                                 G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorResponse,
    core_tests_golubets_test_host_integration_core_api_throw_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_throw_error_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_throw_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_throw_error_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_throw_error_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_throw_error_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorResponse*
core_tests_golubets_test_host_integration_core_api_throw_error_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorResponse*
core_tests_golubets_test_host_integration_core_api_throw_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorFromVoidResponse,
    core_tests_golubets_test_host_integration_core_api_throw_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_throw_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_throw_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_throw_error_from_void_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_throw_error_from_void_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_throw_error_from_void_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorFromVoidResponse*
core_tests_golubets_test_host_integration_core_api_throw_error_from_void_response_new() {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorFromVoidResponse*
core_tests_golubets_test_host_integration_core_api_throw_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiThrowFlutterErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowFlutterErrorResponse,
    core_tests_golubets_test_host_integration_core_api_throw_flutter_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_throw_flutter_error_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_throw_flutter_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_throw_flutter_error_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowFlutterErrorResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_throw_flutter_error_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowFlutterErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_throw_flutter_error_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiThrowFlutterErrorResponse*
core_tests_golubets_test_host_integration_core_api_throw_flutter_error_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiThrowFlutterErrorResponse*
core_tests_golubets_test_host_integration_core_api_throw_flutter_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowFlutterErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntResponse,
    core_tests_golubets_test_host_integration_core_api_echo_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_int_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_int_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_int_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_int_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_int_response_new(
    int64_t return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(g_object_new(
          core_tests_golubets_test_host_integration_core_api_echo_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(g_object_new(
          core_tests_golubets_test_host_integration_core_api_echo_int_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_echo_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_double_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_double_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoDoubleResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_double_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoDoubleResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_double_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoDoubleResponse*
core_tests_golubets_test_host_integration_core_api_echo_double_response_new(
    double return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoDoubleResponse*
core_tests_golubets_test_host_integration_core_api_echo_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoBoolResponse,
    core_tests_golubets_test_host_integration_core_api_echo_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_bool_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoBoolResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_bool_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoBoolResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_bool_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoBoolResponse*
core_tests_golubets_test_host_integration_core_api_echo_bool_response_new(
    gboolean return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoBoolResponse*
core_tests_golubets_test_host_integration_core_api_echo_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringResponse,
    core_tests_golubets_test_host_integration_core_api_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_string_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoUint8ListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_uint8_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoUint8ListResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_uint8_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_uint8_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_echo_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_uint8_list(return_value, return_value_length));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_echo_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoObjectResponse,
    core_tests_golubets_test_host_integration_core_api_echo_object_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_object_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_object_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoObjectResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_object_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoObjectResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_object_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoObjectResponse*
core_tests_golubets_test_host_integration_core_api_echo_object_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoObjectResponse*
core_tests_golubets_test_host_integration_core_api_echo_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoListResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoListResponse*
core_tests_golubets_test_host_integration_core_api_echo_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoListResponse*
core_tests_golubets_test_host_integration_core_api_echo_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_enum_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumListResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_enum_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_enum_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_class_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassListResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_class_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_class_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoMapResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(g_object_new(
          core_tests_golubets_test_host_integration_core_api_echo_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(g_object_new(
          core_tests_golubets_test_host_integration_core_api_echo_map_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_string_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringMapResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_string_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_string_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_int_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntMapResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_int_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_int_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_enum_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumMapResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_enum_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_enum_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_class_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassMapResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_class_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_class_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassWrapperResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassWrapperResponse,
    core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassWrapperResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassWrapperResponse* self) {
}

static void
core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassWrapperResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassWrapperResponse*
core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_response_new(
    CoreTestsGolubetsTestAllClassesWrapper* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassWrapperResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(
                           core_tests_golubets_test_all_classes_wrapper_type_id,
                           G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassWrapperResponse*
core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassWrapperResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_CLASS_WRAPPER_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_enum_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_enum_response_new(
    CoreTestsGolubetsTestAnEnum return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                       fl_value_new_int(return_value),
                                       (GDestroyNotify)fl_value_unref));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_another_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_another_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_another_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherEnumResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_another_enum_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_another_enum_response_new(
    CoreTestsGolubetsTestAnotherEnum return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_another_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                          fl_value_new_int(return_value),
                          (GDestroyNotify)fl_value_unref));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_another_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_another_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedDefaultStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedDefaultStringResponse,
    core_tests_golubets_test_host_integration_core_api_echo_named_default_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_named_default_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_named_default_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_named_default_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedDefaultStringResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_named_default_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedDefaultStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_named_default_string_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedDefaultStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_named_default_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_named_default_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedDefaultStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_named_default_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedDefaultStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_DEFAULT_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_named_default_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_response_new(
    double return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse*
core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_DEFAULT_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse,
    core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CREATE_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse*
core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_response_new(
    CoreTestsGolubetsTestAllTypesWithDefaults* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CREATE_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_custom_object(
                       core_tests_golubets_test_all_types_with_defaults_type_id,
                       G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse*
core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CREATE_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse,
    core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse*
core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_response_new(
    CoreTestsGolubetsTestAllTypesWithDefaults* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_custom_object(
                       core_tests_golubets_test_all_types_with_defaults_type_id,
                       G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse*
core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_TYPES_WITH_DEFAULTS_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoRequiredIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoRequiredIntResponse,
    core_tests_golubets_test_host_integration_core_api_echo_required_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_required_int_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoRequiredIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_required_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_required_int_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoRequiredIntResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_required_int_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoRequiredIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_required_int_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoRequiredIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_required_int_response_new(
    int64_t return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoRequiredIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_required_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoRequiredIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_required_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoRequiredIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_REQUIRED_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_required_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesResponse,
    core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_response_new(
    CoreTestsGolubetsTestAllNullableTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom_object(
                core_tests_golubets_test_all_nullable_types_type_id,
                G_OBJECT(return_value))
          : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_new(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom_object(
                core_tests_golubets_test_all_nullable_types_without_recursion_type_id,
                G_OBJECT(return_value))
          : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiExtractNestedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiExtractNestedNullableStringResponse,
    core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiExtractNestedNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiExtractNestedNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiExtractNestedNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiExtractNestedNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_EXTRACT_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCreateNestedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCreateNestedNullableStringResponse,
    core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCreateNestedNullableStringResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCreateNestedNullableStringResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCreateNestedNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiCreateNestedNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_response_new(
    CoreTestsGolubetsTestAllClassesWrapper* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(
                           core_tests_golubets_test_all_classes_wrapper_type_id,
                           G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiCreateNestedNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCreateNestedNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CREATE_NESTED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesResponse,
    core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_response_new(
    CoreTestsGolubetsTestAllNullableTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(
                           core_tests_golubets_test_all_nullable_types_type_id,
                           G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_new(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom_object(
          core_tests_golubets_test_all_nullable_types_without_recursion_type_id,
          G_OBJECT(return_value)));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_int_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_double_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableDoubleResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_double_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_double_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableDoubleResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_double_response_new(
    double* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_float(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableDoubleResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableBoolResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableBoolResponse* self) {
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableBoolResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_response_new(
    gboolean* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_bool(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableBoolResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_string_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableUint8ListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_uint8_list(
                                              return_value, return_value_length)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableObjectResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_object_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_object_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_object_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableObjectResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_object_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableObjectResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_object_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableObjectResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_object_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableObjectResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableListResponse* self) {
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableMapResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumResponse* self) {
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_response_new(
    CoreTestsGolubetsTestAnEnum* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_response_new(
    CoreTestsGolubetsTestAnotherEnum* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalNullableIntResponse,
    core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalNullableIntResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalNullableIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalNullableIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_OPTIONAL_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedNullableStringResponse,
    core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedNullableStringResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_NAMED_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse,
    core_tests_golubets_test_host_integration_core_api_noop_async_response,
    CORE_TESTS_GOLUBETS_TEST, HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE,
    GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse,
    core_tests_golubets_test_host_integration_core_api_noop_async_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_noop_async_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_noop_async_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_noop_async_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_noop_async_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_noop_async_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse*
core_tests_golubets_test_host_integration_core_api_noop_async_response_new() {
  CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_noop_async_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse*
core_tests_golubets_test_host_integration_core_api_noop_async_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_noop_async_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_int_response,
    CORE_TESTS_GOLUBETS_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE,
    GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_int_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_int_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_int_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_int_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_int_response_new(
    int64_t return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_double_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_double_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_double_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_double_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_double_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_double_response_new(
    double return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_bool_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_new(
    gboolean return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_string_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_string_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_uint8_list(return_value, return_value_length));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_object_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_object_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_object_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_object_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_object_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_object_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_object_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_LIST_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_LIST_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_map_response,
    CORE_TESTS_GOLUBETS_TEST, HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE,
    GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_MAP_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_MAP_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_MAP_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse* self) {
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_MAP_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_enum_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_new(
    CoreTestsGolubetsTestAnEnum return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                       fl_value_new_int(return_value),
                                       (GDestroyNotify)fl_value_unref));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_ENUM_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_new(
    CoreTestsGolubetsTestAnotherEnum return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                          fl_value_new_int(return_value),
                          (GDestroyNotify)fl_value_unref));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse,
    core_tests_golubets_test_host_integration_core_api_throw_async_error_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse,
    core_tests_golubets_test_host_integration_core_api_throw_async_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_throw_async_error_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_throw_async_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_throw_async_error_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_throw_async_error_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_throw_async_error_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse*
core_tests_golubets_test_host_integration_core_api_throw_async_error_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_async_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse*
core_tests_golubets_test_host_integration_core_api_throw_async_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_async_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse,
    core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse,
    core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_new() {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse*
core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse,
    core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse,
    core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse*
core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_THROW_ASYNC_FLUTTER_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_new(
    CoreTestsGolubetsTestAllTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom_object(core_tests_golubets_test_all_types_type_id,
                                 G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse,
    core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse,
    core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_new(
    CoreTestsGolubetsTestAllTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom_object(core_tests_golubets_test_all_types_type_id,
                                 G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse,
    core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_NOT_THROW_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse,
    core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_NOT_THROW_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_new(
    CoreTestsGolubetsTestAllTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_NOT_THROW_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom_object(core_tests_golubets_test_all_types_type_id,
                                 G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_NOT_THROW_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse,
    core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_THROW_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse,
    core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_THROW_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_new(
    CoreTestsGolubetsTestAllTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_THROW_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom_object(core_tests_golubets_test_all_types_type_id,
                                 G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_ALL_TYPES_AND_THROW_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new(
    CoreTestsGolubetsTestAllNullableTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom_object(
                core_tests_golubets_test_all_nullable_types_type_id,
                G_OBJECT(return_value))
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse,
    core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse,
    core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_new(
    CoreTestsGolubetsTestAllNullableTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom_object(
                core_tests_golubets_test_all_nullable_types_type_id,
                G_OBJECT(return_value))
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_MODERN_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom_object(
                core_tests_golubets_test_all_nullable_types_without_recursion_type_id,
                G_OBJECT(return_value))
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_new(
    double* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_float(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_new(
    gboolean* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_bool(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_uint8_list(
                                              return_value, return_value_length)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_OBJECT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_new(
    CoreTestsGolubetsTestAnEnum* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ASYNC_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_NULLABLE_ENUM_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse,
    core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_NULLABLE_ENUM_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_new(
    CoreTestsGolubetsTestAnotherEnum* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_ECHO_ANOTHER_ASYNC_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApiDefaultIsMainThreadResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiDefaultIsMainThreadResponse,
    core_tests_golubets_test_host_integration_core_api_default_is_main_thread_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_default_is_main_thread_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiDefaultIsMainThreadResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_DEFAULT_IS_MAIN_THREAD_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_default_is_main_thread_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_default_is_main_thread_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiDefaultIsMainThreadResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_default_is_main_thread_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiDefaultIsMainThreadResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_default_is_main_thread_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiDefaultIsMainThreadResponse*
core_tests_golubets_test_host_integration_core_api_default_is_main_thread_response_new(
    gboolean return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiDefaultIsMainThreadResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_DEFAULT_IS_MAIN_THREAD_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_default_is_main_thread_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiDefaultIsMainThreadResponse*
core_tests_golubets_test_host_integration_core_api_default_is_main_thread_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiDefaultIsMainThreadResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_DEFAULT_IS_MAIN_THREAD_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_default_is_main_thread_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse,
    core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_TASK_QUEUE_IS_BACKGROUND_THREAD_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_response_dispose;
}

CoreTestsGolubetsTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse*
core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_response_new(
    gboolean return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_TASK_QUEUE_IS_BACKGROUND_THREAD_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

CoreTestsGolubetsTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse*
core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_TASK_QUEUE_IS_BACKGROUND_THREAD_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse* self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_new() {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_NOOP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new() {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_new(
    CoreTestsGolubetsTestAllTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom_object(core_tests_golubets_test_all_types_type_id,
                                 G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new(
    CoreTestsGolubetsTestAllNullableTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom_object(
                core_tests_golubets_test_all_nullable_types_type_id,
                G_OBJECT(return_value))
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new(
    CoreTestsGolubetsTestAllNullableTypes* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value,
                       fl_value_new_custom_object(
                           core_tests_golubets_test_all_nullable_types_type_id,
                           G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom_object(
                core_tests_golubets_test_all_nullable_types_without_recursion_type_id,
                G_OBJECT(return_value))
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new(
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom_object(
          core_tests_golubets_test_all_nullable_types_without_recursion_type_id,
          G_OBJECT(return_value)));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_new(
    gboolean return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_bool(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_new(
    int64_t return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_int(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_new(
    double return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_float(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_uint8_list(return_value, return_value_length));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_STRING_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_INT_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_INT_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_ref(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_new(
    CoreTestsGolubetsTestAnEnum return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value, fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                       fl_value_new_int(return_value),
                                       (GDestroyNotify)fl_value_unref));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_ENUM_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_ENUM_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_new(
    CoreTestsGolubetsTestAnotherEnum return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                          fl_value_new_int(return_value),
                          (GDestroyNotify)fl_value_unref));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new(
    gboolean* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_bool(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new(
    int64_t* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_int(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new(
    double* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_float(*return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_string(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new(
    const uint8_t* return_value, size_t return_value_length) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_new_uint8_list(
                                              return_value, return_value_length)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_new(
    FlValue* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, return_value != nullptr
                                        ? fl_value_ref(return_value)
                                        : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE, GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new(
    CoreTestsGolubetsTestAnEnum* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_new(
    CoreTestsGolubetsTestAnotherEnum* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(
      self->value,
      return_value != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                                fl_value_new_int(*return_value),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response,
    CORE_TESTS_GOLUBETS_TEST,
    HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE,
    GObject)

struct
    _CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse,
    core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(
              object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
        self) {}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse*
      self = CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API_CALL_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_get_type(),
              nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostIntegrationCoreApi {
  GObject parent_instance;

  const CoreTestsGolubetsTestHostIntegrationCoreApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestHostIntegrationCoreApi,
              core_tests_golubets_test_host_integration_core_api, G_TYPE_OBJECT)

static void core_tests_golubets_test_host_integration_core_api_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_integration_core_api_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_host_integration_core_api_init(
    CoreTestsGolubetsTestHostIntegrationCoreApi* self) {}

static void core_tests_golubets_test_host_integration_core_api_class_init(
    CoreTestsGolubetsTestHostIntegrationCoreApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_integration_core_api_dispose;
}

static CoreTestsGolubetsTestHostIntegrationCoreApi*
core_tests_golubets_test_host_integration_core_api_new(
    const CoreTestsGolubetsTestHostIntegrationCoreApiVTable* vtable,
    gpointer user_data, GDestroyNotify user_data_free_func) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(g_object_new(
          core_tests_golubets_test_host_integration_core_api_get_type(),
          nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void core_tests_golubets_test_host_integration_core_api_noop_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiNoopResponse) response =
      self->vtable->noop(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "noop");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "noop", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllTypes* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesResponse)
      response = self->vtable->echo_all_types(everything, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllTypes", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_throw_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorResponse)
      response = self->vtable->throw_error(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "throwError");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwError", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_throw_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_error_from_void == nullptr) {
    return;
  }

  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiThrowErrorFromVoidResponse)
      response = self->vtable->throw_error_from_void(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "throwErrorFromVoid");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwErrorFromVoid", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_throw_flutter_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_flutter_error == nullptr) {
    return;
  }

  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiThrowFlutterErrorResponse)
      response = self->vtable->throw_flutter_error(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "throwFlutterError");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwFlutterError", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_echo_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntResponse)
      response = self->vtable->echo_int(an_int, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoInt", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_echo_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoDoubleResponse)
      response = self->vtable->echo_double(a_double, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoDouble", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_echo_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoBoolResponse)
      response = self->vtable->echo_bool(a_bool, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoBool");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoBool", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_echo_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringResponse)
      response = self->vtable->echo_string(a_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoString", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_uint8_list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoUint8ListResponse)
      response = self->vtable->echo_uint8_list(
          a_uint8_list, a_uint8_list_length, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoUint8List");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoUint8List", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_echo_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* an_object = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoObjectResponse)
      response = self->vtable->echo_object(an_object, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoObject");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoObject", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_echo_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoListResponse)
      response = self->vtable->echo_list(list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoList", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumListResponse)
      response = self->vtable->echo_enum_list(enum_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoEnumList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoEnumList", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassListResponse)
      response = self->vtable->echo_class_list(class_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoClassList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoClassList", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumListResponse)
      response =
          self->vtable->echo_non_null_enum_list(enum_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullEnumList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullEnumList", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassListResponse)
      response =
          self->vtable->echo_non_null_class_list(class_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullClassList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullClassList", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_echo_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoMapResponse)
      response = self->vtable->echo_map(map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoStringMapResponse)
      response = self->vtable->echo_string_map(string_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoStringMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoStringMap", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_echo_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoIntMapResponse)
      response = self->vtable->echo_int_map(int_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoIntMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoIntMap", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_echo_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumMapResponse)
      response = self->vtable->echo_enum_map(enum_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoEnumMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoEnumMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassMapResponse)
      response = self->vtable->echo_class_map(class_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoClassMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoClassMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullStringMapResponse)
      response =
          self->vtable->echo_non_null_string_map(string_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullStringMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullStringMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullIntMapResponse)
      response = self->vtable->echo_non_null_int_map(int_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullIntMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullIntMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullEnumMapResponse)
      response =
          self->vtable->echo_non_null_enum_map(enum_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullEnumMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullEnumMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_non_null_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNonNullClassMapResponse)
      response =
          self->vtable->echo_non_null_class_map(class_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNonNullClassMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNonNullClassMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_class_wrapper == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllClassesWrapper* wrapper =
      CORE_TESTS_GOLUBETS_TEST_ALL_CLASSES_WRAPPER(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoClassWrapperResponse)
      response = self->vtable->echo_class_wrapper(wrapper, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoClassWrapper");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoClassWrapper", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_echo_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnEnum an_enum =
      static_cast<CoreTestsGolubetsTestAnEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoEnumResponse)
      response = self->vtable->echo_enum(an_enum, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoEnum", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_another_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubetsTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherEnumResponse)
      response = self->vtable->echo_another_enum(another_enum, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAnotherEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherEnum", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_named_default_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_named_default_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedDefaultStringResponse)
      response =
          self->vtable->echo_named_default_string(a_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNamedDefaultString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNamedDefaultString", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_optional_default_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalDefaultDoubleResponse)
      response =
          self->vtable->echo_optional_default_double(a_double, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoOptionalDefaultDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoOptionalDefaultDouble", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->create_all_types_with_defaults == nullptr) {
    return;
  }

  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCreateAllTypesWithDefaultsResponse)
      response = self->vtable->create_all_types_with_defaults(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "createAllTypesWithDefaults");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "createAllTypesWithDefaults", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_all_types_with_defaults == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllTypesWithDefaults* all_types =
      CORE_TESTS_GOLUBETS_TEST_ALL_TYPES_WITH_DEFAULTS(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllTypesWithDefaultsResponse)
      response = self->vtable->echo_all_types_with_defaults(all_types,
                                                            self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllTypesWithDefaults");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllTypesWithDefaults", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_required_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_required_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoRequiredIntResponse)
      response = self->vtable->echo_required_int(an_int, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoRequiredInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoRequiredInt", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllNullableTypes* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesResponse)
      response =
          self->vtable->echo_all_nullable_types(everything, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllNullableTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllNullableTypes", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_all_nullable_types_without_recursion == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse)
      response = self->vtable->echo_all_nullable_types_without_recursion(
          everything, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAllNullableTypesWithoutRecursion");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAllNullableTypesWithoutRecursion", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->extract_nested_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllClassesWrapper* wrapper =
      CORE_TESTS_GOLUBETS_TEST_ALL_CLASSES_WRAPPER(
          fl_value_get_custom_value_object(value0));
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiExtractNestedNullableStringResponse)
      response = self->vtable->extract_nested_nullable_string(wrapper,
                                                              self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "extractNestedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "extractNestedNullableString", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->create_nested_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* nullable_string = fl_value_get_string(value0);
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCreateNestedNullableStringResponse)
      response = self->vtable->create_nested_nullable_string(nullable_string,
                                                             self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "createNestedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "createNestedNullableString", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->send_multiple_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesResponse)
      response = self->vtable->send_multiple_nullable_types(
          a_nullable_bool, a_nullable_int, a_nullable_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypes");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypes", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->send_multiple_nullable_types_without_recursion == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse)
      response = self->vtable->send_multiple_nullable_types_without_recursion(
          a_nullable_bool, a_nullable_int, a_nullable_string, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypesWithoutRecursion");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "sendMultipleNullableTypesWithoutRecursion", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value0);
    a_nullable_int = &a_nullable_int_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntResponse)
      response =
          self->vtable->echo_nullable_int(a_nullable_int, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableInt", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double* a_nullable_double = nullptr;
  double a_nullable_double_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_double_value = fl_value_get_float(value0);
    a_nullable_double = &a_nullable_double_value;
  }
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableDoubleResponse)
      response = self->vtable->echo_nullable_double(a_nullable_double,
                                                    self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableDouble");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableDouble", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableBoolResponse)
      response =
          self->vtable->echo_nullable_bool(a_nullable_bool, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableBool");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableBool", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_nullable_string = fl_value_get_string(value0);
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringResponse)
      response = self->vtable->echo_nullable_string(a_nullable_string,
                                                    self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableString", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_nullable_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_nullable_uint8_list_length = fl_value_get_length(value0);
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableUint8ListResponse)
      response = self->vtable->echo_nullable_uint8_list(
          a_nullable_uint8_list, a_nullable_uint8_list_length, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableUint8List");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableUint8List", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_nullable_object = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableObjectResponse)
      response = self->vtable->echo_nullable_object(a_nullable_object,
                                                    self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableObject");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableObject", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* a_nullable_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableListResponse)
      response =
          self->vtable->echo_nullable_list(a_nullable_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableList", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumListResponse)
      response =
          self->vtable->echo_nullable_enum_list(enum_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableEnumList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableEnumList", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassListResponse)
      response =
          self->vtable->echo_nullable_class_list(class_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableClassList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableClassList", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumListResponse)
      response = self->vtable->echo_nullable_non_null_enum_list(
          enum_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullEnumList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullEnumList", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassListResponse)
      response = self->vtable->echo_nullable_non_null_class_list(
          class_list, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullClassList");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullClassList", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableMapResponse)
      response = self->vtable->echo_nullable_map(map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableStringMapResponse)
      response =
          self->vtable->echo_nullable_string_map(string_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableStringMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableStringMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableIntMapResponse)
      response = self->vtable->echo_nullable_int_map(int_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableIntMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableIntMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumMapResponse)
      response =
          self->vtable->echo_nullable_enum_map(enum_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableEnumMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableEnumMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableClassMapResponse)
      response =
          self->vtable->echo_nullable_class_map(class_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableClassMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableClassMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullStringMapResponse)
      response = self->vtable->echo_nullable_non_null_string_map(
          string_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullStringMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullStringMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullIntMapResponse)
      response = self->vtable->echo_nullable_non_null_int_map(int_map,
                                                              self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullIntMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullIntMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullEnumMapResponse)
      response = self->vtable->echo_nullable_non_null_enum_map(enum_map,
                                                               self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullEnumMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullEnumMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_nullable_non_null_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableNonNullClassMapResponse)
      response = self->vtable->echo_nullable_non_null_class_map(
          class_map, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableNonNullClassMap");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableNonNullClassMap", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnEnum* an_enum = nullptr;
  CoreTestsGolubetsTestAnEnum an_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_enum_value = static_cast<CoreTestsGolubetsTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    an_enum = &an_enum_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoNullableEnumResponse)
      response = self->vtable->echo_nullable_enum(an_enum, self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNullableEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNullableEnum", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_another_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnotherEnum* another_enum = nullptr;
  CoreTestsGolubetsTestAnotherEnum another_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    another_enum_value = static_cast<CoreTestsGolubetsTestAnotherEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    another_enum = &another_enum_value;
  }
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherNullableEnumResponse)
      response = self->vtable->echo_another_nullable_enum(another_enum,
                                                          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoAnotherNullableEnum");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherNullableEnum", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_optional_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value0);
    a_nullable_int = &a_nullable_int_value;
  }
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoOptionalNullableIntResponse)
      response = self->vtable->echo_optional_nullable_int(a_nullable_int,
                                                          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoOptionalNullableInt");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoOptionalNullableInt", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_named_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_nullable_string = fl_value_get_string(value0);
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoNamedNullableStringResponse)
      response = self->vtable->echo_named_nullable_string(a_nullable_string,
                                                          self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "echoNamedNullableString");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoNamedNullableString", error->message);
  }
}

static void core_tests_golubets_test_host_integration_core_api_noop_async_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop_async == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->noop_async(handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_int(an_int, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_double(a_double, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_bool(a_bool, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_string(a_string, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_uint8_list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_uint8_list(a_uint8_list, a_uint8_list_length, handle,
                                      self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* an_object = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_object(an_object, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_list(list, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_enum_list(enum_list, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_class_list(class_list, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_map(map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_string_map(string_map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_int_map(int_map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_enum_map(enum_map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_class_map(class_map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo_async_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnEnum an_enum =
      static_cast<CoreTestsGolubetsTestAnEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_enum(an_enum, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_another_async_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubetsTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_another_async_enum(another_enum, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_throw_async_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->throw_async_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->throw_async_error(handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_async_error_from_void == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->throw_async_error_from_void(handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->throw_async_flutter_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->throw_async_flutter_error(handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllTypes* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_all_types(everything, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_modern_async_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllTypes* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_modern_async_all_types(everything, handle,
                                            self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_modern_async_all_types_and_not_throw == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllTypes* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_modern_async_all_types_and_not_throw(everything, handle,
                                                          self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_modern_async_all_types_and_throw == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllTypes* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_modern_async_all_types_and_throw(everything, handle,
                                                      self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllNullableTypes* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_all_nullable_types(everything, handle,
                                                       self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_modern_async_nullable_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllNullableTypes* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_modern_async_nullable_all_nullable_types(
      everything, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_all_nullable_types_without_recursion ==
          nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_all_nullable_types_without_recursion(
      everything, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* an_int = nullptr;
  int64_t an_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_int_value = fl_value_get_int(value0);
    an_int = &an_int_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_int(an_int, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double* a_double = nullptr;
  double a_double_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_double_value = fl_value_get_float(value0);
    a_double = &a_double_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_double(a_double, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_bool = nullptr;
  gboolean a_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_bool_value = fl_value_get_bool(value0);
    a_bool = &a_bool_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_bool(a_bool, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_string(a_string, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* a_uint8_list = fl_value_get_uint8_list(value0);
  size_t a_uint8_list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_uint8_list(
      a_uint8_list, a_uint8_list_length, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_object == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* an_object = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_object(an_object, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_list(list, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_enum_list(enum_list, handle,
                                              self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_class_list(class_list, handle,
                                               self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_map(map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_string_map(string_map, handle,
                                               self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_int_map(int_map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_enum_map(enum_map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_class_map(class_map, handle,
                                              self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_async_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnEnum* an_enum = nullptr;
  CoreTestsGolubetsTestAnEnum an_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_enum_value = static_cast<CoreTestsGolubetsTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    an_enum = &an_enum_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_async_nullable_enum(an_enum, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->echo_another_async_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnotherEnum* another_enum = nullptr;
  CoreTestsGolubetsTestAnotherEnum another_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    another_enum_value = static_cast<CoreTestsGolubetsTestAnotherEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    another_enum = &another_enum_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo_another_async_nullable_enum(another_enum, handle,
                                                 self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_default_is_main_thread_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->default_is_main_thread == nullptr) {
    return;
  }

  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiDefaultIsMainThreadResponse)
      response = self->vtable->default_is_main_thread(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "defaultIsMainThread");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "defaultIsMainThread", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->task_queue_is_background_thread == nullptr) {
    return;
  }

  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiTaskQueueIsBackgroundThreadResponse)
      response = self->vtable->task_queue_is_background_thread(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostIntegrationCoreApi",
              "taskQueueIsBackgroundThread");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "taskQueueIsBackgroundThread", error->message);
  }
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_noop_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr || self->vtable->call_flutter_noop == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_noop(handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_throw_error == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_throw_error(handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_throw_error_from_void == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_throw_error_from_void(handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllTypes* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_all_types(everything, handle,
                                            self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllNullableTypes* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_all_nullable_types(everything, handle,
                                                     self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_send_multiple_nullable_types == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_send_multiple_nullable_types(
      a_nullable_bool, a_nullable_int, a_nullable_string, handle,
      self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_all_nullable_types_without_recursion ==
          nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* everything =
      CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
          fl_value_get_custom_value_object(value0));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_all_nullable_types_without_recursion(
      everything, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable
              ->call_flutter_send_multiple_nullable_types_without_recursion ==
          nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_nullable_bool = nullptr;
  gboolean a_nullable_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_nullable_bool_value = fl_value_get_bool(value0);
    a_nullable_bool = &a_nullable_bool_value;
  }
  FlValue* value1 = fl_value_get_list_value(message_, 1);
  int64_t* a_nullable_int = nullptr;
  int64_t a_nullable_int_value;
  if (fl_value_get_type(value1) != FL_VALUE_TYPE_NULL) {
    a_nullable_int_value = fl_value_get_int(value1);
    a_nullable_int = &a_nullable_int_value;
  }
  FlValue* value2 = fl_value_get_list_value(message_, 2);
  const gchar* a_nullable_string = fl_value_get_string(value2);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_send_multiple_nullable_types_without_recursion(
      a_nullable_bool, a_nullable_int, a_nullable_string, handle,
      self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean a_bool = fl_value_get_bool(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_bool(a_bool, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t an_int = fl_value_get_int(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_int(an_int, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double a_double = fl_value_get_float(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_double(a_double, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_string(a_string, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* list = fl_value_get_uint8_list(value0);
  size_t list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_uint8_list(list, list_length, handle,
                                             self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_list(list, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_enum_list(enum_list, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_class_list(class_list, handle,
                                             self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_enum_list(enum_list, handle,
                                                     self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_class_list(class_list, handle,
                                                      self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_map(map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_string_map(string_map, handle,
                                             self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_int_map(int_map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_enum_map(enum_map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_class_map(class_map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_string_map(string_map, handle,
                                                      self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_int_map(int_map, handle,
                                                   self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_enum_map(enum_map, handle,
                                                    self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_non_null_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_non_null_class_map(class_map, handle,
                                                     self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnEnum an_enum =
      static_cast<CoreTestsGolubetsTestAnEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_enum(an_enum, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_another_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnotherEnum another_enum =
      static_cast<CoreTestsGolubetsTestAnotherEnum>(
          fl_value_get_int(reinterpret_cast<FlValue*>(
              const_cast<gpointer>(fl_value_get_custom_value(value0)))));
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_another_enum(another_enum, handle,
                                               self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_bool == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  gboolean* a_bool = nullptr;
  gboolean a_bool_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_bool_value = fl_value_get_bool(value0);
    a_bool = &a_bool_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_bool(a_bool, handle,
                                                self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_int == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  int64_t* an_int = nullptr;
  int64_t an_int_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_int_value = fl_value_get_int(value0);
    an_int = &an_int_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_int(an_int, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_double == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  double* a_double = nullptr;
  double a_double_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    a_double_value = fl_value_get_float(value0);
    a_double = &a_double_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_double(a_double, handle,
                                                  self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_string(a_string, handle,
                                                  self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_uint8_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const uint8_t* list = fl_value_get_uint8_list(value0);
  size_t list_length = fl_value_get_length(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_uint8_list(list, list_length, handle,
                                                      self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_list(list, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_enum_list(enum_list, handle,
                                                     self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_class_list(class_list, handle,
                                                      self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_enum_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_enum_list(enum_list, handle,
                                                              self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_class_list == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_list = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_class_list(
      class_list, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_map(map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_string_map(string_map, handle,
                                                      self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_int_map(int_map, handle,
                                                   self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_enum_map(enum_map, handle,
                                                    self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_class_map(class_map, handle,
                                                     self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_string_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* string_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_string_map(
      string_map, handle, self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_int_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* int_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_int_map(int_map, handle,
                                                            self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_enum_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* enum_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_enum_map(enum_map, handle,
                                                             self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_non_null_class_map == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  FlValue* class_map = value0;
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_non_null_class_map(class_map, handle,
                                                              self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnEnum* an_enum = nullptr;
  CoreTestsGolubetsTestAnEnum an_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    an_enum_value = static_cast<CoreTestsGolubetsTestAnEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    an_enum = &an_enum_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_nullable_enum(an_enum, handle,
                                                self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_echo_another_nullable_enum == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  CoreTestsGolubetsTestAnotherEnum* another_enum = nullptr;
  CoreTestsGolubetsTestAnotherEnum another_enum_value;
  if (fl_value_get_type(value0) != FL_VALUE_TYPE_NULL) {
    another_enum_value = static_cast<CoreTestsGolubetsTestAnotherEnum>(
        fl_value_get_int(reinterpret_cast<FlValue*>(
            const_cast<gpointer>(fl_value_get_custom_value(value0)))));
    another_enum = &another_enum_value;
  }
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_echo_another_nullable_enum(another_enum, handle,
                                                        self->user_data);
}

static void
core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_INTEGRATION_CORE_API(user_data);

  if (self->vtable == nullptr ||
      self->vtable->call_flutter_small_api_echo_string == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle) handle =
      core_tests_golubets_test_host_integration_core_api_response_handle_new(
          channel, response_handle);
  self->vtable->call_flutter_small_api_echo_string(a_string, handle,
                                                   self->user_data);
}

void core_tests_golubets_test_host_integration_core_api_set_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix,
    const CoreTestsGolubetsTestHostIntegrationCoreApiVTable* vtable,
    gpointer user_data, GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApi) api_data =
      core_tests_golubets_test_host_integration_core_api_new(
          vtable, user_data, user_data_free_func);

  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  g_autofree gchar* noop_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "noop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_channel = fl_basic_message_channel_new(
      messenger, noop_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      noop_channel, core_tests_golubets_test_host_integration_core_api_noop_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_types_channel =
      fl_basic_message_channel_new(messenger, echo_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_types_channel,
      core_tests_golubets_test_host_integration_core_api_echo_all_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_error_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_error_channel =
      fl_basic_message_channel_new(messenger, throw_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_error_channel,
      core_tests_golubets_test_host_integration_core_api_throw_error_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_error_from_void_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwErrorFromVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_error_from_void_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_error_from_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_error_from_void_channel,
      core_tests_golubets_test_host_integration_core_api_throw_error_from_void_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_flutter_error_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwFlutterError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_flutter_error_channel =
      fl_basic_message_channel_new(messenger, throw_flutter_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_flutter_error_channel,
      core_tests_golubets_test_host_integration_core_api_throw_flutter_error_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_int_channel =
      fl_basic_message_channel_new(messenger, echo_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_int_channel,
      core_tests_golubets_test_host_integration_core_api_echo_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_double_channel =
      fl_basic_message_channel_new(messenger, echo_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_double_channel,
      core_tests_golubets_test_host_integration_core_api_echo_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_bool_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_bool_channel =
      fl_basic_message_channel_new(messenger, echo_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_bool_channel,
      core_tests_golubets_test_host_integration_core_api_echo_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_string_channel =
      fl_basic_message_channel_new(messenger, echo_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_string_channel,
      core_tests_golubets_test_host_integration_core_api_echo_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_uint8_list_channel =
      fl_basic_message_channel_new(messenger, echo_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_uint8_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_object_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_object_channel =
      fl_basic_message_channel_new(messenger, echo_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_object_channel,
      core_tests_golubets_test_host_integration_core_api_echo_object_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_list_channel =
      fl_basic_message_channel_new(messenger, echo_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_list_channel =
      fl_basic_message_channel_new(messenger, echo_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_enum_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_list_channel =
      fl_basic_message_channel_new(messenger, echo_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_class_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_enum_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_class_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_non_null_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_map_channel =
      fl_basic_message_channel_new(messenger, echo_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_string_map_channel =
      fl_basic_message_channel_new(messenger, echo_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_string_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_int_map_channel =
      fl_basic_message_channel_new(messenger, echo_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_int_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_map_channel =
      fl_basic_message_channel_new(messenger, echo_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_enum_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_map_channel =
      fl_basic_message_channel_new(messenger, echo_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_class_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_string_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_non_null_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_int_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_non_null_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_enum_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_non_null_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_non_null_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_non_null_class_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_non_null_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_class_wrapper_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoClassWrapper%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_wrapper_channel =
      fl_basic_message_channel_new(messenger, echo_class_wrapper_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_class_wrapper_channel,
      core_tests_golubets_test_host_integration_core_api_echo_class_wrapper_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_channel =
      fl_basic_message_channel_new(messenger, echo_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_enum_channel,
      core_tests_golubets_test_host_integration_core_api_echo_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_another_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAnotherEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_enum_channel =
      fl_basic_message_channel_new(messenger, echo_another_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_enum_channel,
      core_tests_golubets_test_host_integration_core_api_echo_another_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_named_default_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNamedDefaultString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_named_default_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_named_default_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_named_default_string_channel,
      core_tests_golubets_test_host_integration_core_api_echo_named_default_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_optional_default_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoOptionalDefaultDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_optional_default_double_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_optional_default_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_optional_default_double_channel,
      core_tests_golubets_test_host_integration_core_api_echo_optional_default_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* create_all_types_with_defaults_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.createAllTypesWithDefaults%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) create_all_types_with_defaults_channel =
      fl_basic_message_channel_new(messenger,
                                   create_all_types_with_defaults_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      create_all_types_with_defaults_channel,
      core_tests_golubets_test_host_integration_core_api_create_all_types_with_defaults_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_all_types_with_defaults_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAllTypesWithDefaults%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_types_with_defaults_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_all_types_with_defaults_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_types_with_defaults_channel,
      core_tests_golubets_test_host_integration_core_api_echo_all_types_with_defaults_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_required_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoRequiredInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_required_int_channel =
      fl_basic_message_channel_new(messenger, echo_required_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_required_int_channel,
      core_tests_golubets_test_host_integration_core_api_echo_required_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_all_nullable_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAllNullableTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_nullable_types_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_all_nullable_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_nullable_types_channel,
      core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_all_nullable_types_without_recursion_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAllNullableTypesWithoutRecursion%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger, echo_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_nullable_types_without_recursion_channel,
      core_tests_golubets_test_host_integration_core_api_echo_all_nullable_types_without_recursion_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* extract_nested_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.extractNestedNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) extract_nested_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   extract_nested_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      extract_nested_nullable_string_channel,
      core_tests_golubets_test_host_integration_core_api_extract_nested_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* create_nested_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.createNestedNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) create_nested_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   create_nested_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      create_nested_nullable_string_channel,
      core_tests_golubets_test_host_integration_core_api_create_nested_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* send_multiple_nullable_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "sendMultipleNullableTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) send_multiple_nullable_types_channel =
      fl_basic_message_channel_new(messenger,
                                   send_multiple_nullable_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      send_multiple_nullable_types_channel,
      core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      send_multiple_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi."
              "sendMultipleNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      send_multiple_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              send_multiple_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      send_multiple_nullable_types_without_recursion_channel,
      core_tests_golubets_test_host_integration_core_api_send_multiple_nullable_types_without_recursion_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_int_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_int_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_double_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_double_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_bool_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_bool_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_bool_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_string_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_string_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_uint8_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_object_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_object_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_object_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_object_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_list_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_enum_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_class_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_enum_list_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_enum_list_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_enum_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_class_list_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_class_list_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_class_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_map_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_string_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_int_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_enum_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_class_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_string_map_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_string_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_string_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_non_null_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_int_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_non_null_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_enum_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_class_map_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_class_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_class_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_non_null_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_enum_channel,
      core_tests_golubets_test_host_integration_core_api_echo_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_another_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAnotherNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_another_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_nullable_enum_channel,
      core_tests_golubets_test_host_integration_core_api_echo_another_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_optional_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoOptionalNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_optional_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_optional_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_optional_nullable_int_channel,
      core_tests_golubets_test_host_integration_core_api_echo_optional_nullable_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_named_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNamedNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_named_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_named_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_named_nullable_string_channel,
      core_tests_golubets_test_host_integration_core_api_echo_named_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* noop_async_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "noopAsync%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_async_channel =
      fl_basic_message_channel_new(messenger, noop_async_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      noop_async_channel,
      core_tests_golubets_test_host_integration_core_api_noop_async_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_int_channel =
      fl_basic_message_channel_new(messenger, echo_async_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_int_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_double_channel =
      fl_basic_message_channel_new(messenger, echo_async_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_double_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_bool_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_bool_channel =
      fl_basic_message_channel_new(messenger, echo_async_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_bool_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_string_channel =
      fl_basic_message_channel_new(messenger, echo_async_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_string_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_uint8_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_object_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_object_channel =
      fl_basic_message_channel_new(messenger, echo_async_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_object_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_object_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_list_channel =
      fl_basic_message_channel_new(messenger, echo_async_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_list_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_enum_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_class_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_string_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_int_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_int_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_enum_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_class_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_class_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_enum_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_another_async_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAnotherAsyncEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_async_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_another_async_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_async_enum_channel,
      core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_async_error_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwAsyncError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_error_channel =
      fl_basic_message_channel_new(messenger, throw_async_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_async_error_channel,
      core_tests_golubets_test_host_integration_core_api_throw_async_error_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_async_error_from_void_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwAsyncErrorFromVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_error_from_void_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_async_error_from_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_async_error_from_void_channel,
      core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* throw_async_flutter_error_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwAsyncFlutterError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_flutter_error_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_async_flutter_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_async_flutter_error_channel,
      core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_all_types_channel =
      fl_basic_message_channel_new(messenger, echo_async_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_all_types_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_all_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_modern_async_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoModernAsyncAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_modern_async_all_types_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_modern_async_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_channel,
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_modern_async_all_types_and_not_throw_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoModernAsyncAllTypesAndNotThrow%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_all_types_and_not_throw_channel =
          fl_basic_message_channel_new(
              messenger, echo_modern_async_all_types_and_not_throw_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_and_not_throw_channel,
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_modern_async_all_types_and_throw_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoModernAsyncAllTypesAndThrow%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_all_types_and_throw_channel =
          fl_basic_message_channel_new(
              messenger, echo_modern_async_all_types_and_throw_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_and_throw_channel,
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_async_nullable_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, echo_async_nullable_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_all_nullable_types_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_modern_async_nullable_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoModernAsyncNullableAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_nullable_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger,
              echo_modern_async_nullable_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_nullable_all_nullable_types_channel,
      core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      echo_async_nullable_all_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi."
              "echoAsyncNullableAllNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_async_nullable_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              echo_async_nullable_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_all_nullable_types_without_recursion_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_int_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_double_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_double_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_bool_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_bool_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_string_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_uint8_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableUint8List%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_uint8_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_object_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_object_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_object_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_enum_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_class_list_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_string_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_int_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_enum_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_class_map_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_async_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_enum_channel,
      core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* echo_another_async_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAnotherAsyncNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_async_nullable_enum_channel =
      fl_basic_message_channel_new(
          messenger, echo_another_async_nullable_enum_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_async_nullable_enum_channel,
      core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* default_is_main_thread_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "defaultIsMainThread%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) default_is_main_thread_channel =
      fl_basic_message_channel_new(messenger,
                                   default_is_main_thread_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      default_is_main_thread_channel,
      core_tests_golubets_test_host_integration_core_api_default_is_main_thread_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* task_queue_is_background_thread_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.taskQueueIsBackgroundThread%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) task_queue_is_background_thread_channel =
      fl_basic_message_channel_new(messenger,
                                   task_queue_is_background_thread_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      task_queue_is_background_thread_channel,
      core_tests_golubets_test_host_integration_core_api_task_queue_is_background_thread_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_noop_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterNoop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_noop_channel =
      fl_basic_message_channel_new(messenger, call_flutter_noop_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_noop_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_noop_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_throw_error_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterThrowError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_throw_error_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_throw_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_throw_error_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_throw_error_from_void_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterThrowErrorFromVoid%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_throw_error_from_void_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_throw_error_from_void_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_throw_error_from_void_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_all_types_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_types_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_nullable_types_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_send_multiple_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterSendMultipleNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_send_multiple_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_send_multiple_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_send_multiple_nullable_types_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      call_flutter_echo_all_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi."
              "callFlutterEchoAllNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_nullable_types_without_recursion_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      call_flutter_send_multiple_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi."
              "callFlutterSendMultipleNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_send_multiple_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_send_multiple_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_send_multiple_nullable_types_without_recursion_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_bool_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_bool_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_int_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_int_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_double_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_double_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_string_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_string_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_uint8_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_enum_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_class_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_enum_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_enum_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_class_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_class_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_string_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_int_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_enum_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_class_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_string_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_string_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_non_null_int_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_non_null_int_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_int_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_non_null_enum_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_non_null_enum_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_enum_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_class_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_class_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_enum_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_another_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoAnotherEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_another_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_another_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_another_enum_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_bool_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableBool%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_bool_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_int_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableInt%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_int_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_double_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableDouble%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_double_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_double_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_double_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_string_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_string_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_string_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_uint8_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableUint8List%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_uint8_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_uint8_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_uint8_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_enum_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_class_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_class_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_enum_list_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_enum_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      call_flutter_echo_nullable_non_null_class_list_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi.callFlutterEchoNullableNonNullClassList%"
              "s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_class_list_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_class_list_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_string_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_string_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_int_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_int_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_int_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_enum_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_enum_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_class_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_class_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar*
      call_flutter_echo_nullable_non_null_string_map_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi.callFlutterEchoNullableNonNullStringMap%"
              "s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_string_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_string_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_int_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_int_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_int_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_enum_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_enum_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_enum_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_class_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_class_map_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_echo_another_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoAnotherNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_another_nullable_enum_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_another_nullable_enum_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_another_nullable_enum_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* call_flutter_small_api_echo_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterSmallApiEchoString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_small_api_echo_string_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_small_api_echo_string_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_small_api_echo_string_channel,
      core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_cb,
      g_object_ref(api_data), g_object_unref);
}

void core_tests_golubets_test_host_integration_core_api_clear_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  g_autofree gchar* noop_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "noop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_channel = fl_basic_message_channel_new(
      messenger, noop_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(noop_channel, nullptr, nullptr,
                                               nullptr);
  g_autofree gchar* echo_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_types_channel =
      fl_basic_message_channel_new(messenger, echo_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_all_types_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* throw_error_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_error_channel =
      fl_basic_message_channel_new(messenger, throw_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(throw_error_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* throw_error_from_void_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwErrorFromVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_error_from_void_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_error_from_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(throw_error_from_void_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* throw_flutter_error_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwFlutterError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_flutter_error_channel =
      fl_basic_message_channel_new(messenger, throw_flutter_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(throw_flutter_error_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_int_channel =
      fl_basic_message_channel_new(messenger, echo_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_int_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_double_channel =
      fl_basic_message_channel_new(messenger, echo_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_double_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_bool_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_bool_channel =
      fl_basic_message_channel_new(messenger, echo_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_bool_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_string_channel =
      fl_basic_message_channel_new(messenger, echo_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_string_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_uint8_list_channel =
      fl_basic_message_channel_new(messenger, echo_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_uint8_list_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_object_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_object_channel =
      fl_basic_message_channel_new(messenger, echo_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_object_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_list_channel =
      fl_basic_message_channel_new(messenger, echo_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_list_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_list_channel =
      fl_basic_message_channel_new(messenger, echo_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_enum_list_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_list_channel =
      fl_basic_message_channel_new(messenger, echo_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_class_list_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_non_null_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_enum_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_non_null_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_class_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_map_channel =
      fl_basic_message_channel_new(messenger, echo_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_string_map_channel =
      fl_basic_message_channel_new(messenger, echo_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_string_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_int_map_channel =
      fl_basic_message_channel_new(messenger, echo_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_int_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_map_channel =
      fl_basic_message_channel_new(messenger, echo_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_enum_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_map_channel =
      fl_basic_message_channel_new(messenger, echo_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_class_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_non_null_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_string_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_non_null_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_int_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_non_null_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_enum_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_non_null_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNonNullClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_non_null_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_non_null_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_non_null_class_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_class_wrapper_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoClassWrapper%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_class_wrapper_channel =
      fl_basic_message_channel_new(messenger, echo_class_wrapper_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_class_wrapper_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_enum_channel =
      fl_basic_message_channel_new(messenger, echo_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_enum_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_another_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAnotherEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_enum_channel =
      fl_basic_message_channel_new(messenger, echo_another_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_another_enum_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_named_default_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNamedDefaultString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_named_default_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_named_default_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_named_default_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_optional_default_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoOptionalDefaultDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_optional_default_double_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_optional_default_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_optional_default_double_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* create_all_types_with_defaults_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.createAllTypesWithDefaults%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) create_all_types_with_defaults_channel =
      fl_basic_message_channel_new(messenger,
                                   create_all_types_with_defaults_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      create_all_types_with_defaults_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_all_types_with_defaults_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAllTypesWithDefaults%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_types_with_defaults_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_all_types_with_defaults_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_types_with_defaults_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_required_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoRequiredInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_required_int_channel =
      fl_basic_message_channel_new(messenger, echo_required_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_required_int_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_all_nullable_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAllNullableTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_all_nullable_types_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_all_nullable_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_all_nullable_types_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_all_nullable_types_without_recursion_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAllNullableTypesWithoutRecursion%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger, echo_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_all_nullable_types_without_recursion_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* extract_nested_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.extractNestedNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) extract_nested_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   extract_nested_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      extract_nested_nullable_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* create_nested_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.createNestedNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) create_nested_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   create_nested_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      create_nested_nullable_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* send_multiple_nullable_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "sendMultipleNullableTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) send_multiple_nullable_types_channel =
      fl_basic_message_channel_new(messenger,
                                   send_multiple_nullable_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      send_multiple_nullable_types_channel, nullptr, nullptr, nullptr);
  g_autofree gchar*
      send_multiple_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi."
              "sendMultipleNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      send_multiple_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              send_multiple_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      send_multiple_nullable_types_without_recursion_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* echo_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_int_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_int_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_double_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_double_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_bool_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_bool_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_bool_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_string_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_string_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_uint8_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_object_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_object_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_object_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_list_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_enum_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_class_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_enum_list_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_enum_list_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_enum_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_class_list_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_class_list_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_class_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_map_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_string_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_int_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_enum_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_class_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_string_map_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_string_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_string_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_non_null_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_int_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_nullable_non_null_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_enum_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoNullableNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_non_null_class_map_channel =
      fl_basic_message_channel_new(
          messenger, echo_nullable_non_null_class_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_nullable_non_null_class_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_nullable_enum_channel =
      fl_basic_message_channel_new(messenger, echo_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_nullable_enum_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_another_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAnotherNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_another_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_nullable_enum_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_optional_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoOptionalNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_optional_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_optional_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_optional_nullable_int_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_named_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoNamedNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_named_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_named_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_named_nullable_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* noop_async_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "noopAsync%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_async_channel =
      fl_basic_message_channel_new(messenger, noop_async_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(noop_async_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_async_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_int_channel =
      fl_basic_message_channel_new(messenger, echo_async_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_int_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_async_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_double_channel =
      fl_basic_message_channel_new(messenger, echo_async_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_double_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_bool_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_bool_channel =
      fl_basic_message_channel_new(messenger, echo_async_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_bool_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_async_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_string_channel =
      fl_basic_message_channel_new(messenger, echo_async_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_string_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_uint8_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_object_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_object_channel =
      fl_basic_message_channel_new(messenger, echo_async_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_object_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_list_channel =
      fl_basic_message_channel_new(messenger, echo_async_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_list_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_async_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_list_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_enum_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_class_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_map_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_async_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_string_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_int_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_int_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_enum_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_class_map_channel =
      fl_basic_message_channel_new(messenger, echo_async_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_class_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_enum_channel =
      fl_basic_message_channel_new(messenger, echo_async_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_enum_channel, nullptr,
                                               nullptr, nullptr);
  g_autofree gchar* echo_another_async_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAnotherAsyncEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_async_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_another_async_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_another_async_enum_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* throw_async_error_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwAsyncError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_error_channel =
      fl_basic_message_channel_new(messenger, throw_async_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(throw_async_error_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* throw_async_error_from_void_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwAsyncErrorFromVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_error_from_void_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_async_error_from_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_async_error_from_void_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* throw_async_flutter_error_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "throwAsyncFlutterError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) throw_async_flutter_error_channel =
      fl_basic_message_channel_new(messenger,
                                   throw_async_flutter_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      throw_async_flutter_error_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_all_types_channel =
      fl_basic_message_channel_new(messenger, echo_async_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_all_types_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_modern_async_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoModernAsyncAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_modern_async_all_types_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_modern_async_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_modern_async_all_types_and_not_throw_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoModernAsyncAllTypesAndNotThrow%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_all_types_and_not_throw_channel =
          fl_basic_message_channel_new(
              messenger, echo_modern_async_all_types_and_not_throw_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_and_not_throw_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* echo_modern_async_all_types_and_throw_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoModernAsyncAllTypesAndThrow%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_all_types_and_throw_channel =
          fl_basic_message_channel_new(
              messenger, echo_modern_async_all_types_and_throw_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_all_types_and_throw_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_async_nullable_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, echo_async_nullable_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_all_nullable_types_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* echo_modern_async_nullable_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoModernAsyncNullableAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_modern_async_nullable_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger,
              echo_modern_async_nullable_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_modern_async_nullable_all_nullable_types_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar*
      echo_async_nullable_all_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi."
              "echoAsyncNullableAllNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      echo_async_nullable_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              echo_async_nullable_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_all_nullable_types_without_recursion_channel, nullptr,
      nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_nullable_int_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_double_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_double_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_bool_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_nullable_bool_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_string_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_uint8_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableUint8List%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_uint8_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_object_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableObject%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_object_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_object_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_object_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_nullable_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_enum_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_class_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_nullable_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_string_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_int_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_enum_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAsyncNullableClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_async_nullable_class_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* echo_async_nullable_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "echoAsyncNullableEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_async_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   echo_async_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_async_nullable_enum_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* echo_another_async_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.echoAnotherAsyncNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_another_async_nullable_enum_channel =
      fl_basic_message_channel_new(
          messenger, echo_another_async_nullable_enum_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_another_async_nullable_enum_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* default_is_main_thread_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "defaultIsMainThread%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) default_is_main_thread_channel =
      fl_basic_message_channel_new(messenger,
                                   default_is_main_thread_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(default_is_main_thread_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* task_queue_is_background_thread_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.taskQueueIsBackgroundThread%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) task_queue_is_background_thread_channel =
      fl_basic_message_channel_new(messenger,
                                   task_queue_is_background_thread_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      task_queue_is_background_thread_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_noop_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterNoop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_noop_channel =
      fl_basic_message_channel_new(messenger, call_flutter_noop_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_noop_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_throw_error_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterThrowError%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_throw_error_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_throw_error_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_throw_error_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_throw_error_from_void_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterThrowErrorFromVoid%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_throw_error_from_void_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_throw_error_from_void_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_throw_error_from_void_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_all_types_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoAllTypes%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_all_types_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_all_types_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_types_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_all_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoAllNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_all_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_all_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_nullable_types_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_send_multiple_nullable_types_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterSendMultipleNullableTypes%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_send_multiple_nullable_types_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_send_multiple_nullable_types_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_send_multiple_nullable_types_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar*
      call_flutter_echo_all_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi."
              "callFlutterEchoAllNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_all_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_all_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_all_nullable_types_without_recursion_channel, nullptr,
      nullptr, nullptr);
  g_autofree gchar*
      call_flutter_send_multiple_nullable_types_without_recursion_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi."
              "callFlutterSendMultipleNullableTypesWithoutRecursion%s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_send_multiple_nullable_types_without_recursion_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_send_multiple_nullable_types_without_recursion_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_send_multiple_nullable_types_without_recursion_channel,
      nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_bool_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoBool%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_bool_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_int_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoInt%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_int_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_int_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_double_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoDouble%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_double_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_double_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_double_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_string_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoString%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_string_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_string_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_string_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_uint8_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoUint8List%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_uint8_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_uint8_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_uint8_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_list_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_enum_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnumList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_enum_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_class_list_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoClassList%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_class_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_class_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_class_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_enum_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_enum_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_class_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_class_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_map_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_string_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoStringMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_string_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_string_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_string_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_int_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoIntMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_int_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_int_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_int_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_enum_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnumMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_enum_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_class_map_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoClassMap%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_class_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_class_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_class_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_string_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_string_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_non_null_int_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_non_null_int_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_int_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_non_null_enum_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_non_null_enum_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_enum_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_non_null_class_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_non_null_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_non_null_class_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_enum_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostIntegrationCoreApi."
      "callFlutterEchoEnum%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(call_flutter_echo_enum_channel,
                                               nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_another_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoAnotherEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_another_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_another_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_another_enum_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_bool_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableBool%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_bool_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_bool_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_bool_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_int_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableInt%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_int_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_int_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_int_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_double_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableDouble%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_double_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_double_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_double_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_string_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_string_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_string_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_uint8_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableUint8List%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_uint8_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_uint8_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_uint8_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_list_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_list_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_enum_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_class_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableClassList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_class_list_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_class_list_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_non_null_enum_list_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableNonNullEnumList%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_enum_list_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_enum_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_enum_list_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar*
      call_flutter_echo_nullable_non_null_class_list_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi.callFlutterEchoNullableNonNullClassList%"
              "s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_class_list_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_class_list_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_class_list_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_echo_nullable_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_map_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_map_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_string_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableStringMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_string_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_string_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_int_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_int_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_int_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_enum_map_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_echo_nullable_enum_map_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_nullable_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_class_map_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_nullable_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_class_map_channel, nullptr, nullptr, nullptr);
  g_autofree gchar*
      call_flutter_echo_nullable_non_null_string_map_channel_name =
          g_strdup_printf(
              "dev.bayori.golubets.golubets_integration_tests."
              "HostIntegrationCoreApi.callFlutterEchoNullableNonNullStringMap%"
              "s",
              dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_string_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_string_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_string_map_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_echo_nullable_non_null_int_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableNonNullIntMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_int_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_int_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_int_map_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_echo_nullable_non_null_enum_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableNonNullEnumMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_enum_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_enum_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_enum_map_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_echo_nullable_non_null_class_map_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableNonNullClassMap%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_nullable_non_null_class_map_channel =
          fl_basic_message_channel_new(
              messenger,
              call_flutter_echo_nullable_non_null_class_map_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_non_null_class_map_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_echo_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_echo_nullable_enum_channel =
      fl_basic_message_channel_new(messenger,
                                   call_flutter_echo_nullable_enum_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_nullable_enum_channel, nullptr, nullptr, nullptr);
  g_autofree gchar* call_flutter_echo_another_nullable_enum_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterEchoAnotherNullableEnum%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel)
      call_flutter_echo_another_nullable_enum_channel =
          fl_basic_message_channel_new(
              messenger, call_flutter_echo_another_nullable_enum_channel_name,
              FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_echo_another_nullable_enum_channel, nullptr, nullptr,
      nullptr);
  g_autofree gchar* call_flutter_small_api_echo_string_channel_name =
      g_strdup_printf(
          "dev.bayori.golubets.golubets_integration_tests."
          "HostIntegrationCoreApi.callFlutterSmallApiEchoString%s",
          dot_suffix);
  g_autoptr(FlBasicMessageChannel) call_flutter_small_api_echo_string_channel =
      fl_basic_message_channel_new(
          messenger, call_flutter_small_api_echo_string_channel_name,
          FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      call_flutter_small_api_echo_string_channel, nullptr, nullptr, nullptr);
}

void core_tests_golubets_test_host_integration_core_api_respond_noop_async(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle*
        response_handle) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse) response =
      core_tests_golubets_test_host_integration_core_api_noop_async_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "noopAsync", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_noop_async(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiNoopAsyncResponse) response =
      core_tests_golubets_test_host_integration_core_api_noop_async_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "noopAsync", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_int(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    int64_t return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_int_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncInt", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_int(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_int_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncInt", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_double(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    double return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_double_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncDouble", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_double(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncDoubleResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_double_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncDouble", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_bool(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    gboolean return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncBool", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_bool(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncBoolResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_bool_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncBool", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_string(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_string_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncString", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_string(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_string_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncString", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_uint8_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncUint8List", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_uint8_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncUint8ListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncUint8List", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_object(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_object_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncObject", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_object(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncObjectResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_object_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncObject", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_list_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncListResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_list_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncMapResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncIntMapResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_int_map_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAnEnum return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncEnumResponse) response =
      core_tests_golubets_test_host_integration_core_api_echo_async_enum_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_another_async_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAnotherEnum return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherAsyncEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_another_async_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_another_async_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherAsyncEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_throw_async_error(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse) response =
      core_tests_golubets_test_host_integration_core_api_throw_async_error_response_new(
          return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncError", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_throw_async_error(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorResponse) response =
      core_tests_golubets_test_host_integration_core_api_throw_async_error_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncError", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_throw_async_error_from_void(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle*
        response_handle) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncErrorFromVoid", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_throw_async_error_from_void(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncErrorFromVoidResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_throw_async_error_from_void_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncErrorFromVoid", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_throw_async_flutter_error(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncFlutterError", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_throw_async_flutter_error(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiThrowAsyncFlutterErrorResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_throw_async_flutter_error_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "throwAsyncFlutterError", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_all_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncAllTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_all_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncAllTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_all_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncAllTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_modern_async_all_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_modern_async_all_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_modern_async_all_types_and_not_throw(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypesAndNotThrow", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_modern_async_all_types_and_not_throw(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndNotThrowResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_not_throw_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypesAndNotThrow", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_modern_async_all_types_and_throw(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypesAndThrow", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_modern_async_all_types_and_throw(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncAllTypesAndThrowResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_modern_async_all_types_and_throw_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncAllTypesAndThrow", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_all_nullable_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_all_nullable_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_modern_async_nullable_all_nullable_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncNullableAllNullableTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_modern_async_nullable_all_nullable_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoModernAsyncNullableAllNullableTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_modern_async_nullable_all_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoModernAsyncNullableAllNullableTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_all_nullable_types_without_recursion(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_all_nullable_types_without_recursion(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_all_nullable_types_without_recursion_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_int(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    int64_t* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableInt", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_int(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableInt", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_double(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    double* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableDouble", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_double(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableDoubleResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_double_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableDouble", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_bool(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    gboolean* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableBool", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_bool(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableBoolResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_bool_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableBool", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_string(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableString", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_string(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableString", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_uint8_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableUint8List", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_uint8_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableUint8ListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableUint8List", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_object(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableObject", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_object(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableObjectResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_object_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableObject", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableIntMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_int_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_async_nullable_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAnEnum* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_async_nullable_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAsyncNullableEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_async_nullable_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAsyncNullableEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_echo_another_async_nullable_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAnotherEnum* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherAsyncNullableEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_echo_another_async_nullable_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiEchoAnotherAsyncNullableEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_echo_another_async_nullable_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "echoAnotherAsyncNullableEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_noop(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle*
        response_handle) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse) response =
      core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterNoop", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_noop(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterNoopResponse) response =
      core_tests_golubets_test_host_integration_core_api_call_flutter_noop_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterNoop", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_throw_error(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowError", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_throw_error(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowError", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_throw_error_from_void(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle*
        response_handle) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowErrorFromVoid", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_throw_error_from_void(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterThrowErrorFromVoidResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_throw_error_from_void_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterThrowErrorFromVoid", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_all_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllTypes* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_all_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_all_nullable_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_all_nullable_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_send_multiple_nullable_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllNullableTypes* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_send_multiple_nullable_types(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypes", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_all_nullable_types_without_recursion(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_all_nullable_types_without_recursion(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAllNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_all_nullable_types_without_recursion_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAllNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_send_multiple_nullable_types_without_recursion(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_send_multiple_nullable_types_without_recursion(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSendMultipleNullableTypesWithoutRecursionResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_send_multiple_nullable_types_without_recursion_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSendMultipleNullableTypesWithoutRecursion",
              error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_bool(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    gboolean return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoBool", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_bool(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoBoolResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_bool_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoBool", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_int(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    int64_t return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoInt", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_int(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoInt", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_double(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    double return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoDouble", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_double(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoDoubleResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_double_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoDouble", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_string(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoString", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_string(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoString", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_uint8_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoUint8List", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_uint8_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoUint8ListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoUint8List", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_non_null_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_non_null_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoIntMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_int_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_non_null_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_non_null_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullIntMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_int_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_non_null_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_non_null_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_non_null_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNonNullClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_non_null_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNonNullClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAnEnum return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_another_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAnotherEnum return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAnotherEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_another_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAnotherEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_bool(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    gboolean* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableBool", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_bool(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableBoolResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_bool_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableBool", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_int(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    int64_t* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableInt", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_int(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableInt", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_double(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    double* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableDouble", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_double(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableDoubleResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_double_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableDouble", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_string(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableString", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_string(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableString", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_uint8_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const uint8_t* return_value, size_t return_value_length) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new(
              return_value, return_value_length);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableUint8List", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_uint8_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableUint8ListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_uint8_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableUint8List", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_enum_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullEnumList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_class_list(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassListResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_list_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullClassList", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableIntMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_int_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_string_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullStringMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_string_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullStringMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_int_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullIntMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_int_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullIntMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_enum_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullEnumMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_enum_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullEnumMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_non_null_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    FlValue* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_non_null_class_map(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableNonNullClassMapResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_non_null_class_map_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableNonNullClassMap", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_nullable_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAnEnum* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_nullable_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoNullableEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_nullable_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoNullableEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_echo_another_nullable_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    CoreTestsGolubetsTestAnotherEnum* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAnotherNullableEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_echo_another_nullable_enum(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterEchoAnotherNullableEnumResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_echo_another_nullable_enum_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterEchoAnotherNullableEnum", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_call_flutter_small_api_echo_string(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new(
              return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSmallApiEchoString", error->message);
  }
}

void core_tests_golubets_test_host_integration_core_api_respond_error_call_flutter_small_api_echo_string(
    CoreTestsGolubetsTestHostIntegrationCoreApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(
      CoreTestsGolubetsTestHostIntegrationCoreApiCallFlutterSmallApiEchoStringResponse)
      response =
          core_tests_golubets_test_host_integration_core_api_call_flutter_small_api_echo_string_response_new_error(
              code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostIntegrationCoreApi",
              "callFlutterSmallApiEchoString", error->message);
  }
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  gchar* suffix;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestFlutterIntegrationCoreApi,
              core_tests_golubets_test_flutter_integration_core_api,
              G_TYPE_OBJECT)

static void core_tests_golubets_test_flutter_integration_core_api_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API(object);
  g_clear_object(&self->messenger);
  g_clear_pointer(&self->suffix, g_free);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_flutter_integration_core_api_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self) {}

static void core_tests_golubets_test_flutter_integration_core_api_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_dispose;
}

CoreTestsGolubetsTestFlutterIntegrationCoreApi*
core_tests_golubets_test_flutter_integration_core_api_new(
    FlBinaryMessenger* messenger, const gchar* suffix) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApi* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API(g_object_new(
          core_tests_golubets_test_flutter_integration_core_api_get_type(),
          nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  return self;
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse,
    core_tests_golubets_test_flutter_integration_core_api_noop_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_noop_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_noop_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_noop_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_noop_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_noop_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse*
core_tests_golubets_test_flutter_integration_core_api_noop_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(g_object_new(
          core_tests_golubets_test_flutter_integration_core_api_noop_response_get_type(),
          nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_noop_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_noop_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_noop_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_noop_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_noop_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_noop_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_noop_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

static void core_tests_golubets_test_flutter_integration_core_api_noop_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_noop(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.noop%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_noop_cb, task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopResponse*
core_tests_golubets_test_flutter_integration_core_api_noop_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_noop_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse,
    core_tests_golubets_test_flutter_integration_core_api_throw_error_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_throw_error_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_throw_error_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_throw_error_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_throw_error_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_throw_error_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse*
core_tests_golubets_test_flutter_integration_core_api_throw_error_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_throw_error_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_throw_error_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_throw_error_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_throw_error_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_throw_error_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_throw_error_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_throw_error_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_throw_error_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_throw_error_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_throw_error_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_throw_error_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_throw_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.throwError%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_throw_error_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorResponse*
core_tests_golubets_test_flutter_integration_core_api_throw_error_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_throw_error_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse,
    core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_THROW_ERROR_FROM_VOID_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

static void
core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.throwErrorFromVoid%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiThrowErrorFromVoidResponse*
core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_throw_error_from_void_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubetsTestAllTypes*
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_is_error(
          self));
  return CORE_TESTS_GOLUBETS_TEST_ALL_TYPES(
      fl_value_get_custom_value_object(self->return_value));
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_all_types(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubetsTestAllTypes* everything, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_custom_object(
                                 core_tests_golubets_test_all_types_type_id,
                                 G_OBJECT(everything)));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoAllTypes%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_all_types_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllTypesResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_all_types_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_all_types_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubetsTestAllNullableTypes*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
      fl_value_get_custom_value_object(self->return_value));
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubetsTestAllNullableTypes* everything,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, everything != nullptr
                ? fl_value_new_custom_object(
                      core_tests_golubets_test_all_nullable_types_type_id,
                      G_OBJECT(everything))
                : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoAllNullableTypes%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse,
    core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
      self = CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubetsTestAllNullableTypes*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_is_error(
          self));
  return CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES(
      fl_value_get_custom_value_object(self->return_value));
}

static void
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    const gchar* a_nullable_string, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_nullable_bool != nullptr
                                 ? fl_value_new_bool(*a_nullable_bool)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_int != nullptr
                                 ? fl_value_new_int(*a_nullable_int)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_string != nullptr
                                 ? fl_value_new_string(a_nullable_string)
                                 : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.sendMultipleNullableTypes%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesResponse*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubetsTestAllNullableTypesWithoutRecursion*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ALL_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
      fl_value_get_custom_value_object(self->return_value));
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubetsTestAllNullableTypesWithoutRecursion* everything,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args,
      everything != nullptr
          ? fl_value_new_custom_object(
                core_tests_golubets_test_all_nullable_types_without_recursion_type_id,
                G_OBJECT(everything))
          : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoAllNullableTypesWithoutRecursion%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAllNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_all_nullable_types_without_recursion_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse,
    core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
      self = CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubetsTestAllNullableTypesWithoutRecursion*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_SEND_MULTIPLE_NULLABLE_TYPES_WITHOUT_RECURSION_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_is_error(
          self));
  return CORE_TESTS_GOLUBETS_TEST_ALL_NULLABLE_TYPES_WITHOUT_RECURSION(
      fl_value_get_custom_value_object(self->return_value));
}

static void
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    gboolean* a_nullable_bool, int64_t* a_nullable_int,
    const gchar* a_nullable_string, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_nullable_bool != nullptr
                                 ? fl_value_new_bool(*a_nullable_bool)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_int != nullptr
                                 ? fl_value_new_int(*a_nullable_int)
                                 : fl_value_new_null());
  fl_value_append_take(args, a_nullable_string != nullptr
                                 ? fl_value_new_string(a_nullable_string)
                                 : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.sendMultipleNullableTypesWithoutRecursion%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiSendMultipleNullableTypesWithoutRecursionResponse*
core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_send_multiple_nullable_types_without_recursion_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_BOOL_RESPONSE(
          self),
      FALSE);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_is_error(
          self));
  return fl_value_get_bool(self->return_value);
}

static void core_tests_golubets_test_flutter_integration_core_api_echo_bool_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_bool(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, gboolean a_bool,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_bool(a_bool));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoBool%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_bool_cb, task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoBoolResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_bool_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_bool_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_int_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_int_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_int_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_int_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_int_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_int_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_int_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_int_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_int_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_int_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_int_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_int_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_int_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

int64_t
core_tests_golubets_test_flutter_integration_core_api_echo_int_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_RESPONSE(
          self),
      0);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_int_response_is_error(
          self));
  return fl_value_get_int(self->return_value);
}

static void core_tests_golubets_test_flutter_integration_core_api_echo_int_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_int(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, int64_t an_int,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_int(an_int));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoInt%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_int_cb, task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_int_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_int_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_double_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_double_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_double_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_double_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_double_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_double_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_double_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_double_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_double_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_double_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_double_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_double_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_double_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

double
core_tests_golubets_test_flutter_integration_core_api_echo_double_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_DOUBLE_RESPONSE(
          self),
      0.0);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_double_response_is_error(
          self));
  return fl_value_get_float(self->return_value);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_double_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_double(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, double a_double,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_float(a_double));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoDouble%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_double_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoDoubleResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_double_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_double_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_string_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_string_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_string_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_string_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_string_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_string_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_string_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_string_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_string_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_string_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_string_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(self->return_value);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_string_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_string(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_string(a_string));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoString%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_string_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_string_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_string_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse* self) {
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const uint8_t*
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse* self,
    size_t* return_value_length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_is_error(
          self));
  if (return_value_length != nullptr) {
    *return_value_length = fl_value_get_length(self->return_value);
  }
  return fl_value_get_uint8_list(self->return_value);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, const uint8_t* list,
    size_t list_length, GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_uint8_list(list, list_length));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoUint8List%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoUint8ListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_uint8_list_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_list_response_is_error(
          self));
  return self->return_value;
}

static void core_tests_golubets_test_flutter_integration_core_api_echo_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(list));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_list_cb, task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_list_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_enum_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* enum_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(enum_list));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoEnumList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_enum_list_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_class_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* class_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(class_list));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoClassList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_class_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_class_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_class_list_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* enum_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(enum_list));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNonNullEnumList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_list_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* class_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(class_list));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNonNullClassList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_list_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_map_response_is_error(
          self));
  return self->return_value;
}

static void core_tests_golubets_test_flutter_integration_core_api_echo_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_map_cb, task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_map_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_string_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* string_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(string_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoStringMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_string_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoStringMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_string_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_string_map_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_int_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* int_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(int_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoIntMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_int_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoIntMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_int_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_int_map_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_enum_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* enum_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(enum_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoEnumMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_enum_map_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_class_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* class_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(class_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoClassMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_class_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoClassMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_class_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_class_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* string_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(string_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNonNullStringMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullStringMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_non_null_string_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* int_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(int_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNonNullIntMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullIntMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_non_null_int_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* enum_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(enum_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNonNullEnumMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullEnumMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_non_null_enum_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_is_error(
          self));
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* class_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_ref(class_map));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNonNullClassMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNonNullClassMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_non_null_class_map_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubetsTestAnEnum
core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ENUM_RESPONSE(
          self),
      static_cast<CoreTestsGolubetsTestAnEnum>(0));
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_is_error(
          self));
  return static_cast<CoreTestsGolubetsTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(
          fl_value_get_custom_value(self->return_value)))));
}

static void core_tests_golubets_test_flutter_integration_core_api_echo_enum_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_enum(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubetsTestAnEnum an_enum, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                fl_value_new_int(an_enum),
                                (GDestroyNotify)fl_value_unref));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoEnum%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_enum_cb, task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoEnumResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_enum_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_enum_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubetsTestAnotherEnum
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_ENUM_RESPONSE(
          self),
      static_cast<CoreTestsGolubetsTestAnotherEnum>(0));
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_is_error(
          self));
  return static_cast<CoreTestsGolubetsTestAnotherEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(
          fl_value_get_custom_value(self->return_value)))));
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_another_enum(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubetsTestAnotherEnum another_enum, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                                fl_value_new_int(another_enum),
                                (GDestroyNotify)fl_value_unref));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoAnotherEnum%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherEnumResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_another_enum_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
  gboolean return_value_;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

gboolean*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_BOOL_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  self->return_value_ = fl_value_get_bool(self->return_value);
  return &self->return_value_;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, gboolean* a_bool,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_bool != nullptr ? fl_value_new_bool(*a_bool)
                                               : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableBool%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableBoolResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_bool_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
  int64_t return_value_;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

int64_t*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  self->return_value_ = fl_value_get_int(self->return_value);
  return &self->return_value_;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, int64_t* an_int,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, an_int != nullptr ? fl_value_new_int(*an_int)
                                               : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableInt%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
  double return_value_;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

double*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_DOUBLE_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  self->return_value_ = fl_value_get_float(self->return_value);
  return &self->return_value_;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, double* a_double,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_double != nullptr ? fl_value_new_float(*a_double)
                                                 : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableDouble%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableDoubleResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_double_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return fl_value_get_string(self->return_value);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, a_string != nullptr ? fl_value_new_string(a_string)
                                                 : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableString%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const uint8_t*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
        self,
    size_t* return_value_length) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_UINT8_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  if (return_value_length != nullptr) {
    *return_value_length = fl_value_get_length(self->return_value);
  }
  return fl_value_get_uint8_list(self->return_value);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, const uint8_t* list,
    size_t list_length, GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, list != nullptr
                                 ? fl_value_new_uint8_list(list, list_length)
                                 : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableUint8List%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableUint8ListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_uint8_list_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, list != nullptr ? fl_value_ref(list) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_list_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* enum_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, enum_list != nullptr ? fl_value_ref(enum_list)
                                                  : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableEnumList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_list_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* class_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, class_list != nullptr ? fl_value_ref(class_list)
                                                   : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableClassList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_list_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* enum_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, enum_list != nullptr ? fl_value_ref(enum_list)
                                                  : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableNonNullEnumList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_list_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
      self = CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* class_list,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, class_list != nullptr ? fl_value_ref(class_list)
                                                   : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableNonNullClassList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassListResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_list_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, map != nullptr ? fl_value_ref(map) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* string_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, string_map != nullptr ? fl_value_ref(string_map)
                                                   : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableStringMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableStringMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_string_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* int_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, int_map != nullptr ? fl_value_ref(int_map) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableIntMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableIntMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_int_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* enum_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, enum_map != nullptr ? fl_value_ref(enum_map) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableEnumMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* class_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, class_map != nullptr ? fl_value_ref(class_map)
                                                  : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableClassMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableClassMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_class_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_STRING_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* string_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, string_map != nullptr ? fl_value_ref(string_map)
                                                   : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableNonNullStringMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullStringMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_string_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_INT_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* int_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, int_map != nullptr ? fl_value_ref(int_map) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableNonNullIntMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullIntMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_int_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_ENUM_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* enum_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, enum_map != nullptr ? fl_value_ref(enum_map) : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableNonNullEnumMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullEnumMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_enum_map_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
      self = CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_NON_NULL_CLASS_MAP_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  return self->return_value;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, FlValue* class_map,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, class_map != nullptr ? fl_value_ref(class_map)
                                                  : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableNonNullClassMap%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableNonNullClassMapResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_non_null_class_map_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
  CoreTestsGolubetsTestAnEnum return_value_;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubetsTestAnEnum*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  self->return_value_ = static_cast<CoreTestsGolubetsTestAnEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(
          fl_value_get_custom_value(self->return_value)))));
  return &self->return_value_;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubetsTestAnEnum* an_enum, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, an_enum != nullptr
                ? fl_value_new_custom(core_tests_golubets_test_an_enum_type_id,
                                      fl_value_new_int(*an_enum),
                                      (GDestroyNotify)fl_value_unref)
                : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoNullableEnum%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoNullableEnumResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_nullable_enum_response_new(
      response);
}

struct
    _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
  CoreTestsGolubetsTestAnotherEnum return_value_;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
      self =
          CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
              object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubetsTestAnotherEnum*
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ANOTHER_NULLABLE_ENUM_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_is_error(
          self));
  if (fl_value_get_type(self->return_value) == FL_VALUE_TYPE_NULL) {
    return nullptr;
  }
  self->return_value_ = static_cast<CoreTestsGolubetsTestAnotherEnum>(
      fl_value_get_int(reinterpret_cast<FlValue*>(const_cast<gpointer>(
          fl_value_get_custom_value(self->return_value)))));
  return &self->return_value_;
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    CoreTestsGolubetsTestAnotherEnum* another_enum, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args,
      another_enum != nullptr
          ? fl_value_new_custom(core_tests_golubets_test_another_enum_type_id,
                                fl_value_new_int(*another_enum),
                                (GDestroyNotify)fl_value_unref)
          : fl_value_new_null());
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoAnotherNullableEnum%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAnotherNullableEnumResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_another_nullable_enum_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse {
  GObject parent_instance;

  FlValue* error;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse,
    core_tests_golubets_test_flutter_integration_core_api_noop_async_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_noop_async_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_noop_async_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_noop_async_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse* self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_noop_async_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_noop_async_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse*
core_tests_golubets_test_flutter_integration_core_api_noop_async_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_noop_async_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_noop_async_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_noop_async_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_noop_async_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_noop_async_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_noop_async_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_noop_async_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_NOOP_ASYNC_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_noop_async_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

static void core_tests_golubets_test_flutter_integration_core_api_noop_async_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_noop_async(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.noopAsync%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_noop_async_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiNoopAsyncResponse*
core_tests_golubets_test_flutter_integration_core_api_noop_async_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_noop_async_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse,
    core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse*
        self) {}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_class_init(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponseClass*
        klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_dispose;
}

static CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_is_error(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_get_error_code(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_get_error_message(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_get_error_details(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const gchar*
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_get_return_value(
    CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse*
        self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_INTEGRATION_CORE_API_ECHO_ASYNC_STRING_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_is_error(
          self));
  return fl_value_get_string(self->return_value);
}

static void
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_integration_core_api_echo_async_string(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_string(a_string));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests."
      "FlutterIntegrationCoreApi.echoAsyncString%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_integration_core_api_echo_async_string_cb,
      task);
}

CoreTestsGolubetsTestFlutterIntegrationCoreApiEchoAsyncStringResponse*
core_tests_golubets_test_flutter_integration_core_api_echo_async_string_finish(
    CoreTestsGolubetsTestFlutterIntegrationCoreApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_integration_core_api_echo_async_string_response_new(
      response);
}

struct _CoreTestsGolubetsTestHostTrivialApiNoopResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestHostTrivialApiNoopResponse,
              core_tests_golubets_test_host_trivial_api_noop_response,
              G_TYPE_OBJECT)

static void core_tests_golubets_test_host_trivial_api_noop_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostTrivialApiNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_TRIVIAL_API_NOOP_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_trivial_api_noop_response_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_host_trivial_api_noop_response_init(
    CoreTestsGolubetsTestHostTrivialApiNoopResponse* self) {}

static void core_tests_golubets_test_host_trivial_api_noop_response_class_init(
    CoreTestsGolubetsTestHostTrivialApiNoopResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_trivial_api_noop_response_dispose;
}

CoreTestsGolubetsTestHostTrivialApiNoopResponse*
core_tests_golubets_test_host_trivial_api_noop_response_new() {
  CoreTestsGolubetsTestHostTrivialApiNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_TRIVIAL_API_NOOP_RESPONSE(g_object_new(
          core_tests_golubets_test_host_trivial_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

CoreTestsGolubetsTestHostTrivialApiNoopResponse*
core_tests_golubets_test_host_trivial_api_noop_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostTrivialApiNoopResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_TRIVIAL_API_NOOP_RESPONSE(g_object_new(
          core_tests_golubets_test_host_trivial_api_noop_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostTrivialApi {
  GObject parent_instance;

  const CoreTestsGolubetsTestHostTrivialApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestHostTrivialApi,
              core_tests_golubets_test_host_trivial_api, G_TYPE_OBJECT)

static void core_tests_golubets_test_host_trivial_api_dispose(GObject* object) {
  CoreTestsGolubetsTestHostTrivialApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_TRIVIAL_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(core_tests_golubets_test_host_trivial_api_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_host_trivial_api_init(
    CoreTestsGolubetsTestHostTrivialApi* self) {}

static void core_tests_golubets_test_host_trivial_api_class_init(
    CoreTestsGolubetsTestHostTrivialApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_trivial_api_dispose;
}

static CoreTestsGolubetsTestHostTrivialApi*
core_tests_golubets_test_host_trivial_api_new(
    const CoreTestsGolubetsTestHostTrivialApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func) {
  CoreTestsGolubetsTestHostTrivialApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_TRIVIAL_API(g_object_new(
          core_tests_golubets_test_host_trivial_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void core_tests_golubets_test_host_trivial_api_noop_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostTrivialApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_TRIVIAL_API(user_data);

  if (self->vtable == nullptr || self->vtable->noop == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostTrivialApiNoopResponse) response =
      self->vtable->noop(self->user_data);
  if (response == nullptr) {
    g_warning("No response returned to %s.%s", "HostTrivialApi", "noop");
    return;
  }

  g_autoptr(GError) error = NULL;
  if (!fl_basic_message_channel_respond(channel, response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostTrivialApi", "noop",
              error->message);
  }
}

void core_tests_golubets_test_host_trivial_api_set_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix,
    const CoreTestsGolubetsTestHostTrivialApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(CoreTestsGolubetsTestHostTrivialApi) api_data =
      core_tests_golubets_test_host_trivial_api_new(vtable, user_data,
                                                    user_data_free_func);

  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  g_autofree gchar* noop_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostTrivialApi.noop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_channel = fl_basic_message_channel_new(
      messenger, noop_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      noop_channel, core_tests_golubets_test_host_trivial_api_noop_cb,
      g_object_ref(api_data), g_object_unref);
}

void core_tests_golubets_test_host_trivial_api_clear_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  g_autofree gchar* noop_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostTrivialApi.noop%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) noop_channel = fl_basic_message_channel_new(
      messenger, noop_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(noop_channel, nullptr, nullptr,
                                               nullptr);
}

struct _CoreTestsGolubetsTestHostSmallApiResponseHandle {
  GObject parent_instance;

  FlBasicMessageChannel* channel;
  FlBasicMessageChannelResponseHandle* response_handle;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestHostSmallApiResponseHandle,
              core_tests_golubets_test_host_small_api_response_handle,
              G_TYPE_OBJECT)

static void core_tests_golubets_test_host_small_api_response_handle_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostSmallApiResponseHandle* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API_RESPONSE_HANDLE(object);
  g_clear_object(&self->channel);
  g_clear_object(&self->response_handle);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_small_api_response_handle_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_host_small_api_response_handle_init(
    CoreTestsGolubetsTestHostSmallApiResponseHandle* self) {}

static void core_tests_golubets_test_host_small_api_response_handle_class_init(
    CoreTestsGolubetsTestHostSmallApiResponseHandleClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_small_api_response_handle_dispose;
}

static CoreTestsGolubetsTestHostSmallApiResponseHandle*
core_tests_golubets_test_host_small_api_response_handle_new(
    FlBasicMessageChannel* channel,
    FlBasicMessageChannelResponseHandle* response_handle) {
  CoreTestsGolubetsTestHostSmallApiResponseHandle* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API_RESPONSE_HANDLE(g_object_new(
          core_tests_golubets_test_host_small_api_response_handle_get_type(),
          nullptr));
  self->channel = FL_BASIC_MESSAGE_CHANNEL(g_object_ref(channel));
  self->response_handle =
      FL_BASIC_MESSAGE_CHANNEL_RESPONSE_HANDLE(g_object_ref(response_handle));
  return self;
}

G_DECLARE_FINAL_TYPE(CoreTestsGolubetsTestHostSmallApiEchoResponse,
                     core_tests_golubets_test_host_small_api_echo_response,
                     CORE_TESTS_GOLUBETS_TEST, HOST_SMALL_API_ECHO_RESPONSE,
                     GObject)

struct _CoreTestsGolubetsTestHostSmallApiEchoResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestHostSmallApiEchoResponse,
              core_tests_golubets_test_host_small_api_echo_response,
              G_TYPE_OBJECT)

static void core_tests_golubets_test_host_small_api_echo_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostSmallApiEchoResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API_ECHO_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_small_api_echo_response_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_host_small_api_echo_response_init(
    CoreTestsGolubetsTestHostSmallApiEchoResponse* self) {}

static void core_tests_golubets_test_host_small_api_echo_response_class_init(
    CoreTestsGolubetsTestHostSmallApiEchoResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_small_api_echo_response_dispose;
}

static CoreTestsGolubetsTestHostSmallApiEchoResponse*
core_tests_golubets_test_host_small_api_echo_response_new(
    const gchar* return_value) {
  CoreTestsGolubetsTestHostSmallApiEchoResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API_ECHO_RESPONSE(g_object_new(
          core_tests_golubets_test_host_small_api_echo_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(return_value));
  return self;
}

static CoreTestsGolubetsTestHostSmallApiEchoResponse*
core_tests_golubets_test_host_small_api_echo_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostSmallApiEchoResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API_ECHO_RESPONSE(g_object_new(
          core_tests_golubets_test_host_small_api_echo_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

G_DECLARE_FINAL_TYPE(CoreTestsGolubetsTestHostSmallApiVoidVoidResponse,
                     core_tests_golubets_test_host_small_api_void_void_response,
                     CORE_TESTS_GOLUBETS_TEST,
                     HOST_SMALL_API_VOID_VOID_RESPONSE, GObject)

struct _CoreTestsGolubetsTestHostSmallApiVoidVoidResponse {
  GObject parent_instance;

  FlValue* value;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestHostSmallApiVoidVoidResponse,
              core_tests_golubets_test_host_small_api_void_void_response,
              G_TYPE_OBJECT)

static void core_tests_golubets_test_host_small_api_void_void_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestHostSmallApiVoidVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API_VOID_VOID_RESPONSE(object);
  g_clear_pointer(&self->value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_host_small_api_void_void_response_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_host_small_api_void_void_response_init(
    CoreTestsGolubetsTestHostSmallApiVoidVoidResponse* self) {}

static void
core_tests_golubets_test_host_small_api_void_void_response_class_init(
    CoreTestsGolubetsTestHostSmallApiVoidVoidResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_small_api_void_void_response_dispose;
}

static CoreTestsGolubetsTestHostSmallApiVoidVoidResponse*
core_tests_golubets_test_host_small_api_void_void_response_new() {
  CoreTestsGolubetsTestHostSmallApiVoidVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API_VOID_VOID_RESPONSE(g_object_new(
          core_tests_golubets_test_host_small_api_void_void_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_null());
  return self;
}

static CoreTestsGolubetsTestHostSmallApiVoidVoidResponse*
core_tests_golubets_test_host_small_api_void_void_response_new_error(
    const gchar* code, const gchar* message, FlValue* details) {
  CoreTestsGolubetsTestHostSmallApiVoidVoidResponse* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API_VOID_VOID_RESPONSE(g_object_new(
          core_tests_golubets_test_host_small_api_void_void_response_get_type(),
          nullptr));
  self->value = fl_value_new_list();
  fl_value_append_take(self->value, fl_value_new_string(code));
  fl_value_append_take(self->value,
                       fl_value_new_string(message != nullptr ? message : ""));
  fl_value_append_take(self->value, details != nullptr ? fl_value_ref(details)
                                                       : fl_value_new_null());
  return self;
}

struct _CoreTestsGolubetsTestHostSmallApi {
  GObject parent_instance;

  const CoreTestsGolubetsTestHostSmallApiVTable* vtable;
  gpointer user_data;
  GDestroyNotify user_data_free_func;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestHostSmallApi,
              core_tests_golubets_test_host_small_api, G_TYPE_OBJECT)

static void core_tests_golubets_test_host_small_api_dispose(GObject* object) {
  CoreTestsGolubetsTestHostSmallApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API(object);
  if (self->user_data != nullptr) {
    self->user_data_free_func(self->user_data);
  }
  self->user_data = nullptr;
  G_OBJECT_CLASS(core_tests_golubets_test_host_small_api_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_host_small_api_init(
    CoreTestsGolubetsTestHostSmallApi* self) {}

static void core_tests_golubets_test_host_small_api_class_init(
    CoreTestsGolubetsTestHostSmallApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_host_small_api_dispose;
}

static CoreTestsGolubetsTestHostSmallApi*
core_tests_golubets_test_host_small_api_new(
    const CoreTestsGolubetsTestHostSmallApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func) {
  CoreTestsGolubetsTestHostSmallApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API(g_object_new(
          core_tests_golubets_test_host_small_api_get_type(), nullptr));
  self->vtable = vtable;
  self->user_data = user_data;
  self->user_data_free_func = user_data_free_func;
  return self;
}

static void core_tests_golubets_test_host_small_api_echo_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostSmallApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API(user_data);

  if (self->vtable == nullptr || self->vtable->echo == nullptr) {
    return;
  }

  FlValue* value0 = fl_value_get_list_value(message_, 0);
  const gchar* a_string = fl_value_get_string(value0);
  g_autoptr(CoreTestsGolubetsTestHostSmallApiResponseHandle) handle =
      core_tests_golubets_test_host_small_api_response_handle_new(
          channel, response_handle);
  self->vtable->echo(a_string, handle, self->user_data);
}

static void core_tests_golubets_test_host_small_api_void_void_cb(
    FlBasicMessageChannel* channel, FlValue* message_,
    FlBasicMessageChannelResponseHandle* response_handle, gpointer user_data) {
  CoreTestsGolubetsTestHostSmallApi* self =
      CORE_TESTS_GOLUBETS_TEST_HOST_SMALL_API(user_data);

  if (self->vtable == nullptr || self->vtable->void_void == nullptr) {
    return;
  }

  g_autoptr(CoreTestsGolubetsTestHostSmallApiResponseHandle) handle =
      core_tests_golubets_test_host_small_api_response_handle_new(
          channel, response_handle);
  self->vtable->void_void(handle, self->user_data);
}

void core_tests_golubets_test_host_small_api_set_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix,
    const CoreTestsGolubetsTestHostSmallApiVTable* vtable, gpointer user_data,
    GDestroyNotify user_data_free_func) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  g_autoptr(CoreTestsGolubetsTestHostSmallApi) api_data =
      core_tests_golubets_test_host_small_api_new(vtable, user_data,
                                                  user_data_free_func);

  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  g_autofree gchar* echo_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostSmallApi.echo%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_channel = fl_basic_message_channel_new(
      messenger, echo_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      echo_channel, core_tests_golubets_test_host_small_api_echo_cb,
      g_object_ref(api_data), g_object_unref);
  g_autofree gchar* void_void_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostSmallApi.voidVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) void_void_channel =
      fl_basic_message_channel_new(messenger, void_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(
      void_void_channel, core_tests_golubets_test_host_small_api_void_void_cb,
      g_object_ref(api_data), g_object_unref);
}

void core_tests_golubets_test_host_small_api_clear_method_handlers(
    FlBinaryMessenger* messenger, const gchar* suffix) {
  g_autofree gchar* dot_suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");

  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  g_autofree gchar* echo_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostSmallApi.echo%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) echo_channel = fl_basic_message_channel_new(
      messenger, echo_channel_name, FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(echo_channel, nullptr, nullptr,
                                               nullptr);
  g_autofree gchar* void_void_channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.HostSmallApi.voidVoid%s",
      dot_suffix);
  g_autoptr(FlBasicMessageChannel) void_void_channel =
      fl_basic_message_channel_new(messenger, void_void_channel_name,
                                   FL_MESSAGE_CODEC(codec));
  fl_basic_message_channel_set_message_handler(void_void_channel, nullptr,
                                               nullptr, nullptr);
}

void core_tests_golubets_test_host_small_api_respond_echo(
    CoreTestsGolubetsTestHostSmallApiResponseHandle* response_handle,
    const gchar* return_value) {
  g_autoptr(CoreTestsGolubetsTestHostSmallApiEchoResponse) response =
      core_tests_golubets_test_host_small_api_echo_response_new(return_value);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi", "echo",
              error->message);
  }
}

void core_tests_golubets_test_host_small_api_respond_error_echo(
    CoreTestsGolubetsTestHostSmallApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsGolubetsTestHostSmallApiEchoResponse) response =
      core_tests_golubets_test_host_small_api_echo_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi", "echo",
              error->message);
  }
}

void core_tests_golubets_test_host_small_api_respond_void_void(
    CoreTestsGolubetsTestHostSmallApiResponseHandle* response_handle) {
  g_autoptr(CoreTestsGolubetsTestHostSmallApiVoidVoidResponse) response =
      core_tests_golubets_test_host_small_api_void_void_response_new();
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi",
              "voidVoid", error->message);
  }
}

void core_tests_golubets_test_host_small_api_respond_error_void_void(
    CoreTestsGolubetsTestHostSmallApiResponseHandle* response_handle,
    const gchar* code, const gchar* message, FlValue* details) {
  g_autoptr(CoreTestsGolubetsTestHostSmallApiVoidVoidResponse) response =
      core_tests_golubets_test_host_small_api_void_void_response_new_error(
          code, message, details);
  g_autoptr(GError) error = nullptr;
  if (!fl_basic_message_channel_respond(response_handle->channel,
                                        response_handle->response_handle,
                                        response->value, &error)) {
    g_warning("Failed to send response to %s.%s: %s", "HostSmallApi",
              "voidVoid", error->message);
  }
}

struct _CoreTestsGolubetsTestFlutterSmallApi {
  GObject parent_instance;

  FlBinaryMessenger* messenger;
  gchar* suffix;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestFlutterSmallApi,
              core_tests_golubets_test_flutter_small_api, G_TYPE_OBJECT)

static void core_tests_golubets_test_flutter_small_api_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterSmallApi* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_SMALL_API(object);
  g_clear_object(&self->messenger);
  g_clear_pointer(&self->suffix, g_free);
  G_OBJECT_CLASS(core_tests_golubets_test_flutter_small_api_parent_class)
      ->dispose(object);
}

static void core_tests_golubets_test_flutter_small_api_init(
    CoreTestsGolubetsTestFlutterSmallApi* self) {}

static void core_tests_golubets_test_flutter_small_api_class_init(
    CoreTestsGolubetsTestFlutterSmallApiClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_small_api_dispose;
}

CoreTestsGolubetsTestFlutterSmallApi*
core_tests_golubets_test_flutter_small_api_new(FlBinaryMessenger* messenger,
                                               const gchar* suffix) {
  CoreTestsGolubetsTestFlutterSmallApi* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_SMALL_API(g_object_new(
          core_tests_golubets_test_flutter_small_api_get_type(), nullptr));
  self->messenger = FL_BINARY_MESSENGER(g_object_ref(messenger));
  self->suffix =
      suffix != nullptr ? g_strdup_printf(".%s", suffix) : g_strdup("");
  return self;
}

struct _CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(
    CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse,
    core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response,
    G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_init(
    CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse* self) {}

static void
core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_class_init(
    CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_dispose;
}

static CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse*
core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          g_object_new(
              core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_get_type(),
              nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_is_error(
    CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_get_error_code(
    CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_get_error_message(
    CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_get_error_details(
    CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

CoreTestsGolubetsTestTestMessage*
core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_get_return_value(
    CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_SMALL_API_ECHO_WRAPPED_LIST_RESPONSE(
          self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_is_error(
          self));
  return CORE_TESTS_GOLUBETS_TEST_TEST_MESSAGE(
      fl_value_get_custom_value_object(self->return_value));
}

static void core_tests_golubets_test_flutter_small_api_echo_wrapped_list_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_small_api_echo_wrapped_list(
    CoreTestsGolubetsTestFlutterSmallApi* self,
    CoreTestsGolubetsTestTestMessage* msg, GCancellable* cancellable,
    GAsyncReadyCallback callback, gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(
      args, fl_value_new_custom_object(
                core_tests_golubets_test_test_message_type_id, G_OBJECT(msg)));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.FlutterSmallApi."
      "echoWrappedList%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_small_api_echo_wrapped_list_cb, task);
}

CoreTestsGolubetsTestFlutterSmallApiEchoWrappedListResponse*
core_tests_golubets_test_flutter_small_api_echo_wrapped_list_finish(
    CoreTestsGolubetsTestFlutterSmallApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_small_api_echo_wrapped_list_response_new(
      response);
}

struct _CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse {
  GObject parent_instance;

  FlValue* error;
  FlValue* return_value;
};

G_DEFINE_TYPE(CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse,
              core_tests_golubets_test_flutter_small_api_echo_string_response,
              G_TYPE_OBJECT)

static void
core_tests_golubets_test_flutter_small_api_echo_string_response_dispose(
    GObject* object) {
  CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(object);
  g_clear_pointer(&self->error, fl_value_unref);
  g_clear_pointer(&self->return_value, fl_value_unref);
  G_OBJECT_CLASS(
      core_tests_golubets_test_flutter_small_api_echo_string_response_parent_class)
      ->dispose(object);
}

static void
core_tests_golubets_test_flutter_small_api_echo_string_response_init(
    CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse* self) {}

static void
core_tests_golubets_test_flutter_small_api_echo_string_response_class_init(
    CoreTestsGolubetsTestFlutterSmallApiEchoStringResponseClass* klass) {
  G_OBJECT_CLASS(klass)->dispose =
      core_tests_golubets_test_flutter_small_api_echo_string_response_dispose;
}

static CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse*
core_tests_golubets_test_flutter_small_api_echo_string_response_new(
    FlValue* response) {
  CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse* self =
      CORE_TESTS_GOLUBETS_TEST_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(g_object_new(
          core_tests_golubets_test_flutter_small_api_echo_string_response_get_type(),
          nullptr));
  if (fl_value_get_length(response) > 1) {
    self->error = fl_value_ref(response);
  } else {
    FlValue* value = fl_value_get_list_value(response, 0);
    self->return_value = fl_value_ref(value);
  }
  return self;
}

gboolean
core_tests_golubets_test_flutter_small_api_echo_string_response_is_error(
    CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(self),
      FALSE);
  return self->error != nullptr;
}

const gchar*
core_tests_golubets_test_flutter_small_api_echo_string_response_get_error_code(
    CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_small_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 0));
}

const gchar*
core_tests_golubets_test_flutter_small_api_echo_string_response_get_error_message(
    CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_small_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(fl_value_get_list_value(self->error, 1));
}

FlValue*
core_tests_golubets_test_flutter_small_api_echo_string_response_get_error_details(
    CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(self),
      nullptr);
  g_assert(
      core_tests_golubets_test_flutter_small_api_echo_string_response_is_error(
          self));
  return fl_value_get_list_value(self->error, 2);
}

const gchar*
core_tests_golubets_test_flutter_small_api_echo_string_response_get_return_value(
    CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse* self) {
  g_return_val_if_fail(
      CORE_TESTS_GOLUBETS_TEST_IS_FLUTTER_SMALL_API_ECHO_STRING_RESPONSE(self),
      nullptr);
  g_assert(
      !core_tests_golubets_test_flutter_small_api_echo_string_response_is_error(
          self));
  return fl_value_get_string(self->return_value);
}

static void core_tests_golubets_test_flutter_small_api_echo_string_cb(
    GObject* object, GAsyncResult* result, gpointer user_data) {
  GTask* task = G_TASK(user_data);
  g_task_return_pointer(task, result, g_object_unref);
}

void core_tests_golubets_test_flutter_small_api_echo_string(
    CoreTestsGolubetsTestFlutterSmallApi* self, const gchar* a_string,
    GCancellable* cancellable, GAsyncReadyCallback callback,
    gpointer user_data) {
  g_autoptr(FlValue) args = fl_value_new_list();
  fl_value_append_take(args, fl_value_new_string(a_string));
  g_autofree gchar* channel_name = g_strdup_printf(
      "dev.bayori.golubets.golubets_integration_tests.FlutterSmallApi."
      "echoString%s",
      self->suffix);
  g_autoptr(CoreTestsGolubetsTestGolubMessageCodec) codec =
      core_tests_golubets_test_golub_message_codec_new();
  FlBasicMessageChannel* channel = fl_basic_message_channel_new(
      self->messenger, channel_name, FL_MESSAGE_CODEC(codec));
  GTask* task = g_task_new(self, cancellable, callback, user_data);
  g_task_set_task_data(task, channel, g_object_unref);
  fl_basic_message_channel_send(
      channel, args, cancellable,
      core_tests_golubets_test_flutter_small_api_echo_string_cb, task);
}

CoreTestsGolubetsTestFlutterSmallApiEchoStringResponse*
core_tests_golubets_test_flutter_small_api_echo_string_finish(
    CoreTestsGolubetsTestFlutterSmallApi* self, GAsyncResult* result,
    GError** error) {
  g_autoptr(GTask) task = G_TASK(result);
  GAsyncResult* r = G_ASYNC_RESULT(g_task_propagate_pointer(task, nullptr));
  FlBasicMessageChannel* channel =
      FL_BASIC_MESSAGE_CHANNEL(g_task_get_task_data(task));
  g_autoptr(FlValue) response =
      fl_basic_message_channel_send_finish(channel, r, error);
  if (response == nullptr) {
    return nullptr;
  }
  return core_tests_golubets_test_flutter_small_api_echo_string_response_new(
      response);
}
